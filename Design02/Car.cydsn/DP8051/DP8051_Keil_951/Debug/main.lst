C51 COMPILER V9.51   MAIN                                                                  03/10/2015 15:10:16 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB DF(DEBUG) WL(2) PR(.\DP8051\DP805
                    -1_Keil_951\Debug/main.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\main.obj)

line level    source

   1          #include <project.h>
   2          #include <stdio.h>
   3          #define INCH_PER_MAGNET 1.58
   4          #define SEC_PER_PERIOD 357.914
   5          #define EXPECTED_SPEED 3.05
   6          #define THREE_FT_DUTY 900
   7          
   8          //kp and three ft for air 630, 100
   9          
  10          #define Kp 5250
  11          #define Ki 0
  12          #define Kd 500
  13          
  14          double gprev_HE_count = 0;
  15          int gfirst_HE_read = 1;
  16          int gspeedMeasurements = 0;
  17          double gcurSpeed = 0;
  18          double speedCounts[5];
  19          double gki_error = 0;
  20          
  21          
  22          double getSpeedAvg(double speeds[]){
  23   1          double counter = 0;
  24   1          uint32 i = 0;
  25   1          uint32 size = 5;
  26   1          if (gspeedMeasurements < 5) {
  27   2              size = gspeedMeasurements;
  28   2          }
  29   1          for (i = 0; i < size; i++){
  30   2              counter = counter + speeds[i];   
  31   2          }
  32   1          return counter/(double)size;
  33   1      }
  34          
  35          double getCurSpeed(){
  36   1          double current_Speed = 0;
  37   1          //average clock tix b/w two magnets in one rotation
  38   1          current_Speed = getSpeedAvg(speedCounts);
  39   1          //average sec elapsed b/w two magnets
  40   1          current_Speed = (double)current_Speed/HE_TIMER_ReadPeriod() * SEC_PER_PERIOD;
  41   1          //average speed b/w two magnets
  42   1          current_Speed = (double)INCH_PER_MAGNET/current_Speed/12;
  43   1          // return (double)current_Speed;
  44   1          return current_Speed;
  45   1      }
  46          
  47          CY_ISR(HE_inter) {
  48   1          char buffer[15];
  49   1          double cam_data;
  50   1          LCD_ClearDisplay();
  51   1          LCD_Position(0,0);
  52   1          cam_data = CAM_OUT_PIN_Read();
  53   1          sprintf(buffer, "%f", cam_data);
C51 COMPILER V9.51   MAIN                                                                  03/10/2015 15:10:16 PAGE 2   

  54   1          LCD_PrintString(buffer);
  55   1          
  56   1          
  57   1      //    double curr_HE_count = 0;
  58   1      //    double time_diff = 0;
  59   1      //    double time_diff_s = 0;
  60   1      //    double error = 0;
  61   1      //    double PID_speed = 0;
  62   1      //    char buffer[15];
  63   1      //    double duty_cycle_buffer = 0;
  64   1      //    uint16 duty_cycle = 0;
  65   1      //    
  66   1      //    
  67   1      //    if (gfirst_HE_read == 1) {
  68   1      //        gprev_HE_count = HE_TIMER_ReadCounter();
  69   1      //        gfirst_HE_read = 0;
  70   1      //    } 
  71   1      //    else {
  72   1      //        curr_HE_count = HE_TIMER_ReadCounter();
  73   1      //    
  74   1      //
  75   1      //        if (gprev_HE_count < curr_HE_count) {
  76   1      //            gprev_HE_count = gprev_HE_count + HE_TIMER_ReadPeriod();
  77   1      //        }
  78   1      //
  79   1      //        time_diff = gprev_HE_count - curr_HE_count;
  80   1      //        time_diff_s = time_diff/HE_TIMER_ReadPeriod() * SEC_PER_PERIOD;
  81   1      //        
  82   1      //        speedCounts[gspeedMeasurements%5] = time_diff;
  83   1      //        gspeedMeasurements++;
  84   1      //        gcurSpeed = getCurSpeed();
  85   1      //        gprev_HE_count = curr_HE_count;
  86   1      //        
  87   1      //        error = EXPECTED_SPEED - gcurSpeed;
  88   1      //        gki_error = gki_error+error*time_diff_s;
  89   1      //        if (gspeedMeasurements == 28) gki_error = 0;
  90   1      //        duty_cycle_buffer = THREE_FT_DUTY + Kp*error + Ki*gki_error + Kd*error/time_diff_s;
  91   1      //        
  92   1      //        LCD_ClearDisplay();
  93   1      //        LCD_Position(0,0);
  94   1      //        sprintf(buffer, "%f", error);        
  95   1      //        LCD_PrintString(buffer);
  96   1      //        LCD_PrintString("//");
  97   1      //        sprintf(buffer, "%f", Kd*error/time_diff_s);
  98   1      //        LCD_PrintString(buffer);
  99   1      //        
 100   1      //   
 101   1      //        if (duty_cycle_buffer > 4000){
 102   1      //            duty_cycle_buffer = 1350;   
 103   1      //        }
 104   1      //        if (duty_cycle_buffer <= 0) duty_cycle_buffer = 1;
 105   1      //        duty_cycle = duty_cycle_buffer;
 106   1      //        
 107   1      //        LCD_Position(1, 0);
 108   1      //        //sprintf(buffer, "%f", duty_cycle);
 109   1      //        LCD_PrintNumber(duty_cycle);
 110   1      //        
 111   1      //        PWM_WriteCompare(duty_cycle);
 112   1      //    }
 113   1      //    PWM_WriteCompare(100);
 114   1      //    LCD_ClearDisplay();
 115   1      //    LCD_PrintNumber(gcurSpeed);
C51 COMPILER V9.51   MAIN                                                                  03/10/2015 15:10:16 PAGE 3   

 116   1      //    gcurSpeed++;
 117   1      }
 118              
 119          int main()
 120          {
 121   1          CYGlobalIntEnable;  
 122   1          LCD_Start();
 123   1          LCD_Position(0,0);
 124   1          LCD_PrintString("ELE302 Carlab");
 125   1          
 126   1          HE_TIMER_Start();
 127   1          HE_ISR_Start();
 128   1          HE_ISR_SetVector(HE_inter);
 129   1          
 130   1          PWM_Start();
 131   1          PWM_CLK_Start();
 132   1              
 133   1          for(;;)
 134   1          {
 135   2          }
 136   1      }
 137          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  03/10/2015 15:10:16 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _getSpeedAvg (BEGIN)
                                           ; SOURCE LINE # 22
0000 900000      R     MOV     DPTR,#speeds
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 23
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#counter
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 24
0014 7F00              MOV     R7,#00H
0016 7E00              MOV     R6,#00H
0018 7D00              MOV     R5,#00H
001A 7C00              MOV     R4,#00H
001C 900000      R     MOV     DPTR,#i
001F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 25
0022 7F05              MOV     R7,#05H
0024 7E00              MOV     R6,#00H
0026 7D00              MOV     R5,#00H
0028 7C00              MOV     R4,#00H
002A 900000      R     MOV     DPTR,#size
002D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 26
0030 900000      R     MOV     DPTR,#gspeedMeasurements
0033 E0                MOVX    A,@DPTR
0034 FE                MOV     R6,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 C3                CLR     C
0039 EF                MOV     A,R7
003A 9405              SUBB    A,#05H
003C EE                MOV     A,R6
003D 6480              XRL     A,#080H
003F 9480              SUBB    A,#080H
0041 5014              JNC     ?C0001
                                           ; SOURCE LINE # 27
0043 900000      R     MOV     DPTR,#gspeedMeasurements
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B EE                MOV     A,R6
004C 33                RLC     A
004D 95E0              SUBB    A,ACC
004F FD                MOV     R5,A
0050 FC                MOV     R4,A
0051 900000      R     MOV     DPTR,#size
0054 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 28
0057         ?C0001:
                                           ; SOURCE LINE # 29
0057 7F00              MOV     R7,#00H
0059 7E00              MOV     R6,#00H
005B 7D00              MOV     R5,#00H
C51 COMPILER V9.51   MAIN                                                                  03/10/2015 15:10:16 PAGE 5   

005D 7C00              MOV     R4,#00H
005F 900000      R     MOV     DPTR,#i
0062 120000      E     LCALL   ?C?LSTXDATA
0065         ?C0002:
0065 900000      R     MOV     DPTR,#size
0068 120000      E     LCALL   ?C?LLDXDATA
006B 900000      R     MOV     DPTR,#i
006E 120000      E     LCALL   ?C?LLDXDATA0
0071 C3                CLR     C
0072 120000      E     LCALL   ?C?ULCMP
0075 505B              JNC     ?C0003
                                           ; SOURCE LINE # 30
0077 900000      R     MOV     DPTR,#counter
007A 120000      E     LCALL   ?C?LLDXDATA
007D C004              PUSH    AR4
007F C005              PUSH    AR5
0081 C006              PUSH    AR6
0083 C007              PUSH    AR7
0085 7F04              MOV     R7,#04H
0087 7E00              MOV     R6,#00H
0089 7D00              MOV     R5,#00H
008B 7C00              MOV     R4,#00H
008D 900000      R     MOV     DPTR,#i
0090 120000      E     LCALL   ?C?LLDXDATA0
0093 120000      E     LCALL   ?C?LMUL
0096 900000      R     MOV     DPTR,#speeds
0099 120000      E     LCALL   ?C?PLDXDATA
009C E9                MOV     A,R1
009D 2F                ADD     A,R7
009E F9                MOV     R1,A
009F EA                MOV     A,R2
00A0 3E                ADDC    A,R6
00A1 FA                MOV     R2,A
00A2 EB                MOV     A,R3
00A3 3D                ADDC    A,R5
00A4 FB                MOV     R3,A
00A5 120000      E     LCALL   ?C?LLDPTR0
00A8 D007              POP     AR7
00AA D006              POP     AR6
00AC D005              POP     AR5
00AE D004              POP     AR4
00B0 120000      E     LCALL   ?C?FPADD
00B3 900000      R     MOV     DPTR,#counter
00B6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 31
00B9 900000      R     MOV     DPTR,#i
00BC 120000      E     LCALL   ?C?LLDXDATA
00BF 7B01              MOV     R3,#01H
00C1 7A00              MOV     R2,#00H
00C3 7900              MOV     R1,#00H
00C5 7800              MOV     R0,#00H
00C7 120000      E     LCALL   ?C?LADD
00CA 900000      R     MOV     DPTR,#i
00CD 120000      E     LCALL   ?C?LSTXDATA
00D0 8093              SJMP    ?C0002
00D2         ?C0003:
                                           ; SOURCE LINE # 32
00D2 900000      R     MOV     DPTR,#size
00D5 120000      E     LCALL   ?C?LLDXDATA
00D8 E4                CLR     A
00D9 120000      E     LCALL   ?C?FCASTL
00DC A804              MOV     R0,AR4
C51 COMPILER V9.51   MAIN                                                                  03/10/2015 15:10:16 PAGE 6   

00DE A905              MOV     R1,AR5
00E0 AA06              MOV     R2,AR6
00E2 AB07              MOV     R3,AR7
00E4 900000      R     MOV     DPTR,#counter
00E7 120000      E     LCALL   ?C?LLDXDATA
00EA 120000      E     LCALL   ?C?FPDIV
                                           ; SOURCE LINE # 33
00ED         ?C0005:
00ED 22                RET     
             ; FUNCTION _getSpeedAvg (END)

             ; FUNCTION getCurSpeed (BEGIN)
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#current_Speed
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 38
000E 7B01              MOV     R3,#01H
0010 7A00        R     MOV     R2,#HIGH speedCounts
0012 7900        R     MOV     R1,#LOW speedCounts
0014 120000      R     LCALL   _getSpeedAvg
0017 900000      R     MOV     DPTR,#current_Speed
001A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 40
001D 120000      E     LCALL   HE_TIMER_ReadPeriod
0020 E4                CLR     A
0021 120000      E     LCALL   ?C?FCASTL
0024 A804              MOV     R0,AR4
0026 A905              MOV     R1,AR5
0028 AA06              MOV     R2,AR6
002A AB07              MOV     R3,AR7
002C 900000      R     MOV     DPTR,#current_Speed
002F 120000      E     LCALL   ?C?LLDXDATA
0032 120000      E     LCALL   ?C?FPDIV
0035 7BFE              MOV     R3,#0FEH
0037 7AF4              MOV     R2,#0F4H
0039 79B2              MOV     R1,#0B2H
003B 7843              MOV     R0,#043H
003D 120000      E     LCALL   ?C?FPMUL
0040 900000      R     MOV     DPTR,#current_Speed
0043 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 42
0046 900000      R     MOV     DPTR,#current_Speed
0049 120000      E     LCALL   ?C?LLDXDATA0
004C 7F71              MOV     R7,#071H
004E 7E3D              MOV     R6,#03DH
0050 7DCA              MOV     R5,#0CAH
0052 7C3F              MOV     R4,#03FH
0054 120000      E     LCALL   ?C?FPDIV
0057 7B00              MOV     R3,#00H
0059 7A00              MOV     R2,#00H
005B 7940              MOV     R1,#040H
005D 7841              MOV     R0,#041H
005F 120000      E     LCALL   ?C?FPDIV
0062 900000      R     MOV     DPTR,#current_Speed
0065 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 44
0068 900000      R     MOV     DPTR,#current_Speed
C51 COMPILER V9.51   MAIN                                                                  03/10/2015 15:10:16 PAGE 7   

006B 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 45
006E         ?C0006:
006E 22                RET     
             ; FUNCTION getCurSpeed (END)

             ; FUNCTION HE_inter (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 50
002B 7F01              MOV     R7,#01H
002D 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 51
0030 7D00              MOV     R5,#00H
0032 7F00              MOV     R7,#00H
0034 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 52
0037 120000      E     LCALL   CAM_OUT_PIN_Read
003A AC07              MOV     R4,AR7
003C E4                CLR     A
003D 120000      E     LCALL   ?C?FCASTC
0040 900000      R     MOV     DPTR,#cam_data
0043 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 53
0046 7B01              MOV     R3,#01H
0048 7A00        R     MOV     R2,#HIGH buffer
004A 7900        R     MOV     R1,#LOW buffer
004C C003              PUSH    AR3
004E C002              PUSH    AR2
0050 C001              PUSH    AR1
0052 7BFF              MOV     R3,#0FFH
0054 7A00        R     MOV     R2,#HIGH ?SC_0
0056 7900        R     MOV     R1,#LOW ?SC_0
0058 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
005B 120000      E     LCALL   ?C?PSTXDATA
005E 900000      R     MOV     DPTR,#cam_data
0061 120000      E     LCALL   ?C?LLDXDATA
0064 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0067 120000      E     LCALL   ?C?LSTXDATA
006A D001              POP     AR1
006C D002              POP     AR2
006E D003              POP     AR3
0070 120000      E     LCALL   _sprintf
C51 COMPILER V9.51   MAIN                                                                  03/10/2015 15:10:16 PAGE 8   

                                           ; SOURCE LINE # 54
0073 7B01              MOV     R3,#01H
0075 7A00        R     MOV     R2,#HIGH buffer
0077 7900        R     MOV     R1,#LOW buffer
0079 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 117
007C D007              POP     AR7
007E D006              POP     AR6
0080 D005              POP     AR5
0082 D004              POP     AR4
0084 D003              POP     AR3
0086 D002              POP     AR2
0088 D001              POP     AR1
008A D000              POP     AR0
008C D0D0              POP     PSW
008E D000        E     POP     ?C?XPAGE1SFR
0090 D086              POP     DPS
0092 D084              POP     DPL1
0094 D085              POP     DPH1
0096 D082              POP     DPL
0098 D083              POP     DPH
009A D0F0              POP     B
009C D0E0              POP     ACC
009E 32                RETI    
             ; FUNCTION HE_inter (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
0000 D2AF              SETB    EA
0002 9044F4            MOV     DPTR,#044F4H
0005 74FD              MOV     A,#0FDH
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
0008 120000      E     LCALL   LCD_Start
                                           ; SOURCE LINE # 123
000B 7D00              MOV     R5,#00H
000D 7F00              MOV     R7,#00H
000F 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 124
0012 7BFF              MOV     R3,#0FFH
0014 7A00        R     MOV     R2,#HIGH ?SC_3
0016 7900        R     MOV     R1,#LOW ?SC_3
0018 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 126
001B 120000      E     LCALL   HE_TIMER_Start
                                           ; SOURCE LINE # 127
001E 120000      E     LCALL   HE_ISR_Start
                                           ; SOURCE LINE # 128
0021 7E00        R     MOV     R6,#HIGH HE_inter
0023 7F00        R     MOV     R7,#LOW HE_inter
0025 120000      E     LCALL   _HE_ISR_SetVector
                                           ; SOURCE LINE # 130
0028 120000      E     LCALL   PWM_Start
                                           ; SOURCE LINE # 131
002B 120000      E     LCALL   PWM_CLK_Start
                                           ; SOURCE LINE # 133
002E         ?C0008:
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
002E 80FE              SJMP    ?C0008
C51 COMPILER V9.51   MAIN                                                                  03/10/2015 15:10:16 PAGE 9   

0030 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    557    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =     36      38
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
