C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYPM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Release\cyPm.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyPm.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL(2) PR(.
                    -\DP8051\DP8051_Keil_951\Release/cyPm.lst) CD OT(8,SIZE) OJ(.\DP8051\DP8051_Keil_951\Release\cyPm.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: cyPm.c
   3          * Version 4.20
   4          *
   5          * Description:
   6          *  Provides an API for the power management.
   7          *
   8          * Note:
   9          *  Documentation of the API's in this file is located in the
  10          *  System Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "cyPm.h"
  20          
  21          
  22          /*******************************************************************
  23          * Place your includes, defines, and code here. Do not use the merge
  24          * region below unless any component datasheet suggests doing so.
  25          *******************************************************************/
  26          /* `#START CY_PM_HEADER_INCLUDE` */
  27          
  28          /* `#END` */
  29          
  30          
  31          static CY_PM_BACKUP_STRUCT          cyPmBackup;
  32          static CY_PM_CLOCK_BACKUP_STRUCT    cyPmClockBackup;
  33          
  34          /* Convertion table between register's values and frequency in MHz  */
  35          static const uint8 CYCODE cyPmImoFreqReg2Mhz[7u] = {12u, 6u, 24u, 3u, 48u, 62u, 74u};
  36          
  37          /* Function Prototypes */
  38          static void CyPmHibSaveSet(void);
  39          static void CyPmHibRestore(void) ;
  40          
  41          static void CyPmHibSlpSaveSet(void) ;
  42          static void CyPmHibSlpRestore(void) ;
  43          
  44          static void CyPmHviLviSaveDisable(void) ;
  45          static void CyPmHviLviRestore(void) ;
  46          
  47          
  48          /*******************************************************************************
  49          * Function Name: CyPmSaveClocks
  50          ********************************************************************************
  51          *
  52          * Summary:
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 2   

  53          *  This function is called in preparation for entering sleep or hibernate low
  54          *  power modes. Saves all the states of the clocking system that do not persist
  55          *  during sleep/hibernate or that need to be altered in preparation for
  56          *  sleep/hibernate. Shutdowns all the digital and analog clock dividers for the
  57          *  active power mode configuration.
  58          *
  59          *  Switches the master clock over to the IMO and shuts down the PLL and MHz
  60          *  Crystal. The IMO frequency is set to either 12 MHz or 48 MHz to match the
  61          *  Design-Wide Resources System Editor "Enable Fast IMO During Startup" setting.
  62          *  The ILO and 32 KHz oscillators are not impacted. The current Flash wait state
  63          *  setting is saved and the Flash wait state setting is set for the current IMO
  64          *  speed.
  65          *
  66          *  Note If the Master Clock source is routed through the DSI inputs, then it
  67          *  must be set manually to another source before using the
  68          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
  69          *
  70          * Parameters:
  71          *  None
  72          *
  73          * Return:
  74          *  None
  75          *
  76          * Side Effects:
  77          *  All peripheral clocks are going to be off after this API method call.
  78          *
  79          *******************************************************************************/
  80          void CyPmSaveClocks(void) 
  81          {
  82   1          /* Digital and analog clocks - save enable state and disable them all */
  83   1          cyPmClockBackup.enClkA = CY_PM_ACT_CFG1_REG & CY_PM_ACT_EN_CLK_A_MASK;
  84   1          cyPmClockBackup.enClkD = CY_PM_ACT_CFG2_REG;
  85   1          CY_PM_ACT_CFG1_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_A_MASK));
  86   1          CY_PM_ACT_CFG2_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_D_MASK));
  87   1      
  88   1          /* Save current flash wait cycles and set the maximum value */
  89   1          cyPmClockBackup.flashWaitCycles = CY_PM_CACHE_CR_CYCLES_MASK & CY_PM_CACHE_CR_REG;
  90   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
  91   1      
  92   1          /* IMO - save current IMO MHz OSC frequency and USB mode is on bit */
  93   1          cyPmClockBackup.imoFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
  94   1          cyPmClockBackup.imoUsbClk = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_USB;
  95   1      
  96   1          /* IMO doubler - save enable state */
  97   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
  98   1          {
  99   2              /* IMO doubler enabled - save and disable */
 100   2              cyPmClockBackup.imo2x = CY_PM_ENABLED;
 101   2          }
 102   1          else
 103   1          {
 104   2              /* IMO doubler disabled */
 105   2              cyPmClockBackup.imo2x = CY_PM_DISABLED;
 106   2          }
 107   1      
 108   1          /* Master clock - save source */
 109   1          cyPmClockBackup.masterClkSrc = CY_PM_CLKDIST_MSTR1_REG & CY_PM_MASTER_CLK_SRC_MASK;
 110   1      
 111   1          /* Switch Master clock's source from PLL's output to PLL's source */
 112   1          if(CY_MASTER_SOURCE_PLL == cyPmClockBackup.masterClkSrc)
 113   1          {
 114   2              switch (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_PLL_SRC_MASK)
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 3   

 115   2              {
 116   3              case CY_PM_CLKDIST_PLL_SRC_IMO:
 117   3                  CyMasterClk_SetSource(CY_MASTER_SOURCE_IMO);
 118   3                  break;
 119   3      
 120   3              case CY_PM_CLKDIST_PLL_SRC_XTAL:
 121   3                  CyMasterClk_SetSource(CY_MASTER_SOURCE_XTAL);
 122   3                  break;
 123   3      
 124   3              case CY_PM_CLKDIST_PLL_SRC_DSI:
 125   3                  CyMasterClk_SetSource(CY_MASTER_SOURCE_DSI);
 126   3                  break;
 127   3      
 128   3              default:
 129   3                  CYASSERT(0u != 0u);
 130   3                  break;
 131   3              }
 132   2          }
 133   1      
 134   1          /* PLL - check enable state, disable if needed */
 135   1          if(0u != (CY_PM_FASTCLK_PLL_CFG0_REG & CY_PM_PLL_CFG0_ENABLE))
 136   1          {
 137   2              /* PLL is enabled - save state and disable */
 138   2              cyPmClockBackup.pllEnableState = CY_PM_ENABLED;
 139   2              CyPLL_OUT_Stop();
 140   2          }
 141   1          else
 142   1          {
 143   2              /* PLL is disabled - save state */
 144   2              cyPmClockBackup.pllEnableState = CY_PM_DISABLED;
 145   2          }
 146   1      
 147   1          /* IMO - set appropriate frequency for LPM */
 148   1          CyIMO_SetFreq(CY_PM_IMO_FREQ_LPM);
 149   1      
 150   1          /* IMO - save enable state and enable without wait to settle */
 151   1          if(0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG))
 152   1          {
 153   2              /* IMO - save enabled state */
 154   2              cyPmClockBackup.imoEnable = CY_PM_ENABLED;
 155   2          }
 156   1          else
 157   1          {
 158   2              /* IMO - save disabled state */
 159   2              cyPmClockBackup.imoEnable = CY_PM_DISABLED;
 160   2      
 161   2              /* Enable the IMO. Use software delay instead of the FTW-based inside */
 162   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 163   2      
 164   2              /* Settling time of the IMO is of the order of less than 6us */
 165   2              CyDelayUs(6u);
 166   2          }
 167   1      
 168   1          /* IMO - save the current IMOCLK source and set to IMO if not yet */
 169   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_XCLKEN))
 170   1          {
 171   2              /* DSI or XTAL CLK */
 172   2              cyPmClockBackup.imoClkSrc =
 173   2                  (0u == (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO2X_SRC)) ? CY_IMO_SOURCE_DSI : CY_IMO_SOURCE_X
             -TAL;
 174   2      
 175   2              /* IMO -  set IMOCLK source to IMO */
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 4   

 176   2              CyIMO_SetSource(CY_IMO_SOURCE_IMO);
 177   2          }
 178   1          else
 179   1          {
 180   2              /* IMO */
 181   2              cyPmClockBackup.imoClkSrc = CY_IMO_SOURCE_IMO;
 182   2          }
 183   1      
 184   1          /* Save clk_imo source */
 185   1          cyPmClockBackup.clkImoSrc = CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK;
 186   1      
 187   1          /* If IMOCLK2X or SPC OSC is source for clk_imo, set it to IMOCLK */
 188   1          if(CY_PM_CLKDIST_IMO_OUT_IMO != cyPmClockBackup.clkImoSrc)
 189   1          {
 190   2              /* Set IMOCLK to source for clk_imo */
 191   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 192   2                                      CY_PM_CLKDIST_IMO_OUT_IMO;
 193   2          }    /* Need to change nothing if IMOCLK is source clk_imo */
 194   1      
 195   1          /* IMO doubler - disable it (saved above) */
 196   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
 197   1          {
 198   2              CyIMO_DisableDoubler();
 199   2          }
 200   1      
 201   1          /* Master clock - save divider and set it to divide-by-one (if no yet) */
 202   1          cyPmClockBackup.clkSyncDiv = CY_PM_CLKDIST_MSTR0_REG;
 203   1          if(CY_PM_DIV_BY_ONE != cyPmClockBackup.clkSyncDiv)
 204   1          {
 205   2              CyMasterClk_SetDivider(CY_PM_DIV_BY_ONE);
 206   2          }    /* No change if master clock divider is 1 */
 207   1      
 208   1          /* Master clock source - set it to IMO if not yet. */
 209   1          if(CY_MASTER_SOURCE_IMO != cyPmClockBackup.masterClkSrc)
 210   1          {
 211   2              CyMasterClk_SetSource(CY_MASTER_SOURCE_IMO);
 212   2          }    /* No change if master clock source is IMO */
 213   1      
 214   1          /* Bus clock - save divider and set it, if needed, to divide-by-one */
 215   1          cyPmClockBackup.clkBusDiv = (uint16) ((uint16) CY_PM_CLK_BUS_MSB_DIV_REG << 8u);
 216   1          cyPmClockBackup.clkBusDiv |= CY_PM_CLK_BUS_LSB_DIV_REG;
 217   1          if(CY_PM_BUS_CLK_DIV_BY_ONE != cyPmClockBackup.clkBusDiv)
 218   1          {
 219   2              CyBusClk_SetDivider(CY_PM_BUS_CLK_DIV_BY_ONE);
 220   2          }    /* Do nothing if saved and actual values are equal */
 221   1      
 222   1          /* Set number of wait cycles for flash according to CPU frequency in MHz */
 223   1          CyFlash_SetWaitCycles((uint8)CY_PM_GET_CPU_FREQ_MHZ);
 224   1      
 225   1          /* MHz ECO - check enable state and disable if needed */
 226   1          if(0u != (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_ENABLE))
 227   1          {
 228   2              /* MHz ECO is enabled - save state and disable */
 229   2              cyPmClockBackup.xmhzEnableState = CY_PM_ENABLED;
 230   2              CyXTAL_Stop();
 231   2          }
 232   1          else
 233   1          {
 234   2              /* MHz ECO is disabled - save state */
 235   2              cyPmClockBackup.xmhzEnableState = CY_PM_DISABLED;
 236   2          }
 237   1      
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 5   

 238   1      
 239   1          /***************************************************************************
 240   1          * Save the enable state of delay between the system bus clock and each of the
 241   1          * 4 individual analog clocks. This bit non-retention and its value should
 242   1          * be restored on wakeup.
 243   1          ***************************************************************************/
 244   1          if(0u != (CY_PM_CLKDIST_DELAY_REG & CY_PM_CLKDIST_DELAY_EN))
 245   1          {
 246   2              cyPmClockBackup.clkDistDelay = CY_PM_ENABLED;
 247   2          }
 248   1          else
 249   1          {
 250   2              cyPmClockBackup.clkDistDelay = CY_PM_DISABLED;
 251   2          }
 252   1      }
 253          
 254          
 255          /*******************************************************************************
 256          * Function Name: CyPmRestoreClocks
 257          ********************************************************************************
 258          *
 259          * Summary:
 260          *  Restores any state that was preserved by the last call to CyPmSaveClocks().
 261          *  The Flash wait state setting is also restored.
 262          *
 263          *  Note If the Master Clock source is routed through the DSI inputs, then it
 264          *  must be set manually to another source before using the
 265          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
 266          *
 267          *  PSoC 3 and PSoC 5LP:
 268          *  The merge region could be used to process state when the megahertz crystal is
 269          *  not ready after a hold-off timeout.
 270          *
 271          *  PSoC 5:
 272          *  The 130 ms is given for the megahertz crystal to stabilize. Its readiness is
 273          *  not verified after a hold-off timeout.
 274          *
 275          * Parameters:
 276          *  None
 277          *
 278          * Return:
 279          *  None
 280          *
 281          *******************************************************************************/
 282          void CyPmRestoreClocks(void) 
 283          {
 284   1          cystatus status = CYRET_TIMEOUT;
 285   1          uint16 i;
 286   1          uint16 clkBusDivTmp;
 287   1      
 288   1      
 289   1          /* Convertion table between CyIMO_SetFreq() parameters and register's value */
 290   1          const uint8 CYCODE cyPmImoFreqMhz2Reg[7u] = {
 291   1              CY_IMO_FREQ_12MHZ, CY_IMO_FREQ_6MHZ,  CY_IMO_FREQ_24MHZ, CY_IMO_FREQ_3MHZ,
 292   1              CY_IMO_FREQ_48MHZ, 5u, 6u};
 293   1      
 294   1          /* Restore enable state of delay between system bus clock and ACLKs. */
 295   1          if(CY_PM_ENABLED == cyPmClockBackup.clkDistDelay)
 296   1          {
 297   2              /* Delay for both bandgap and delay line to settle out */
 298   2              CyDelayCycles((uint32)(CY_PM_CLK_DELAY_BANDGAP_SETTLE_US + CY_PM_CLK_DELAY_BIAS_SETTLE_US) *
 299   2                              CY_PM_GET_CPU_FREQ_MHZ);
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 6   

 300   2      
 301   2              CY_PM_CLKDIST_DELAY_REG |= CY_PM_CLKDIST_DELAY_EN;
 302   2          }
 303   1      
 304   1          /* MHz ECO restore state */
 305   1          if(CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState)
 306   1          {
 307   2              /***********************************************************************
 308   2              * Enabling XMHZ XTAL. The actual CyXTAL_Start() with a non zero wait
 309   2              * period uses FTW for period measurement. This could cause a problem
 310   2              * if CTW/FTW is used as a wake up time in the low power modes APIs.
 311   2              * So, the XTAL wait procedure is implemented with a software delay.
 312   2              ***********************************************************************/
 313   2      
 314   2              /* Enable XMHZ XTAL with no wait */
 315   2              (void) CyXTAL_Start(CY_PM_XTAL_MHZ_NO_WAIT);
 316   2      
 317   2              /* Read XERR bit to clear it */
 318   2              (void) CY_PM_FASTCLK_XMHZ_CSR_REG;
 319   2      
 320   2              /* Wait */
 321   2              for(i = CY_PM_MHZ_XTAL_WAIT_NUM_OF_200_US; i > 0u; i--)
 322   2              {
 323   3                  /* Make a 200 microseconds delay */
 324   3                  CyDelayCycles((uint32)CY_PM_WAIT_200_US * CY_PM_GET_CPU_FREQ_MHZ);
 325   3      
 326   3                  /* High output indicates oscillator failure */
 327   3                  if(0u == (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_XERR))
 328   3                  {
 329   4                      status = CYRET_SUCCESS;
 330   4                      break;
 331   4                  }
 332   3              }
 333   2      
 334   2              if(CYRET_TIMEOUT == status)
 335   2              {
 336   3                  /*******************************************************************
 337   3                  * Process the situation when megahertz crystal is not ready.
 338   3                  * Time to stabilize the value is crystal specific.
 339   3                  *******************************************************************/
 340   3                 /* `#START_MHZ_ECO_TIMEOUT` */
 341   3      
 342   3                 /* `#END` */
 343   3              }
 344   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState) */
 345   1      
 346   1      
 347   1          /* Temprorary set maximum flash wait cycles */
 348   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
 349   1      
 350   1          /* XTAL and DSI clocks are ready to be source for Master clock. */
 351   1          if((CY_PM_MASTER_CLK_SRC_XTAL == cyPmClockBackup.masterClkSrc) ||
 352   1             (CY_PM_MASTER_CLK_SRC_DSI  == cyPmClockBackup.masterClkSrc))
 353   1          {
 354   2              /* Restore Master clock's divider */
 355   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 356   2              {
 357   3                  /* Restore Master clock divider */
 358   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 359   3              }
 360   2      
 361   2              /* Restore Master clock source */
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 7   

 362   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 363   2          }
 364   1      
 365   1          /* IMO - restore IMO frequency */
 366   1          if((0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB)) &&
 367   1              (CY_IMO_FREQ_24MHZ == cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]))
 368   1          {
 369   2              /* Restore IMO frequency (24 MHz) and trim it for USB */
 370   2              CyIMO_SetFreq(CY_IMO_FREQ_USB);
 371   2          }
 372   1          else
 373   1          {
 374   2              /* Restore IMO frequency */
 375   2              CyIMO_SetFreq(cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]);
 376   2      
 377   2              if(0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB))
 378   2              {
 379   3                  CY_PM_FASTCLK_IMO_CR_REG |= CY_PM_FASTCLK_IMO_CR_USB;
 380   3              }
 381   2              else
 382   2              {
 383   3                  CY_PM_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_PM_FASTCLK_IMO_CR_USB));
 384   3              }
 385   2          }
 386   1      
 387   1          /* IMO - restore enable state if needed */
 388   1          if((CY_PM_ENABLED == cyPmClockBackup.imoEnable) &&
 389   1             (0u == (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 390   1          {
 391   2              /* IMO - restore enabled state */
 392   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 393   2          }
 394   1      
 395   1          /* IMO - restore IMOCLK source */
 396   1          CyIMO_SetSource(cyPmClockBackup.imoClkSrc);
 397   1      
 398   1          /* Restore IMO doubler enable state (turned off by CyPmSaveClocks()) */
 399   1          if(CY_PM_ENABLED == cyPmClockBackup.imo2x)
 400   1          {
 401   2              CyIMO_EnableDoubler();
 402   2          }
 403   1      
 404   1          /* IMO - restore clk_imo source, if needed */
 405   1          if(cyPmClockBackup.clkImoSrc != (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK))
 406   1          {
 407   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 408   2                                      cyPmClockBackup.clkImoSrc;
 409   2          }
 410   1      
 411   1      
 412   1          /* PLL restore state */
 413   1          if(CY_PM_ENABLED == cyPmClockBackup.pllEnableState)
 414   1          {
 415   2              /***********************************************************************
 416   2              * Enable PLL. The actual CyPLL_OUT_Start() without wait period uses FTW
 417   2              * for period measurement. This could cause a problem if CTW/FTW is used
 418   2              * as a wakeup time in the low power modes APIs. To omit this issue PLL
 419   2              * wait procedure is implemented with a software delay.
 420   2              ***********************************************************************/
 421   2              status = CYRET_TIMEOUT;
 422   2      
 423   2              /* Enable PLL */
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 8   

 424   2              (void) CyPLL_OUT_Start(CY_PM_PLL_OUT_NO_WAIT);
 425   2      
 426   2              /* Read to clear lock status after delay */
 427   2              CyDelayUs((uint32)80u);
 428   2              (void) CY_PM_FASTCLK_PLL_SR_REG;
 429   2      
 430   2              /* It should take 250 us lock: 251-80 = 171 */
 431   2              for(i = 171u; i > 0u; i--)
 432   2              {
 433   3                  CyDelayUs((uint32)1u);
 434   3      
 435   3                  /* Accept PLL is OK after two consecutive polls indicate PLL lock */
 436   3                  if((0u != (CY_PM_FASTCLK_PLL_SR_REG & CY_PM_FASTCLK_PLL_LOCKED)) &&
 437   3                     (0u != (CY_PM_FASTCLK_PLL_SR_REG & CY_PM_FASTCLK_PLL_LOCKED)))
 438   3                  {
 439   4                      status = CYRET_SUCCESS;
 440   4                      break;
 441   4                  }
 442   3              }
 443   2      
 444   2              if(CYRET_TIMEOUT == status)
 445   2              {
 446   3                  /*******************************************************************
 447   3                  * Process the situation when PLL is not ready.
 448   3                  *******************************************************************/
 449   3                 /* `#START_PLL_TIMEOUT` */
 450   3      
 451   3                 /* `#END` */
 452   3              }
 453   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.pllEnableState) */
 454   1      
 455   1      
 456   1          /* PLL and IMO is ready to be source for Master clock */
 457   1          if((CY_PM_MASTER_CLK_SRC_IMO == cyPmClockBackup.masterClkSrc) ||
 458   1             (CY_PM_MASTER_CLK_SRC_PLL == cyPmClockBackup.masterClkSrc))
 459   1          {
 460   2              /* Restore Master clock divider */
 461   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 462   2              {
 463   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 464   3              }
 465   2      
 466   2              /* Restore Master clock source */
 467   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 468   2          }
 469   1      
 470   1          /* IMO - disable if it was originally disabled */
 471   1          if((CY_PM_DISABLED == cyPmClockBackup.imoEnable) &&
 472   1             (0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 473   1          {
 474   2              CyIMO_Stop();
 475   2          }
 476   1      
 477   1          /* Bus clock - restore divider, if needed */
 478   1          clkBusDivTmp = (uint16) ((uint16)CY_PM_CLK_BUS_MSB_DIV_REG << 8u);
 479   1          clkBusDivTmp |= CY_PM_CLK_BUS_LSB_DIV_REG;
 480   1          if(cyPmClockBackup.clkBusDiv != clkBusDivTmp)
 481   1          {
 482   2              CyBusClk_SetDivider(cyPmClockBackup.clkBusDiv);
 483   2          }
 484   1      
 485   1          /* Restore flash wait cycles */
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 9   

 486   1          CY_PM_CACHE_CR_REG = ((CY_PM_CACHE_CR_REG & ((uint8)(~CY_PM_CACHE_CR_CYCLES_MASK))) |
 487   1                                 cyPmClockBackup.flashWaitCycles);
 488   1      
 489   1          /* Digital and analog clocks - restore state */
 490   1          CY_PM_ACT_CFG1_REG = cyPmClockBackup.enClkA;
 491   1          CY_PM_ACT_CFG2_REG = cyPmClockBackup.enClkD;
 492   1      }
 493          
 494          
 495          /*******************************************************************************
 496          * Function Name: CyPmAltAct
 497          ********************************************************************************
 498          *
 499          * Summary:
 500          *  Puts the part into the Alternate Active (Standby) state. The Alternate Active
 501          *  state can allow for any of the capabilities of the device to be active, but
 502          *  the operation of this function is dependent on the CPU being disabled during
 503          *  the Alternate Active state. The configuration code and the component APIs
 504          *  will configure the template for the Alternate Active state to be the same as
 505          *  the Active state with the exception that the CPU will be disabled during
 506          *  Alternate Active.
 507          *
 508          *  Note Before calling this function, you must manually configure the power mode
 509          *  of the source clocks for the timer that is used as the wakeup timer.
 510          *
 511          *  PSoC 3:
 512          *  Before switching to Alternate Active, if a wakeupTime other than NONE is
 513          *  specified, then the appropriate timer state is configured as specified with
 514          *  the interrupt for that timer disabled.  The wakeup source will be the
 515          *  combination of the values specified in the wakeupSource and any timer
 516          *  specified in the wakeupTime argument.  Once the wakeup condition is
 517          *  satisfied, then all saved state is restored and the function returns in the
 518          *  Active state.
 519          *
 520          *  Note that if the wakeupTime is made with a different value, the period before
 521          *  the wakeup occurs can be significantly shorter than the specified time.  If
 522          *  the next call is made with the same wakeupTime value, then the wakeup will
 523          *  occur the specified period after the previous wakeup occurred.
 524          *
 525          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 526          *  specified timer will be left as specified by wakeupTime with the timer
 527          *  enabled and the interrupt disabled.  If the CTW, FTW or One PPS is already
 528          *  configured for wakeup, for example with the SleepTimer or RTC components,
 529          *  then specify NONE for the wakeupTime and include the appropriate source for
 530          *  wakeupSource.
 531          *
 532          *  PSoC 5LP:
 533          *  This function is used to both enter the Alternate Active mode and halt the
 534          *  processor.  For PSoC 3 these two actions must be paired together.  With PSoC
 535          *  5LP the processor can be halted independently with the __WFI() function from
 536          *  the CMSIS library that is included in Creator.  This function should be used
 537          *  instead when the action required is just to halt the processor until an
 538          *  enabled interrupt occurs.
 539          *
 540          *  The wakeupTime parameter is not used for this device. It must be set to zero
 541          *  (PM_ALT_ACT_TIME_NONE). The wake up time configuration can be done by a
 542          *  separate component: the CTW wakeup interval should be configured with the
 543          *  Sleep Timer component and one second interval should be configured with the
 544          *  RTC component.
 545          *
 546          *  The wakeup behavior depends on the wakeupSource parameter in the following
 547          *  manner: upon function execution the device will be switched from Active to
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 10  

 548          *  Alternate Active mode and then the CPU will be halted. When an enabled wakeup
 549          *  event occurs the device will return to Active mode.  Similarly when an
 550          *  enabled interrupt occurs the CPU will be started. These two actions will
 551          *  occur together provided that the event that occurs is an enabled wakeup
 552          *  source and also generates an interrupt. If just the wakeup event occurs then
 553          *  the device will be in Active mode, but the CPU will remain halted waiting for
 554          *  an interrupt. If an interrupt occurs from something other than a wakeup
 555          *  source, then the CPU will restart with the device in Alternate Active mode
 556          *  until a wakeup event occurs.
 557          *
 558          *  For example, if CyPmAltAct(PM_ALT_ACT_TIME_NONE, PM_ALT_ACT_SRC_PICU) is
 559          *  called and PICU interrupt occurs, the CPU will be started and device will be
 560          *  switched into Active mode. And if CyPmAltAct(PM_ALT_ACT_TIME_NONE,
 561          *  PM_ALT_ACT_SRC_NONE) is called and PICU interrupt occurs, the CPU will be
 562          *  started while device remains in Alternate Active mode.
 563          *
 564          * Parameters:
 565          *  wakeupTime: Specifies a timer wakeup source and the frequency of that
 566          *              source. For PSoC 5LP this parameter is ignored.
 567          *
 568          *           Define                      Time
 569          *  PM_ALT_ACT_TIME_NONE             None
 570          *  PM_ALT_ACT_TIME_ONE_PPS          One PPS: 1 second
 571          *  PM_ALT_ACT_TIME_CTW_2MS          CTW: 2 ms
 572          *  PM_ALT_ACT_TIME_CTW_4MS          CTW: 4 ms
 573          *  PM_ALT_ACT_TIME_CTW_8MS          CTW: 8 ms
 574          *  PM_ALT_ACT_TIME_CTW_16MS         CTW: 16 ms
 575          *  PM_ALT_ACT_TIME_CTW_32MS         CTW: 32 ms
 576          *  PM_ALT_ACT_TIME_CTW_64MS         CTW: 64 ms
 577          *  PM_ALT_ACT_TIME_CTW_128MS        CTW: 128 ms
 578          *  PM_ALT_ACT_TIME_CTW_256MS        CTW: 256 ms
 579          *  PM_ALT_ACT_TIME_CTW_512MS        CTW: 512 ms
 580          *  PM_ALT_ACT_TIME_CTW_1024MS       CTW: 1024 ms
 581          *  PM_ALT_ACT_TIME_CTW_2048MS       CTW: 2048 ms
 582          *  PM_ALT_ACT_TIME_CTW_4096MS       CTW: 4096 ms
 583          *  PM_ALT_ACT_TIME_FTW(1-256)*       FTW: 10us to 2.56 ms
 584          *
 585          *  *Note:   PM_ALT_ACT_TIME_FTW() is a macro that takes an argument that
 586          *           specifies how many increments of 10 us to delay.
 587                      For PSoC 3 silicon the valid range of  values is 1 to 256.
 588          *
 589          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 590          *                   a wakeupTime has been specified, the associated timer will be
 591          *                   included as a wakeup source.
 592          *
 593          *           Define                      Source
 594          *  PM_ALT_ACT_SRC_NONE              None
 595          *  PM_ALT_ACT_SRC_COMPARATOR0       Comparator 0
 596          *  PM_ALT_ACT_SRC_COMPARATOR1       Comparator 1
 597          *  PM_ALT_ACT_SRC_COMPARATOR2       Comparator 2
 598          *  PM_ALT_ACT_SRC_COMPARATOR3       Comparator 3
 599          *  PM_ALT_ACT_SRC_INTERRUPT         Interrupt
 600          *  PM_ALT_ACT_SRC_PICU              PICU
 601          *  PM_ALT_ACT_SRC_I2C               I2C
 602          *  PM_ALT_ACT_SRC_BOOSTCONVERTER    Boost Converter
 603          *  PM_ALT_ACT_SRC_FTW               Fast Timewheel*
 604          *  PM_ALT_ACT_SRC_VD                High and Low Voltage Detection (HVI, LVI)*
 605          *  PM_ALT_ACT_SRC_CTW               Central Timewheel**
 606          *  PM_ALT_ACT_SRC_ONE_PPS           One PPS**
 607          *  PM_ALT_ACT_SRC_LCD               LCD
 608          *
 609          *  *Note : FTW and HVI/LVI wakeup signals are in the same mask bit.
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 11  

 610          *  **Note: CTW and One PPS wakeup signals are in the same mask bit.
 611          *
 612          *  When specifying a Comparator as the wakeupSource, an instance specific define
 613          *  that will track with the specific comparator that the instance
 614          *  is placed into should be used. As an example, for a Comparator instance named MyComp the
 615          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 616          *
 617          *  When CTW, FTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 618          *  function must be called upon wakeup with a corresponding parameter. Please
 619          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 620          *  information.
 621          *
 622          * Return:
 623          *  None
 624          *
 625          * Reentrant:
 626          *  No
 627          *
 628          * Side Effects:
 629          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 630          *  specified timer will be left as specified by wakeupTime with the timer
 631          *  enabled and the interrupt disabled.  Also, the ILO 1 KHz (if CTW timer is
 632          *  used as wakeup time) or ILO 100 KHz (if the FTW timer is used as wakeup time)
 633          *  will be left started.
 634          *
 635          *******************************************************************************/
 636          void CyPmAltAct(uint16 wakeupTime, uint16 wakeupSource) 
 637          {
 638   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_ALT_ACT_TIME_NONE == wakeupTime);
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 649   1      
 650   1      
 651   1          #if(CY_PSOC3)
 652   1      
 653   1              /* FTW - save current and set new configuration */
 654   1              if((wakeupTime >= PM_ALT_ACT_TIME_FTW(1u)) && (wakeupTime <= PM_ALT_ACT_TIME_FTW(256u)))
 655   1              {
 656   2                  CyPmFtwSetInterval(PM_ALT_ACT_FTW_INTERVAL(wakeupTime));
 657   2      
 658   2                  /* Include associated timer to wakeupSource */
 659   2                  wakeupSource |= PM_ALT_ACT_SRC_FTW;
 660   2              }
 661   1      
 662   1              /* CTW - save current and set new configuration */
 663   1              if((wakeupTime >= PM_ALT_ACT_TIME_CTW_2MS) && (wakeupTime <= PM_ALT_ACT_TIME_CTW_4096MS))
 664   1              {
 665   2                  /* Save current CTW configuration and set new one */
 666   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 667   2      
 668   2                  /* Include associated timer to wakeupSource */
 669   2                  wakeupSource |= PM_ALT_ACT_SRC_CTW;
 670   2              }
 671   1      
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 12  

 672   1              /* 1PPS - save current and set new configuration */
 673   1              if(PM_ALT_ACT_TIME_ONE_PPS == wakeupTime)
 674   1              {
 675   2                  /* Save current 1PPS configuration and set new one */
 676   2                  CyPmOppsSet();
 677   2      
 678   2                  /* Include associated timer to wakeupSource */
 679   2                  wakeupSource |= PM_ALT_ACT_SRC_ONE_PPS;
 680   2              }
 681   1      
 682   1          #endif /* (CY_PSOC3) */
 683   1      
 684   1      
 685   1          /* Save and set new wake up configuration */
 686   1      
 687   1          /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
 688   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
 689   1          CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
 690   1      
 691   1          /* Comparators */
 692   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
 693   1          CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
 694   1      
 695   1          /* LCD */
 696   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
 697   1          CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
 698   1      
 699   1      
 700   1          /* Switch to the Alternate Active mode */
 701   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_ALT_ACT)
             -;
 702   1      
 703   1          /* Recommended readback. */
 704   1          (void) CY_PM_MODE_CSR_REG;
 705   1      
 706   1          /* Two recommended NOPs to get into the mode. */
 707   1          CY_NOP;
 708   1          CY_NOP;
 709   1      
 710   1          /* Execute WFI instruction (for ARM-based devices only) */
 711   1          CY_PM_WFI;
 712   1      
 713   1          /* Point of return from Alternate Active Mode */
 714   1      
 715   1          /* Restore wake up configuration */
 716   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
 717   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
 718   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
 719   1      }
 720          
 721          
 722          /*******************************************************************************
 723          * Function Name: CyPmSleep
 724          ********************************************************************************
 725          *
 726          * Summary:
 727          *  Puts the part into the Sleep state.
 728          *
 729          *  Note Before calling this function, you must manually configure the power
 730          *  mode of the source clocks for the timer that is used as the wakeup timer.
 731          *
 732          *  Note Before calling this function, you must prepare clock tree configuration
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 13  

 733          *  for the low power mode by calling CyPmSaveClocks(). And restore clock
 734          *  configuration after CyPmSleep() execution by calling CyPmRestoreClocks(). See
 735          *  Power Management section, Clock Configuration subsection of the System
 736          *  Reference Guide for more information.
 737          *
 738          *  PSoC 3:
 739          *  Before switching to Sleep, if a wakeupTime other than NONE is specified,
 740          *  then the appropriate timer state is configured as specified with the
 741          *  interrupt for that timer disabled.  The wakeup source will be a combination
 742          *  of the values specified in the wakeupSource and any timer specified in the
 743          *  wakeupTime argument.  Once the wakeup condition is satisfied, then all saved
 744          *  state is restored and the function returns in the Active state.
 745          *
 746          *  Note that if the wakeupTime is made with a different value, the period before
 747          *  the wakeup occurs can be significantly shorter than the specified time.  If
 748          *  the next call is made with the same wakeupTime value, then the wakeup will
 749          *  occur the specified period after the previous wakeup occurred.
 750          *
 751          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 752          *  specified timer will be left as specified by wakeupTime with the timer
 753          *  enabled and the interrupt disabled.  If the CTW or One PPS is already
 754          *  configured for wakeup, for example with the SleepTimer or RTC components,
 755          *  then specify NONE for the wakeupTime and include the appropriate source for
 756          *  wakeupSource.
 757          *
 758          *  PSoC 5LP:
 759          *  The wakeupTime parameter is not used and the only NONE can be specified.
 760          *  The wakeup time must be configured with the component, SleepTimer for CTW
 761          *  intervals and RTC for 1PPS interval. The component must be configured to
 762          *  generate interrupt.
 763          *
 764          * Parameters:
 765          *  wakeupTime:      Specifies a timer wakeup source and the frequency of that
 766          *                   source. For PSoC 5LP, this parameter is ignored.
 767          *
 768          *           Define                      Time
 769          *  PM_SLEEP_TIME_NONE               None
 770          *  PM_SLEEP_TIME_ONE_PPS            One PPS: 1 second
 771          *  PM_SLEEP_TIME_CTW_2MS            CTW: 2 ms
 772          *  PM_SLEEP_TIME_CTW_4MS            CTW: 4 ms
 773          *  PM_SLEEP_TIME_CTW_8MS            CTW: 8 ms
 774          *  PM_SLEEP_TIME_CTW_16MS           CTW: 16 ms
 775          *  PM_SLEEP_TIME_CTW_32MS           CTW: 32 ms
 776          *  PM_SLEEP_TIME_CTW_64MS           CTW: 64 ms
 777          *  PM_SLEEP_TIME_CTW_128MS          CTW: 128 ms
 778          *  PM_SLEEP_TIME_CTW_256MS          CTW: 256 ms
 779          *  PM_SLEEP_TIME_CTW_512MS          CTW: 512 ms
 780          *  PM_SLEEP_TIME_CTW_1024MS         CTW: 1024 ms
 781          *  PM_SLEEP_TIME_CTW_2048MS         CTW: 2048 ms
 782          *  PM_SLEEP_TIME_CTW_4096MS         CTW: 4096 ms
 783          *
 784          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 785          *                   a wakeupTime has been specified the associated timer will be
 786          *                   included as a wakeup source.
 787          *
 788          *           Define                      Source
 789          *  PM_SLEEP_SRC_NONE                None
 790          *  PM_SLEEP_SRC_COMPARATOR0         Comparator 0
 791          *  PM_SLEEP_SRC_COMPARATOR1         Comparator 1
 792          *  PM_SLEEP_SRC_COMPARATOR2         Comparator 2
 793          *  PM_SLEEP_SRC_COMPARATOR3         Comparator 3
 794          *  PM_SLEEP_SRC_PICU                PICU
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 14  

 795          *  PM_SLEEP_SRC_I2C                 I2C
 796          *  PM_SLEEP_SRC_BOOSTCONVERTER      Boost Converter
 797          *  PM_SLEEP_SRC_VD                  High and Low Voltage Detection (HVI, LVI)
 798          *  PM_SLEEP_SRC_CTW                 Central Timewheel*
 799          *  PM_SLEEP_SRC_ONE_PPS             One PPS*
 800          *  PM_SLEEP_SRC_LCD                 LCD
 801          *
 802          *  *Note:   CTW and One PPS wakeup signals are in the same mask bit.
 803          *
 804          *  When specifying a Comparator as the wakeupSource an instance specific define
 805          *  should be used that will track with the specific comparator that the instance
 806          *  is placed into. As an example for a Comparator instance named MyComp the
 807          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 808          *
 809          *  When CTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 810          *  function must be called upon wakeup with corresponding parameter. Please
 811          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 812          *  information.
 813          *
 814          * Return:
 815          *  None
 816          *
 817          * Reentrant:
 818          *  No
 819          *
 820          * Side Effects and Restrictions:
 821          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 822          *  specified timer will be left as specified by wakeupTime with the timer
 823          *  enabled and the interrupt disabled. Also, the ILO 1 KHz (if CTW timer is
 824          *  used as wake up time) will be left started.
 825          *
 826          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
 827          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
 828          *  delay is measured using rising edges of the 1 kHz ILO.
 829          *
 830          *  For PSoC 3 silicon hardware buzz should be disabled before entering a sleep
 831          *  power mode. It is disabled by PSoC Creator during startup.
 832          *  If a Low Voltage Interrupt (LVI), High Voltage Interrupt (HVI) or Brown Out
 833          *  detect (power supply supervising capabilities) are required in a design
 834          *  during sleep, use the Central Time Wheel (CTW) to periodically wake the
 835          *  device, perform software buzz, and refresh the supervisory services. If LVI,
 836          *  HVI, or Brown Out is not required, then CTW is not required.
 837          *  Refer to the device errata for more information.
 838          *
 839          *******************************************************************************/
 840          void CyPmSleep(uint8 wakeupTime, uint16 wakeupSource) 
 841          {
 842   1          uint8 interruptState;
 843   1      
 844   1          /* Save current global interrupt enable and disable it */
 845   1          interruptState = CyEnterCriticalSection();
 846   1      
 847   1      
 848   1          /***********************************************************************
 849   1          * The Hibernate/Sleep regulator has a settling time after a reset.
 850   1          * During this time, the system ignores requests to enter Sleep and
 851   1          * Hibernate modes. The holdoff delay is measured using rising edges of
 852   1          * the 1 kHz ILO.
 853   1          ***********************************************************************/
 854   1          if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
 855   1          {
 856   2              /* Disable hold off - no action on restore */
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 15  

 857   2              CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
 858   2          }
 859   1          else
 860   1          {
 861   2              /* Abort, device is not ready for low power mode entry */
 862   2      
 863   2              /* Restore global interrupt enable state */
 864   2              CyExitCriticalSection(interruptState);
 865   2      
 866   2              return;
 867   2          }
 868   1      
 869   1      
 870   1          /***********************************************************************
 871   1          * PSoC3 < TO6:
 872   1          * - Hardware buzz must be disabled before the sleep mode entry.
 873   1          * - Voltage supervision (HVI/LVI) requires hardware buzz, so they must
 874   1          *   be also disabled.
 875   1          *
 876   1          * PSoC3 >= TO6:
 877   1          * - Voltage supervision (HVI/LVI) requires hardware buzz, so hardware
 878   1          *   buzz must be enabled before the sleep mode entry and restored on
 879   1          *   the wakeup.
 880   1          ***********************************************************************/
 881   1          #if(CY_PSOC3)
 882   1      
 883   1              /* Silicon Revision ID is below TO6 */
 884   1              if(CYDEV_CHIP_REV_ACTUAL < 5u)
 885   1              {
 886   2                  /* Hardware buzz expected to be disabled in Sleep mode */
 887   2                  CYASSERT(0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ));
 888   2              }
 889   1      
 890   1      
 891   1              if(0u != (CY_PM_RESET_CR1_REG & (CY_PM_RESET_CR1_HVIA_EN |
 892   1                  CY_PM_RESET_CR1_LVIA_EN | CY_PM_RESET_CR1_LVID_EN)))
 893   1              {
 894   2                  if(CYDEV_CHIP_REV_ACTUAL < 5u)
 895   2                  {
 896   3                      /* LVI/HVI requires hardware buzz to be enabled */
 897   3                      CYASSERT(0u != 0u);
 898   3                  }
 899   2                  else
 900   2                  {
 901   3                      if (0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ))
 902   3                      {
 903   4                          cyPmBackup.hardwareBuzz = CY_PM_DISABLED;
 904   4                          CY_PM_PWRSYS_WAKE_TR2_REG |= CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ;
 905   4                      }
 906   3                      else
 907   3                      {
 908   4                          cyPmBackup.hardwareBuzz = CY_PM_ENABLED;
 909   4                      }
 910   3                  }
 911   2              }
 912   1      
 913   1          #endif /* (CY_PSOC3) */
 914   1      
 915   1      
 916   1          /*******************************************************************************
 917   1          * For ARM-based devices,interrupt is required for the CPU to wake up. The
 918   1          * Power Management implementation assumes that wakeup time is configured with a
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 16  

 919   1          * separate component (component-based wakeup time configuration) for
 920   1          * interrupt to be issued on terminal count. For more information, refer to the
 921   1          * Wakeup Time Configuration section of System Reference Guide.
 922   1          *******************************************************************************/
 923   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_SLEEP_TIME_NONE == wakeupTime);
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 934   1      
 935   1      
 936   1          CyPmHibSlpSaveSet();
 937   1      
 938   1      
 939   1          #if(CY_PSOC3)
 940   1      
 941   1              /* CTW - save current and set new configuration */
 942   1              if((wakeupTime >= PM_SLEEP_TIME_CTW_2MS) && (wakeupTime <= PM_SLEEP_TIME_CTW_4096MS))
 943   1              {
 944   2                  /* Save current and set new configuration of CTW */
 945   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 946   2      
 947   2                  /* Include associated timer to wakeupSource */
 948   2                  wakeupSource |= PM_SLEEP_SRC_CTW;
 949   2              }
 950   1      
 951   1              /* 1PPS - save current and set new configuration */
 952   1              if(PM_SLEEP_TIME_ONE_PPS == wakeupTime)
 953   1              {
 954   2                  /* Save current and set new configuration of the 1PPS */
 955   2                  CyPmOppsSet();
 956   2      
 957   2                  /* Include associated timer to wakeupSource */
 958   2                  wakeupSource |= PM_SLEEP_SRC_ONE_PPS;
 959   2              }
 960   1      
 961   1          #endif /* (CY_PSOC3) */
 962   1      
 963   1      
 964   1          /* Save and set new wake up configuration */
 965   1      
 966   1          /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
 967   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
 968   1          CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
 969   1      
 970   1          /* Comparators */
 971   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
 972   1          CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
 973   1      
 974   1          /* LCD */
 975   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
 976   1          CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
 977   1      
 978   1      
 979   1          /*******************************************************************
 980   1          * Do not use the merge region below unless any component datasheet
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 17  

 981   1          * suggests doing so.
 982   1          *******************************************************************/
 983   1          /* `#START CY_PM_JUST_BEFORE_SLEEP` */
 984   1      
 985   1          /* `#END` */
 986   1      
 987   1      
 988   1          /* Last moment IMO frequency change */
 989   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
 990   1          {
 991   2              /* IMO frequency is 12 MHz */
 992   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
 993   2          }
 994   1          else
 995   1          {
 996   2              /* IMO frequency is not 12 MHz */
 997   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
 998   2      
 999   2              /* Save IMO frequency */
1000   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1001   2      
1002   2              /* Set IMO frequency to 12 MHz */
1003   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
1004   2          }
1005   1      
1006   1          /* Switch to Sleep mode */
1007   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_SLEEP);
1008   1      
1009   1          /* Recommended readback. */
1010   1          (void) CY_PM_MODE_CSR_REG;
1011   1      
1012   1          /* Two recommended NOPs to get into mode. */
1013   1          CY_NOP;
1014   1          CY_NOP;
1015   1      
1016   1          /* Execute WFI instruction (for ARM-based devices only) */
1017   1          CY_PM_WFI;
1018   1      
1019   1          /* Point of return from Sleep Mode */
1020   1      
1021   1          /* Restore last moment IMO frequency change */
1022   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1023   1          {
1024   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
1025   2                                          cyPmBackup.imoActFreq;
1026   2          }
1027   1      
1028   1      
1029   1          /*******************************************************************
1030   1          * Do not use merge region below unless any component datasheet
1031   1          * suggest to do so.
1032   1          *******************************************************************/
1033   1          /* `#START CY_PM_JUST_AFTER_WAKEUP_FROM_SLEEP` */
1034   1      
1035   1          /* `#END` */
1036   1      
1037   1      
1038   1          /* Restore hardware configuration */
1039   1          CyPmHibSlpRestore();
1040   1      
1041   1      
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 18  

1042   1          /* Disable hardware buzz, if it was previously enabled */
1043   1          #if(CY_PSOC3)
1044   1      
1045   1              if(0u != (CY_PM_RESET_CR1_REG & (CY_PM_RESET_CR1_HVIA_EN |
1046   1                  CY_PM_RESET_CR1_LVIA_EN | CY_PM_RESET_CR1_LVID_EN)))
1047   1              {
1048   2                  if(CYDEV_CHIP_REV_ACTUAL >= 5u)
1049   2                  {
1050   3                      if (CY_PM_DISABLED == cyPmBackup.hardwareBuzz)
1051   3                      {
1052   4                          CY_PM_PWRSYS_WAKE_TR2_REG &= (uint8)(~CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ);
1053   4                      }
1054   3                  }
1055   2              }
1056   1      
1057   1          #endif /* (CY_PSOC3) */
1058   1      
1059   1      
1060   1          /* Restore current wake up configuration */
1061   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1062   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1063   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1064   1      
1065   1          /* Restore global interrupt enable state */
1066   1          CyExitCriticalSection(interruptState);
1067   1      }
1068          
1069          
1070          /*******************************************************************************
1071          * Function Name: CyPmHibernate
1072          ********************************************************************************
1073          *
1074          * Summary:
1075          *  Puts the part into the Hibernate state.
1076          *
1077          *  PSoC 3 and PSoC 5LP:
1078          *  Before switching to Hibernate, the current status of the PICU wakeup source
1079          *  bit is saved and then set. This configures the device to wake up from the
1080          *  PICU. Make sure you have at least one pin configured to generate PICU
1081          *  interrupt. For pin Px.y, the register "PICU_INTTYPE_PICUx_INTTYPEy" controls
1082          *  the PICU behavior. In the TRM, this register is "PICU[0..15]_INTTYPE[0..7]."
1083          *  In the Pins component datasheet, this register is referred to as the IRQ
1084          *  option. Once the wakeup occurs, the PICU wakeup source bit is restored and
1085          *  the PSoC returns to the Active state.
1086          *
1087          * Parameters:
1088          *  None
1089          *
1090          * Return:
1091          *  None
1092          *
1093          * Reentrant:
1094          *  No
1095          *
1096          * Side Effects:
1097          *  Applications must wait 20 us before re-entering hibernate or sleep after
1098          *  waking up from hibernate. The 20 us allows the sleep regulator time to
1099          *  stabilize before the next hibernate / sleep event occurs. The 20 us
1100          *  requirement begins when the device wakes up. There is no hardware check that
1101          *  this requirement is met. The specified delay should be done on ISR entry.
1102          *
1103          *  After the wakeup PICU interrupt occurs, the Pin_ClearInterrupt() (where Pin is
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 19  

1104          *  instance name of the Pins component) function must be called to clear the
1105          *  latched pin events to allow the proper Hibernate mode entry and to enable
1106          *  detection of future events.
1107          *
1108          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
1109          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
1110          *  delay is measured using the rising edges of the 1 kHz ILO.
1111          *
1112          *******************************************************************************/
1113          void CyPmHibernate(void) 
1114          {
1115   1          uint8 interruptState;
1116   1      
1117   1          /* Save current global interrupt enable and disable it */
1118   1          interruptState = CyEnterCriticalSection();
1119   1      
1120   1              /***********************************************************************
1121   1              * The Hibernate/Sleep regulator has a settling time after a reset.
1122   1              * During this time, the system ignores requests to enter the Sleep and
1123   1              * Hibernate modes. The holdoff delay is measured using the rising edges of
1124   1              * the 1 kHz ILO.
1125   1              ***********************************************************************/
1126   1              if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
1127   1              {
1128   2                  /* Disable hold off - no action on restore */
1129   2                  CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
1130   2              }
1131   1              else
1132   1              {
1133   2                  /* Abort, device is not ready for low power mode entry */
1134   2      
1135   2                  /* Restore global interrupt enable state */
1136   2                  CyExitCriticalSection(interruptState);
1137   2      
1138   2                  return;
1139   2              }
1140   1      
1141   1          CyPmHibSaveSet();
1142   1      
1143   1      
1144   1          /* Save and enable only wakeup on PICU */
1145   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
1146   1          CY_PM_WAKEUP_CFG0_REG = CY_PM_WAKEUP_PICU;
1147   1      
1148   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
1149   1          CY_PM_WAKEUP_CFG1_REG = 0x00u;
1150   1      
1151   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
1152   1          CY_PM_WAKEUP_CFG2_REG = 0x00u;
1153   1      
1154   1      
1155   1          /* Last moment IMO frequency change */
1156   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
1157   1          {
1158   2              /* IMO frequency is 12 MHz */
1159   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
1160   2          }
1161   1          else
1162   1          {
1163   2              /* IMO frequency is not 12 MHz */
1164   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
1165   2      
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 20  

1166   2              /* Save IMO frequency */
1167   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1168   2      
1169   2              /* Set IMO frequency to 12 MHz */
1170   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
1171   2          }
1172   1      
1173   1      
1174   1          /* Switch to Hibernate Mode */
1175   1          CY_PM_MODE_CSR_REG = (CY_PM_MODE_CSR_REG & ((uint8) (~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_HIBERNAT
             -E;
1176   1      
1177   1          /* Recommended readback. */
1178   1          (void) CY_PM_MODE_CSR_REG;
1179   1      
1180   1          /* Two recommended NOPs to get into mode. */
1181   1          CY_NOP;
1182   1          CY_NOP;
1183   1      
1184   1          /* Execute WFI instruction (for ARM-based devices only) */
1185   1          CY_PM_WFI;
1186   1      
1187   1      
1188   1          /* Point of return from Hibernate mode */
1189   1      
1190   1      
1191   1          /* Restore last moment IMO frequency change */
1192   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1193   1          {
1194   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
1195   2                                          cyPmBackup.imoActFreq;
1196   2          }
1197   1      
1198   1      
1199   1          /* Restore device for proper Hibernate mode exit*/
1200   1          CyPmHibRestore();
1201   1      
1202   1          /* Restore current wake up configuration */
1203   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1204   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1205   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1206   1      
1207   1          /* Restore global interrupt enable state */
1208   1          CyExitCriticalSection(interruptState);
1209   1      }
1210          
1211          
1212          /*******************************************************************************
1213          * Function Name: CyPmReadStatus
1214          ********************************************************************************
1215          *
1216          * Summary:
1217          *  Manages the Power Manager Interrupt Status Register.  This register has the
1218          *  interrupt status for the one pulse per second, central timewheel and fast
1219          *  timewheel timers.  This hardware register clears on read.  To allow for only
1220          *  clearing the bits of interest and preserving the other bits, this function
1221          *  uses a shadow register that retains the state.  This function reads the
1222          *  status register and ORs that value with the shadow register.  That is the
1223          *  value that is returned.  Then the bits in the mask that are set are cleared
1224          *  from this value and written back to the shadow register.
1225          *
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 21  

1226          *  Note You must call this function within 1 ms (1 clock cycle of the ILO)
1227          *  after a CTW event has occurred.
1228          *
1229          * Parameters:
1230          *  mask: Bits in the shadow register to clear.
1231          *
1232          *       Define                      Source
1233          *  CY_PM_FTW_INT                Fast Timewheel
1234          *  CY_PM_CTW_INT                Central Timewheel
1235          *  CY_PM_ONEPPS_INT             One Pulse Per Second
1236          *
1237          * Return:
1238          *  Status.  Same bits values as the mask parameter.
1239          *
1240          *******************************************************************************/
1241          uint8 CyPmReadStatus(uint8 mask) 
1242          {
1243   1          static uint8 interruptStatus;
1244   1          uint8 interruptState;
1245   1          uint8 tmpStatus;
1246   1      
1247   1          /* Enter critical section */
1248   1          interruptState = CyEnterCriticalSection();
1249   1      
1250   1          /* Save value of register, copy it and clear desired bit */
1251   1          interruptStatus |= CY_PM_INT_SR_REG;
1252   1          tmpStatus = interruptStatus;
1253   1          interruptStatus &= ((uint8)(~mask));
1254   1      
1255   1          /* Exit critical section */
1256   1          CyExitCriticalSection(interruptState);
1257   1      
1258   1          return(tmpStatus);
1259   1      }
1260          
1261          
1262          /*******************************************************************************
1263          * Function Name: CyPmHibSaveSet
1264          ********************************************************************************
1265          *
1266          * Summary:
1267          *  Prepare device for proper Hibernate low power mode entry:
1268          *  - Disables I2C backup regulator
1269          *  - Saves ILO power down mode state and enable it
1270          *  - Saves state of 1 kHz and 100 kHz ILO and disable them
1271          *  - Disables sleep regulator and shorts vccd to vpwrsleep
1272          *  - Save LVI/HVI configuration and disable them - CyPmHviLviSaveDisable()
1273          *  - CyPmHibSlpSaveSet() function is called
1274          *
1275          * Parameters:
1276          *  None
1277          *
1278          * Return:
1279          *  None
1280          *
1281          * Reentrant:
1282          *  No
1283          *
1284          *******************************************************************************/
1285          static void CyPmHibSaveSet(void) 
1286          {
1287   1          /* I2C backup reg must be off when the sleep regulator is unavailable */
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 22  

1288   1          if(0u != (CY_PM_PWRSYS_CR1_REG & CY_PM_PWRSYS_CR1_I2CREG_BACKUP))
1289   1          {
1290   2              /***********************************************************************
1291   2              * If the I2C backup regulator is enabled, all the fixed-function registers
1292   2              * store their values while the device is in the low power mode, otherwise their
1293   2              * configuration is lost. The I2C API makes a decision to restore or not
1294   2              * to restore I2C registers based on this. If this regulator will be
1295   2              * disabled and then enabled, I2C API will suppose that the I2C block
1296   2              * registers preserved their values, while this is not true. So, the
1297   2              * backup regulator is disabled. The I2C sleep APIs is responsible for
1298   2              * restoration.
1299   2              ***********************************************************************/
1300   2      
1301   2              /* Disable I2C backup register */
1302   2              CY_PM_PWRSYS_CR1_REG &= ((uint8)(~CY_PM_PWRSYS_CR1_I2CREG_BACKUP));
1303   2          }
1304   1      
1305   1      
1306   1          /* Save current ILO power mode and ensure low power mode */
1307   1          cyPmBackup.iloPowerMode = CyILO_SetPowerMode(CY_PM_POWERDOWN_MODE);
1308   1      
1309   1          /* Save current 1kHz ILO enable state. Disabled automatically. */
1310   1          cyPmBackup.ilo1kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_1K)) ?
1311   1                                      CY_PM_DISABLED : CY_PM_ENABLED;
1312   1      
1313   1          /* Save current 100kHz ILO enable state. Disabled automatically. */
1314   1          cyPmBackup.ilo100kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_100K)) ?
1315   1                                      CY_PM_DISABLED : CY_PM_ENABLED;
1316   1      
1317   1      
1318   1          /* Disable the sleep regulator and shorts vccd to vpwrsleep */
1319   1          if(0u == (CY_PM_PWRSYS_SLP_TR_REG & CY_PM_PWRSYS_SLP_TR_BYPASS))
1320   1          {
1321   2              /* Save current bypass state */
1322   2              cyPmBackup.slpTrBypass = CY_PM_DISABLED;
1323   2              CY_PM_PWRSYS_SLP_TR_REG |= CY_PM_PWRSYS_SLP_TR_BYPASS;
1324   2          }
1325   1          else
1326   1          {
1327   2              cyPmBackup.slpTrBypass = CY_PM_ENABLED;
1328   2          }
1329   1      
1330   1          /* LPCOMPs are always enabled (even when BOTH ext_vccd=1 and ext_vcca=1)*/
1331   1      
1332   1      
1333   1          /***************************************************************************
1334   1          * LVI/HVI must be disabled in Hibernate
1335   1          ***************************************************************************/
1336   1      
1337   1          /* Save LVI/HVI configuration and disable them */
1338   1          CyPmHviLviSaveDisable();
1339   1      
1340   1      
1341   1          /* Make the same preparations for Hibernate and Sleep modes */
1342   1          CyPmHibSlpSaveSet();
1343   1      
1344   1      
1345   1          /***************************************************************************
1346   1          * Save and set the power mode wakeup trim registers
1347   1          ***************************************************************************/
1348   1          cyPmBackup.wakeupTrim0 = CY_PM_PWRSYS_WAKE_TR0_REG;
1349   1          cyPmBackup.wakeupTrim1 = CY_PM_PWRSYS_WAKE_TR1_REG;
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 23  

1350   1      
1351   1          CY_PM_PWRSYS_WAKE_TR0_REG = CY_PM_PWRSYS_WAKE_TR0;
1352   1          CY_PM_PWRSYS_WAKE_TR1_REG = CY_PM_PWRSYS_WAKE_TR1;
1353   1      }
1354          
1355          
1356          /*******************************************************************************
1357          * Function Name: CyPmHibRestore
1358          ********************************************************************************
1359          *
1360          * Summary:
1361          *  Restores the device for the proper Hibernate mode exit:
1362          *  - Restores LVI/HVI configuration - calsl CyPmHviLviRestore()
1363          *  - CyPmHibSlpSaveRestore() function is called
1364          *  - Restores ILO power down mode state and enables it
1365          *  - Restores the state of 1 kHz and 100 kHz ILO and disables them
1366          *  - Restores the sleep regulator settings
1367          *
1368          * Parameters:
1369          *  None
1370          *
1371          * Return:
1372          *  None
1373          *
1374          *******************************************************************************/
1375          static void CyPmHibRestore(void) 
1376          {
1377   1          /* Restore LVI/HVI configuration */
1378   1          CyPmHviLviRestore();
1379   1      
1380   1          /* Restore the same configuration for Hibernate and Sleep modes */
1381   1          CyPmHibSlpRestore();
1382   1      
1383   1          /* Restore 1kHz ILO enable state */
1384   1          if(CY_PM_ENABLED == cyPmBackup.ilo1kEnable)
1385   1          {
1386   2              /* Enable 1kHz ILO */
1387   2              CyILO_Start1K();
1388   2          }
1389   1      
1390   1          /* Restore 100kHz ILO enable state */
1391   1          if(CY_PM_ENABLED == cyPmBackup.ilo100kEnable)
1392   1          {
1393   2              /* Enable 100kHz ILO */
1394   2              CyILO_Start100K();
1395   2          }
1396   1      
1397   1          /* Restore ILO power mode */
1398   1          (void) CyILO_SetPowerMode(cyPmBackup.iloPowerMode);
1399   1      
1400   1      
1401   1          if(CY_PM_DISABLED == cyPmBackup.slpTrBypass)
1402   1          {
1403   2              /* Enable the sleep regulator */
1404   2              CY_PM_PWRSYS_SLP_TR_REG &= ((uint8)(~CY_PM_PWRSYS_SLP_TR_BYPASS));
1405   2          }
1406   1      
1407   1      
1408   1          /***************************************************************************
1409   1          * Restore the power mode wakeup trim registers
1410   1          ***************************************************************************/
1411   1          CY_PM_PWRSYS_WAKE_TR0_REG = cyPmBackup.wakeupTrim0;
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 24  

1412   1          CY_PM_PWRSYS_WAKE_TR1_REG = cyPmBackup.wakeupTrim1;
1413   1      }
1414          
1415          
1416          /*******************************************************************************
1417          * Function Name: CyPmCtwSetInterval
1418          ********************************************************************************
1419          *
1420          * Summary:
1421          *  Performs the CTW configuration:
1422          *  - Disables the CTW interrupt
1423          *  - Enables 1 kHz ILO
1424          *  - Sets a new CTW interval
1425          *
1426          * Parameters:
1427          *  ctwInterval: the CTW interval to be set.
1428          *
1429          * Return:
1430          *  None
1431          *
1432          * Side Effects:
1433          *  Enables ILO 1 KHz clock and leaves it enabled.
1434          *
1435          *******************************************************************************/
1436          void CyPmCtwSetInterval(uint8 ctwInterval) 
1437          {
1438   1          /* Disable CTW interrupt enable */
1439   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_IE));
1440   1      
1441   1          /* Enable 1kHz ILO (required for CTW operation) */
1442   1          CyILO_Start1K();
1443   1      
1444   1          /* Interval could be set only while CTW is disabled */
1445   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_CTW_EN))
1446   1          {
1447   2              /* Set CTW interval if needed */
1448   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
1449   2              {
1450   3                  /* Disable the CTW, set new CTW interval and enable it again */
1451   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_EN));
1452   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1453   3                  CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1454   3              }   /* Required interval is already set */
1455   2          }
1456   1          else
1457   1          {
1458   2              /* Set CTW interval if needed */
1459   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
1460   2              {
1461   3                  /* Set new CTW interval. Could be changed if CTW is disabled */
1462   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1463   3              }   /* Required interval is already set */
1464   2      
1465   2              /* Enable CTW */
1466   2              CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1467   2          }
1468   1      }
1469          
1470          
1471          /*******************************************************************************
1472          * Function Name: CyPmOppsSet
1473          ********************************************************************************
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 25  

1474          *
1475          * Summary:
1476          *  Performs 1PPS configuration:
1477          *  - Starts 32 KHz XTAL
1478          *  - Disables 1PPS interrupts
1479          *  - Enables 1PPS
1480          *
1481          * Parameters:
1482          *  None
1483          *
1484          * Return:
1485          *  None
1486          *
1487          *******************************************************************************/
1488          void CyPmOppsSet(void) 
1489          {
1490   1          /* Enable 32kHz XTAL if needed */
1491   1          if(0u == (CY_PM_SLOWCLK_X32_CR_REG & CY_PM_X32_CR_X32EN))
1492   1          {
1493   2              /* Enable 32kHz XTAL */
1494   2              CyXTAL_32KHZ_Start();
1495   2          }
1496   1      
1497   1          /* Disable 1PPS interrupt enable */
1498   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_1PPS_IE));
1499   1      
1500   1          /* Enable 1PPS operation */
1501   1          CY_PM_TW_CFG2_REG |= CY_PM_1PPS_EN;
1502   1      }
1503          
1504          
1505          /*******************************************************************************
1506          * Function Name: CyPmFtwSetInterval
1507          ********************************************************************************
1508          *
1509          * Summary:
1510          *  Performs the FTW configuration:
1511          *  - Disables the FTW interrupt
1512          *  - Enables 100 kHz ILO
1513          *  - Sets a new FTW interval.
1514          *
1515          * Parameters:
1516          *  ftwInterval - FTW counter interval.
1517          *
1518          * Return:
1519          *  None
1520          *
1521          * Side Effects:
1522          *  Enables the ILO 100 KHz clock and leaves it enabled.
1523          *
1524          *******************************************************************************/
1525          void CyPmFtwSetInterval(uint8 ftwInterval) 
1526          {
1527   1          /* Disable FTW interrupt enable */
1528   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_IE));
1529   1      
1530   1          /* Enable 100kHz ILO */
1531   1          CyILO_Start100K();
1532   1      
1533   1          /* Interval could be set only while FTW is disabled */
1534   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_FTW_EN))
1535   1          {
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 26  

1536   2              /* Disable FTW, set new FTW interval if needed and enable it again */
1537   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1538   2              {
1539   3                  /* Disable CTW, set new CTW interval and enable it again */
1540   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_EN));
1541   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1542   3                  CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1543   3              }   /* Required interval is already set */
1544   2          }
1545   1          else
1546   1          {
1547   2              /* Set new FTW counter interval if needed. FTW is disabled. */
1548   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1549   2              {
1550   3                  /* Set new CTW interval. Could be changed if CTW is disabled */
1551   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1552   3              }   /* Required interval is already set */
1553   2      
1554   2              /* Enable FTW */
1555   2              CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1556   2          }
1557   1      }
1558          
1559          
1560          /*******************************************************************************
1561          * Function Name: CyPmHibSlpSaveSet
1562          ********************************************************************************
1563          *
1564          * Summary:
1565          *  This API is used for preparing the device for the Sleep and Hibernate low power
1566          *  modes entry:
1567          *  - Saves the COMP, VIDAC, DSM, and SAR routing connections (PSoC 5)
1568          *  - Saves the SC/CT routing connections (PSoC 3/5/5LP)
1569          *  - Disables the Serial Wire Viewer (SWV) (PSoC 3)
1570          *  - Saves the boost reference selection and sets it to internal
1571          *
1572          * Parameters:
1573          *  None
1574          *
1575          * Return:
1576          *  None
1577          *
1578          * Reentrant:
1579          *  No
1580          *
1581          *******************************************************************************/
1582          static void CyPmHibSlpSaveSet(void) 
1583          {
1584   1          /* Save SC/CT routing registers */
1585   1          cyPmBackup.scctData[0u]   = CY_GET_REG8(CYREG_SC0_SW0 );
1586   1          cyPmBackup.scctData[1u]   = CY_GET_REG8(CYREG_SC0_SW2 );
1587   1          cyPmBackup.scctData[2u]   = CY_GET_REG8(CYREG_SC0_SW3 );
1588   1          cyPmBackup.scctData[3u]   = CY_GET_REG8(CYREG_SC0_SW4 );
1589   1          cyPmBackup.scctData[4u]   = CY_GET_REG8(CYREG_SC0_SW6 );
1590   1          cyPmBackup.scctData[5u]   = CY_GET_REG8(CYREG_SC0_SW8 );
1591   1          cyPmBackup.scctData[6u]   = CY_GET_REG8(CYREG_SC0_SW10);
1592   1      
1593   1          cyPmBackup.scctData[7u]   = CY_GET_REG8(CYREG_SC1_SW0 );
1594   1          cyPmBackup.scctData[8u]   = CY_GET_REG8(CYREG_SC1_SW2 );
1595   1          cyPmBackup.scctData[9u]   = CY_GET_REG8(CYREG_SC1_SW3 );
1596   1          cyPmBackup.scctData[10u]  = CY_GET_REG8(CYREG_SC1_SW4 );
1597   1          cyPmBackup.scctData[11u]  = CY_GET_REG8(CYREG_SC1_SW6 );
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 27  

1598   1          cyPmBackup.scctData[12u]  = CY_GET_REG8(CYREG_SC1_SW8 );
1599   1          cyPmBackup.scctData[13u]  = CY_GET_REG8(CYREG_SC1_SW10);
1600   1      
1601   1          cyPmBackup.scctData[14u]  = CY_GET_REG8(CYREG_SC2_SW0 );
1602   1          cyPmBackup.scctData[15u]  = CY_GET_REG8(CYREG_SC2_SW2 );
1603   1          cyPmBackup.scctData[16u]  = CY_GET_REG8(CYREG_SC2_SW3 );
1604   1          cyPmBackup.scctData[17u]  = CY_GET_REG8(CYREG_SC2_SW4 );
1605   1          cyPmBackup.scctData[18u]  = CY_GET_REG8(CYREG_SC2_SW6 );
1606   1          cyPmBackup.scctData[19u]  = CY_GET_REG8(CYREG_SC2_SW8 );
1607   1          cyPmBackup.scctData[20u]  = CY_GET_REG8(CYREG_SC2_SW10);
1608   1      
1609   1          cyPmBackup.scctData[21u]  = CY_GET_REG8(CYREG_SC3_SW0 );
1610   1          cyPmBackup.scctData[22u]  = CY_GET_REG8(CYREG_SC3_SW2 );
1611   1          cyPmBackup.scctData[23u]  = CY_GET_REG8(CYREG_SC3_SW3 );
1612   1          cyPmBackup.scctData[24u]  = CY_GET_REG8(CYREG_SC3_SW4 );
1613   1          cyPmBackup.scctData[25u]  = CY_GET_REG8(CYREG_SC3_SW6 );
1614   1          cyPmBackup.scctData[26u]  = CY_GET_REG8(CYREG_SC3_SW8 );
1615   1          cyPmBackup.scctData[27u]  = CY_GET_REG8(CYREG_SC3_SW10);
1616   1      
1617   1          CY_SET_REG8(CYREG_SC0_SW0 , 0u);
1618   1          CY_SET_REG8(CYREG_SC0_SW2 , 0u);
1619   1          CY_SET_REG8(CYREG_SC0_SW3 , 0u);
1620   1          CY_SET_REG8(CYREG_SC0_SW4 , 0u);
1621   1          CY_SET_REG8(CYREG_SC0_SW6 , 0u);
1622   1          CY_SET_REG8(CYREG_SC0_SW8 , 0u);
1623   1          CY_SET_REG8(CYREG_SC0_SW10, 0u);
1624   1      
1625   1          CY_SET_REG8(CYREG_SC1_SW0 , 0u);
1626   1          CY_SET_REG8(CYREG_SC1_SW2 , 0u);
1627   1          CY_SET_REG8(CYREG_SC1_SW3 , 0u);
1628   1          CY_SET_REG8(CYREG_SC1_SW4 , 0u);
1629   1          CY_SET_REG8(CYREG_SC1_SW6 , 0u);
1630   1          CY_SET_REG8(CYREG_SC1_SW8 , 0u);
1631   1          CY_SET_REG8(CYREG_SC1_SW10, 0u);
1632   1      
1633   1          CY_SET_REG8(CYREG_SC2_SW0 , 0u);
1634   1          CY_SET_REG8(CYREG_SC2_SW2 , 0u);
1635   1          CY_SET_REG8(CYREG_SC2_SW3 , 0u);
1636   1          CY_SET_REG8(CYREG_SC2_SW4 , 0u);
1637   1          CY_SET_REG8(CYREG_SC2_SW6 , 0u);
1638   1          CY_SET_REG8(CYREG_SC2_SW8 , 0u);
1639   1          CY_SET_REG8(CYREG_SC2_SW10, 0u);
1640   1      
1641   1          CY_SET_REG8(CYREG_SC3_SW0 , 0u);
1642   1          CY_SET_REG8(CYREG_SC3_SW2 , 0u);
1643   1          CY_SET_REG8(CYREG_SC3_SW3 , 0u);
1644   1          CY_SET_REG8(CYREG_SC3_SW4 , 0u);
1645   1          CY_SET_REG8(CYREG_SC3_SW6 , 0u);
1646   1          CY_SET_REG8(CYREG_SC3_SW8 , 0u);
1647   1          CY_SET_REG8(CYREG_SC3_SW10, 0u);
1648   1      
1649   1      
1650   1          #if(CY_PSOC3)
1651   1      
1652   1              /* Serial Wire Viewer (SWV) workaround */
1653   1      
1654   1              /* Disable SWV before entering low power mode */
1655   1              if(0u != (CY_PM_MLOGIC_DBG_REG & CY_PM_MLOGIC_DBG_SWV_CLK_EN))
1656   1              {
1657   2                  /* Save SWV clock enabled state */
1658   2                  cyPmBackup.swvClkEnabled = CY_PM_ENABLED;
1659   2      
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 28  

1660   2                  /* Save current ports drive mode settings */
1661   2                  cyPmBackup.prt1Dm = CY_PM_PRT1_PC3_REG & ((uint8)(~CY_PM_PRT1_PC3_DM_MASK));
1662   2      
1663   2                  /* Set drive mode to strong output */
1664   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
1665   2                                      CY_PM_PRT1_PC3_DM_STRONG;
1666   2      
1667   2                  /* Disable SWV clocks */
1668   2                  CY_PM_MLOGIC_DBG_REG &= ((uint8)(~CY_PM_MLOGIC_DBG_SWV_CLK_EN));
1669   2              }
1670   1              else
1671   1              {
1672   2                  /* Save SWV clock disabled state */
1673   2                  cyPmBackup.swvClkEnabled = CY_PM_DISABLED;
1674   2              }
1675   1      
1676   1          #endif  /* (CY_PSOC3) */
1677   1      
1678   1      
1679   1          /***************************************************************************
1680   1          * Save boost reference and set it to boost's internal by clearing the bit.
1681   1          * External (chip bandgap) reference is not available in Sleep and Hibernate.
1682   1          ***************************************************************************/
1683   1          if(0u != (CY_PM_BOOST_CR2_REG & CY_PM_BOOST_CR2_EREFSEL_EXT))
1684   1          {
1685   2              cyPmBackup.boostRefExt = CY_PM_ENABLED;
1686   2              CY_PM_BOOST_CR2_REG &= ((uint8)(~CY_PM_BOOST_CR2_EREFSEL_EXT));
1687   2          }
1688   1          else
1689   1          {
1690   2              cyPmBackup.boostRefExt = CY_PM_DISABLED;
1691   2          }
1692   1      }
1693          
1694          
1695          /*******************************************************************************
1696          * Function Name: CyPmHibSlpRestore
1697          ********************************************************************************
1698          *
1699          * Summary:
1700          *  This API is used for restoring the device configurations after wakeup from the Sleep
1701          *  and Hibernate low power modes:
1702          *  - Restores the SC/CT routing connections
1703          *  - Restores the enable state of the Serial Wire Viewer (SWV) (PSoC 3)
1704          *  - Restores the  boost reference selection
1705          *
1706          * Parameters:
1707          *  None
1708          *
1709          * Return:
1710          *  None
1711          *
1712          *******************************************************************************/
1713          static void CyPmHibSlpRestore(void) 
1714          {
1715   1          /* Restore SC/CT routing registers */
1716   1          CY_SET_REG8(CYREG_SC0_SW0 , cyPmBackup.scctData[0u] );
1717   1          CY_SET_REG8(CYREG_SC0_SW2 , cyPmBackup.scctData[1u] );
1718   1          CY_SET_REG8(CYREG_SC0_SW3 , cyPmBackup.scctData[2u] );
1719   1          CY_SET_REG8(CYREG_SC0_SW4 , cyPmBackup.scctData[3u] );
1720   1          CY_SET_REG8(CYREG_SC0_SW6 , cyPmBackup.scctData[4u] );
1721   1          CY_SET_REG8(CYREG_SC0_SW8 , cyPmBackup.scctData[5u] );
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 29  

1722   1          CY_SET_REG8(CYREG_SC0_SW10, cyPmBackup.scctData[6u] );
1723   1      
1724   1          CY_SET_REG8(CYREG_SC1_SW0 , cyPmBackup.scctData[7u] );
1725   1          CY_SET_REG8(CYREG_SC1_SW2 , cyPmBackup.scctData[8u] );
1726   1          CY_SET_REG8(CYREG_SC1_SW3 , cyPmBackup.scctData[9u] );
1727   1          CY_SET_REG8(CYREG_SC1_SW4 , cyPmBackup.scctData[10u]);
1728   1          CY_SET_REG8(CYREG_SC1_SW6 , cyPmBackup.scctData[11u]);
1729   1          CY_SET_REG8(CYREG_SC1_SW8 , cyPmBackup.scctData[12u]);
1730   1          CY_SET_REG8(CYREG_SC1_SW10, cyPmBackup.scctData[13u]);
1731   1      
1732   1          CY_SET_REG8(CYREG_SC2_SW0 , cyPmBackup.scctData[14u]);
1733   1          CY_SET_REG8(CYREG_SC2_SW2 , cyPmBackup.scctData[15u]);
1734   1          CY_SET_REG8(CYREG_SC2_SW3 , cyPmBackup.scctData[16u]);
1735   1          CY_SET_REG8(CYREG_SC2_SW4 , cyPmBackup.scctData[17u]);
1736   1          CY_SET_REG8(CYREG_SC2_SW6 , cyPmBackup.scctData[18u]);
1737   1          CY_SET_REG8(CYREG_SC2_SW8 , cyPmBackup.scctData[19u]);
1738   1          CY_SET_REG8(CYREG_SC2_SW10, cyPmBackup.scctData[20u]);
1739   1      
1740   1          CY_SET_REG8(CYREG_SC3_SW0 , cyPmBackup.scctData[21u]);
1741   1          CY_SET_REG8(CYREG_SC3_SW2 , cyPmBackup.scctData[22u]);
1742   1          CY_SET_REG8(CYREG_SC3_SW3 , cyPmBackup.scctData[23u]);
1743   1          CY_SET_REG8(CYREG_SC3_SW4 , cyPmBackup.scctData[24u]);
1744   1          CY_SET_REG8(CYREG_SC3_SW6 , cyPmBackup.scctData[25u]);
1745   1          CY_SET_REG8(CYREG_SC3_SW8 , cyPmBackup.scctData[26u]);
1746   1          CY_SET_REG8(CYREG_SC3_SW10, cyPmBackup.scctData[27u]);
1747   1      
1748   1      
1749   1          #if(CY_PSOC3)
1750   1      
1751   1              /* Serial Wire Viewer (SWV) workaround */
1752   1              if(CY_PM_ENABLED == cyPmBackup.swvClkEnabled)
1753   1              {
1754   2                  /* Restore ports drive mode */
1755   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
1756   2                                          cyPmBackup.prt1Dm;
1757   2      
1758   2                  /* Enable SWV clocks */
1759   2                  CY_PM_MLOGIC_DBG_REG |= CY_PM_MLOGIC_DBG_SWV_CLK_EN;
1760   2              }
1761   1      
1762   1          #endif /* (CY_PSOC3) */
1763   1      
1764   1      
1765   1          /* Restore boost reference */
1766   1          if(CY_PM_ENABLED == cyPmBackup.boostRefExt)
1767   1          {
1768   2              CY_PM_BOOST_CR2_REG |= CY_PM_BOOST_CR2_EREFSEL_EXT;
1769   2          }
1770   1      }
1771          
1772          
1773          /*******************************************************************************
1774          * Function Name: CyPmHviLviSaveDisable
1775          ********************************************************************************
1776          *
1777          * Summary:
1778          *  Saves analog and digital LVI and HVI configuration and disables them.
1779          *
1780          * Parameters:
1781          *  None
1782          *
1783          * Return:
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 30  

1784          *  None
1785          *
1786          * Reentrant:
1787          *  No
1788          *
1789          *******************************************************************************/
1790          static void CyPmHviLviSaveDisable(void) 
1791          {
1792   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVID_EN))
1793   1          {
1794   2              cyPmBackup.lvidEn = CY_PM_ENABLED;
1795   2              cyPmBackup.lvidTrip = CY_VD_LVI_TRIP_REG & CY_VD_LVI_TRIP_LVID_MASK;
1796   2      
1797   2              /* Save state of reset device at specified Vddd threshold */
1798   2              cyPmBackup.lvidRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESD_EN)) ? \
1799   2                                   CY_PM_DISABLED : CY_PM_ENABLED;
1800   2      
1801   2              CyVdLvDigitDisable();
1802   2          }
1803   1          else
1804   1          {
1805   2              cyPmBackup.lvidEn = CY_PM_DISABLED;
1806   2          }
1807   1      
1808   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVIA_EN))
1809   1          {
1810   2              cyPmBackup.lviaEn = CY_PM_ENABLED;
1811   2              cyPmBackup.lviaTrip = CY_VD_LVI_TRIP_REG >> 4u;
1812   2      
1813   2              /* Save state of reset device at specified Vdda threshold */
1814   2              cyPmBackup.lviaRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESA_EN)) ? \
1815   2                                   CY_PM_DISABLED : CY_PM_ENABLED;
1816   2      
1817   2              CyVdLvAnalogDisable();
1818   2          }
1819   1          else
1820   1          {
1821   2              cyPmBackup.lviaEn = CY_PM_DISABLED;
1822   2          }
1823   1      
1824   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_HVIA_EN))
1825   1          {
1826   2              cyPmBackup.hviaEn = CY_PM_ENABLED;
1827   2              CyVdHvAnalogDisable();
1828   2          }
1829   1          else
1830   1          {
1831   2              cyPmBackup.hviaEn = CY_PM_DISABLED;
1832   2          }
1833   1      }
1834          
1835          
1836          /*******************************************************************************
1837          * Function Name: CyPmHviLviRestore
1838          ********************************************************************************
1839          *
1840          * Summary:
1841          *  Restores the analog and digital LVI and HVI configuration.
1842          *
1843          * Parameters:
1844          *  None
1845          *
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 31  

1846          * Return:
1847          *  None
1848          *
1849          * Reentrant:
1850          *  No
1851          *
1852          *******************************************************************************/
1853          static void CyPmHviLviRestore(void) 
1854          {
1855   1          /* Restore LVI/HVI configuration */
1856   1          if(CY_PM_ENABLED == cyPmBackup.lvidEn)
1857   1          {
1858   2              CyVdLvDigitEnable(cyPmBackup.lvidRst, cyPmBackup.lvidTrip);
1859   2          }
1860   1      
1861   1          if(CY_PM_ENABLED == cyPmBackup.lviaEn)
1862   1          {
1863   2              CyVdLvAnalogEnable(cyPmBackup.lviaRst, cyPmBackup.lviaTrip);
1864   2          }
1865   1      
1866   1          if(CY_PM_ENABLED == cyPmBackup.hviaEn)
1867   1          {
1868   2              CyVdHvAnalogEnable();
1869   2          }
1870   1      }
1871          
1872          
1873          /* [] END OF FILE */
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 32  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyPmSaveClocks (BEGIN)
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 83
0000 9043A1            MOV     DPTR,#043A1H
0003 E0                MOVX    A,@DPTR
0004 540F              ANL     A,#0FH
0006 900000      R     MOV     DPTR,#cyPmClockBackup
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
000A 9043A2            MOV     DPTR,#043A2H
000D E0                MOVX    A,@DPTR
000E 900000      R     MOV     DPTR,#cyPmClockBackup+01H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
0012 9043A1            MOV     DPTR,#043A1H
0015 E0                MOVX    A,@DPTR
0016 54F0              ANL     A,#0F0H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
001D 904800            MOV     DPTR,#04800H
0020 E0                MOVX    A,@DPTR
0021 54C0              ANL     A,#0C0H
0023 900000      R     MOV     DPTR,#cyPmClockBackup+05H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0027 7F2D              MOV     R7,#02DH
0029 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 93
002C 904200            MOV     DPTR,#04200H
002F E0                MOVX    A,@DPTR
0030 5407              ANL     A,#07H
0032 900000      R     MOV     DPTR,#cyPmClockBackup+03H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0036 904200            MOV     DPTR,#04200H
0039 E0                MOVX    A,@DPTR
003A 5440              ANL     A,#040H
003C 900000      R     MOV     DPTR,#cyPmClockBackup+04H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
0040 904200            MOV     DPTR,#04200H
0043 E0                MOVX    A,@DPTR
0044 5410              ANL     A,#010H
0046 6008              JZ      ?C0001
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 100
0048 900000      R     MOV     DPTR,#cyPmClockBackup+09H
004B 7401              MOV     A,#01H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
004E 8005              SJMP    ?C0002
0050         ?C0001:
                                           ; SOURCE LINE # 103
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 33  

                                           ; SOURCE LINE # 105
0050 E4                CLR     A
0051 900000      R     MOV     DPTR,#cyPmClockBackup+09H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0055         ?C0002:
                                           ; SOURCE LINE # 109
0055 904005            MOV     DPTR,#04005H
0058 E0                MOVX    A,@DPTR
0059 5403              ANL     A,#03H
005B 900000      R     MOV     DPTR,#cyPmClockBackup+02H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
005F E0                MOVX    A,@DPTR
0060 6401              XRL     A,#01H
0062 702A              JNZ     ?C0003
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
0064 904000            MOV     DPTR,#04000H
0067 E0                MOVX    A,@DPTR
0068 5403              ANL     A,#03H
006A 14                DEC     A
006B 600E              JZ      ?C0006
006D 14                DEC     A
006E 6012              JZ      ?C0007
0070 2402              ADD     A,#02H
0072 7015              JNZ     ?C0008
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
0074         ?C0005:
                                           ; SOURCE LINE # 117
0074 E4                CLR     A
0075 FF                MOV     R7,A
0076 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 118
0079 8013              SJMP    ?C0003
                                           ; SOURCE LINE # 120
007B         ?C0006:
                                           ; SOURCE LINE # 121
007B 7F02              MOV     R7,#02H
007D 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 122
0080 800C              SJMP    ?C0003
                                           ; SOURCE LINE # 124
0082         ?C0007:
                                           ; SOURCE LINE # 125
0082 7F03              MOV     R7,#03H
0084 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 126
0087 8005              SJMP    ?C0003
                                           ; SOURCE LINE # 128
0089         ?C0008:
                                           ; SOURCE LINE # 129
0089 7F00              MOV     R7,#00H
008B 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
008E         ?C0003:
                                           ; SOURCE LINE # 135
008E 904220            MOV     DPTR,#04220H
0091 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 34  

0092 5401              ANL     A,#01H
0094 600B              JZ      ?C0010
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 138
0096 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
009C 120000      E     LCALL   CyPLL_OUT_Stop
                                           ; SOURCE LINE # 140
009F 8005              SJMP    ?C0011
00A1         ?C0010:
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 144
00A1 E4                CLR     A
00A2 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
00A6         ?C0011:
                                           ; SOURCE LINE # 148
00A6 7F04              MOV     R7,#04H
00A8 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 151
00AB 9043A0            MOV     DPTR,#043A0H
00AE E0                MOVX    A,@DPTR
00AF 5410              ANL     A,#010H
00B1 6008              JZ      ?C0012
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 154
00B3 900000      R     MOV     DPTR,#cyPmClockBackup+06H
00B6 7401              MOV     A,#01H
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
00B9 8010              SJMP    ?C0013
00BB         ?C0012:
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 159
00BB E4                CLR     A
00BC 900000      R     MOV     DPTR,#cyPmClockBackup+06H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
00C0 FF                MOV     R7,A
00C1 120000      E     LCALL   _CyIMO_Start
                                           ; SOURCE LINE # 165
00C4 7F06              MOV     R7,#06H
00C6 7E00              MOV     R6,#00H
00C8 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 166
00CB         ?C0013:
                                           ; SOURCE LINE # 169
00CB 904200            MOV     DPTR,#04200H
00CE E0                MOVX    A,@DPTR
00CF 5420              ANL     A,#020H
00D1 601A              JZ      ?C0014
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 173
00D3 904000            MOV     DPTR,#04000H
00D6 E0                MOVX    A,@DPTR
00D7 5440              ANL     A,#040H
00D9 7004              JNZ     ?C0015
00DB 7F02              MOV     R7,#02H
00DD 8002              SJMP    ?C0016
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 35  

00DF         ?C0015:
00DF 7F01              MOV     R7,#01H
00E1         ?C0016:
00E1 900000      R     MOV     DPTR,#cyPmClockBackup+07H
00E4 EF                MOV     A,R7
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
00E6 E4                CLR     A
00E7 FF                MOV     R7,A
00E8 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 177
00EB 8005              SJMP    ?C0017
00ED         ?C0014:
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 181
00ED E4                CLR     A
00EE 900000      R     MOV     DPTR,#cyPmClockBackup+07H
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
00F2         ?C0017:
                                           ; SOURCE LINE # 185
00F2 904000            MOV     DPTR,#04000H
00F5 E0                MOVX    A,@DPTR
00F6 5430              ANL     A,#030H
00F8 900000      R     MOV     DPTR,#cyPmClockBackup+08H
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
00FC E0                MOVX    A,@DPTR
00FD 6007              JZ      ?C0018
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 191
00FF 904000            MOV     DPTR,#04000H
0102 E0                MOVX    A,@DPTR
0103 54CF              ANL     A,#0CFH
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
0106         ?C0018:
                                           ; SOURCE LINE # 196
0106 904200            MOV     DPTR,#04200H
0109 E0                MOVX    A,@DPTR
010A 5410              ANL     A,#010H
010C 6003              JZ      ?C0019
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
010E 120000      E     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 199
0111         ?C0019:
                                           ; SOURCE LINE # 202
0111 904004            MOV     DPTR,#04004H
0114 E0                MOVX    A,@DPTR
0115 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
0119 E0                MOVX    A,@DPTR
011A 6005              JZ      ?C0020
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
011C E4                CLR     A
011D FF                MOV     R7,A
011E 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 206
0121         ?C0020:
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 36  

                                           ; SOURCE LINE # 209
0121 900000      R     MOV     DPTR,#cyPmClockBackup+02H
0124 E0                MOVX    A,@DPTR
0125 6005              JZ      ?C0021
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0127 E4                CLR     A
0128 FF                MOV     R7,A
0129 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 212
012C         ?C0021:
                                           ; SOURCE LINE # 215
012C 904007            MOV     DPTR,#04007H
012F E0                MOVX    A,@DPTR
0130 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
0133 F0                MOVX    @DPTR,A
0134 A3                INC     DPTR
0135 E4                CLR     A
0136 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0137 904006            MOV     DPTR,#04006H
013A E0                MOVX    A,@DPTR
013B FF                MOV     R7,A
013C 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
013F E0                MOVX    A,@DPTR
0140 F0                MOVX    @DPTR,A
0141 A3                INC     DPTR
0142 E0                MOVX    A,@DPTR
0143 4F                ORL     A,R7
0144 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0145 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
0148 E0                MOVX    A,@DPTR
0149 7002              JNZ     ?C0136
014B A3                INC     DPTR
014C E0                MOVX    A,@DPTR
014D         ?C0136:
014D 6006              JZ      ?C0022
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
014F E4                CLR     A
0150 FF                MOV     R7,A
0151 FE                MOV     R6,A
0152 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 220
0155         ?C0022:
                                           ; SOURCE LINE # 223
0155 904005            MOV     DPTR,#04005H
0158 E0                MOVX    A,@DPTR
0159 54F0              ANL     A,#0F0H
015B FF                MOV     R7,A
015C E4                CLR     A
015D C4                SWAP    A
015E F8                MOV     R0,A
015F 54F0              ANL     A,#0F0H
0161 C8                XCH     A,R0
0162 68                XRL     A,R0
0163 EF                MOV     A,R7
0164 C4                SWAP    A
0165 540F              ANL     A,#0FH
0167 48                ORL     A,R0
0168 04                INC     A
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 37  

0169 FF                MOV     R7,A
016A FB                MOV     R3,A
016B E4                CLR     A
016C FA                MOV     R2,A
016D F9                MOV     R1,A
016E F8                MOV     R0,A
016F 904200            MOV     DPTR,#04200H
0172 E0                MOVX    A,@DPTR
0173 5407              ANL     A,#07H
0175 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0178 93                MOVC    A,@A+DPTR
0179 FF                MOV     R7,A
017A E4                CLR     A
017B FC                MOV     R4,A
017C FD                MOV     R5,A
017D FE                MOV     R6,A
017E 120000      E     LCALL   ?C?ULDIV
0181 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 226
0184 904210            MOV     DPTR,#04210H
0187 E0                MOVX    A,@DPTR
0188 5401              ANL     A,#01H
018A 600B              JZ      ?C0023
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 229
018C 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
018F 7401              MOV     A,#01H
0191 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
0192 120000      E     LCALL   CyXTAL_Stop
                                           ; SOURCE LINE # 231
0195 8005              SJMP    ?C0024
0197         ?C0023:
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 235
0197 E4                CLR     A
0198 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
019B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
019C         ?C0024:
                                           ; SOURCE LINE # 244
019C 90400B            MOV     DPTR,#0400BH
019F E0                MOVX    A,@DPTR
01A0 5404              ANL     A,#04H
01A2 6007              JZ      ?C0025
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
01A4 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
01A7 7401              MOV     A,#01H
01A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
01AA 22                RET     
01AB         ?C0025:
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
01AB E4                CLR     A
01AC 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
01AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
01B0         ?C0027:
01B0 22                RET     
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 38  

             ; FUNCTION CyPmSaveClocks (END)

             ; FUNCTION CyPmRestoreClocks (BEGIN)
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0000 900000      R     MOV     DPTR,#status
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
0006 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
0009 E0                MOVX    A,@DPTR
000A 6401              XRL     A,#01H
000C 703F              JNZ     ?C0028
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 299
000E 904005            MOV     DPTR,#04005H
0011 E0                MOVX    A,@DPTR
0012 54F0              ANL     A,#0F0H
0014 FF                MOV     R7,A
0015 E4                CLR     A
0016 C4                SWAP    A
0017 F8                MOV     R0,A
0018 54F0              ANL     A,#0F0H
001A C8                XCH     A,R0
001B 68                XRL     A,R0
001C EF                MOV     A,R7
001D C4                SWAP    A
001E 540F              ANL     A,#0FH
0020 48                ORL     A,R0
0021 04                INC     A
0022 FF                MOV     R7,A
0023 FB                MOV     R3,A
0024 E4                CLR     A
0025 FA                MOV     R2,A
0026 F9                MOV     R1,A
0027 F8                MOV     R0,A
0028 904200            MOV     DPTR,#04200H
002B E0                MOVX    A,@DPTR
002C 5407              ANL     A,#07H
002E 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0031 93                MOVC    A,@A+DPTR
0032 FF                MOV     R7,A
0033 E4                CLR     A
0034 FC                MOV     R4,A
0035 FD                MOV     R5,A
0036 FE                MOV     R6,A
0037 120000      E     LCALL   ?C?ULDIV
003A E4                CLR     A
003B 7B4B              MOV     R3,#04BH
003D FA                MOV     R2,A
003E F9                MOV     R1,A
003F F8                MOV     R0,A
0040 120000      E     LCALL   ?C?LMUL
0043 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 301
0046 90400B            MOV     DPTR,#0400BH
0049 E0                MOVX    A,@DPTR
004A 4404              ORL     A,#04H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
004D         ?C0028:
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 39  

                                           ; SOURCE LINE # 305
004D 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
0050 E0                MOVX    A,@DPTR
0051 6401              XRL     A,#01H
0053 7073              JNZ     ?C0029
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 315
0055 FF                MOV     R7,A
0056 120000      E     LCALL   _CyXTAL_Start
                                           ; SOURCE LINE # 318
0059 904210            MOV     DPTR,#04210H
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
                                           ; SOURCE LINE # 321
005E 900000      R     MOV     DPTR,#i
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 7405              MOV     A,#05H
0066 F0                MOVX    @DPTR,A
0067         ?C0030:
0067 D3                SETB    C
0068 900000      R     MOV     DPTR,#i+01H
006B E0                MOVX    A,@DPTR
006C 9400              SUBB    A,#00H
006E 900000      R     MOV     DPTR,#i
0071 E0                MOVX    A,@DPTR
0072 9400              SUBB    A,#00H
0074 4052              JC      ?C0031
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 324
0076 904005            MOV     DPTR,#04005H
0079 E0                MOVX    A,@DPTR
007A 54F0              ANL     A,#0F0H
007C FF                MOV     R7,A
007D E4                CLR     A
007E C4                SWAP    A
007F F8                MOV     R0,A
0080 54F0              ANL     A,#0F0H
0082 C8                XCH     A,R0
0083 68                XRL     A,R0
0084 EF                MOV     A,R7
0085 C4                SWAP    A
0086 540F              ANL     A,#0FH
0088 48                ORL     A,R0
0089 04                INC     A
008A FF                MOV     R7,A
008B FB                MOV     R3,A
008C E4                CLR     A
008D FA                MOV     R2,A
008E F9                MOV     R1,A
008F F8                MOV     R0,A
0090 904200            MOV     DPTR,#04200H
0093 E0                MOVX    A,@DPTR
0094 5407              ANL     A,#07H
0096 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0099 93                MOVC    A,@A+DPTR
009A FF                MOV     R7,A
009B E4                CLR     A
009C FC                MOV     R4,A
009D FD                MOV     R5,A
009E FE                MOV     R6,A
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 40  

009F 120000      E     LCALL   ?C?ULDIV
00A2 E4                CLR     A
00A3 7BC8              MOV     R3,#0C8H
00A5 FA                MOV     R2,A
00A6 F9                MOV     R1,A
00A7 F8                MOV     R0,A
00A8 120000      E     LCALL   ?C?LMUL
00AB 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 327
00AE 904210            MOV     DPTR,#04210H
00B1 E0                MOVX    A,@DPTR
00B2 5480              ANL     A,#080H
00B4 7006              JNZ     ?C0032
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
00B6 900000      R     MOV     DPTR,#status
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 330
00BA 800C              SJMP    ?C0031
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
00BC         ?C0032:
00BC 900000      R     MOV     DPTR,#i
00BF 74FF              MOV     A,#0FFH
00C1 F5F0              MOV     B,A
00C3 120000      E     LCALL   ?C?IILDX
00C6 809F              SJMP    ?C0030
00C8         ?C0031:
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
00C8         ?C0029:
                                           ; SOURCE LINE # 348
00C8 7F2D              MOV     R7,#02DH
00CA 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 351
00CD 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00D0 E0                MOVX    A,@DPTR
00D1 FF                MOV     R7,A
00D2 6402              XRL     A,#02H
00D4 6004              JZ      ?C0036
00D6 EF                MOV     A,R7
00D7 B40317            CJNE    A,#03H,?C0035
00DA         ?C0036:
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 355
00DA 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
00DD E0                MOVX    A,@DPTR
00DE FF                MOV     R7,A
00DF 904004            MOV     DPTR,#04004H
00E2 E0                MOVX    A,@DPTR
00E3 6F                XRL     A,R7
00E4 6003              JZ      ?C0037
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 358
00E6 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 359
00E9         ?C0037:
                                           ; SOURCE LINE # 362
00E9 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00EC E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 41  

00ED FF                MOV     R7,A
00EE 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 363
00F1         ?C0035:
                                           ; SOURCE LINE # 366
00F1 900000      R     MOV     DPTR,#cyPmClockBackup+04H
00F4 E0                MOVX    A,@DPTR
00F5 5440              ANL     A,#040H
00F7 6012              JZ      ?C0038
00F9 900000      R     MOV     DPTR,#cyPmClockBackup+03H
00FC E0                MOVX    A,@DPTR
00FD 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
0100 93                MOVC    A,@A+DPTR
0101 B40307            CJNE    A,#03H,?C0038
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 370
0104 7F08              MOV     R7,#08H
0106 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 371
0109 8024              SJMP    ?C0039
010B         ?C0038:
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 375
010B 900000      R     MOV     DPTR,#cyPmClockBackup+03H
010E E0                MOVX    A,@DPTR
010F 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
0112 93                MOVC    A,@A+DPTR
0113 FF                MOV     R7,A
0114 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 377
0117 900000      R     MOV     DPTR,#cyPmClockBackup+04H
011A E0                MOVX    A,@DPTR
011B 5440              ANL     A,#040H
011D 6009              JZ      ?C0040
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
011F 904200            MOV     DPTR,#04200H
0122 E0                MOVX    A,@DPTR
0123 4440              ORL     A,#040H
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
0126 8007              SJMP    ?C0039
0128         ?C0040:
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
0128 904200            MOV     DPTR,#04200H
012B E0                MOVX    A,@DPTR
012C 54BF              ANL     A,#0BFH
012E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
012F         ?C0039:
                                           ; SOURCE LINE # 389
012F 900000      R     MOV     DPTR,#cyPmClockBackup+06H
0132 E0                MOVX    A,@DPTR
0133 B4010C            CJNE    A,#01H,?C0042
0136 9043A0            MOV     DPTR,#043A0H
0139 E0                MOVX    A,@DPTR
013A 5410              ANL     A,#010H
013C 7004              JNZ     ?C0042
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 392
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 42  

013E FF                MOV     R7,A
013F 120000      E     LCALL   _CyIMO_Start
                                           ; SOURCE LINE # 393
0142         ?C0042:
                                           ; SOURCE LINE # 396
0142 900000      R     MOV     DPTR,#cyPmClockBackup+07H
0145 E0                MOVX    A,@DPTR
0146 FF                MOV     R7,A
0147 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 399
014A 900000      R     MOV     DPTR,#cyPmClockBackup+09H
014D E0                MOVX    A,@DPTR
014E B40103            CJNE    A,#01H,?C0043
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
0151 120000      E     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 402
0154         ?C0043:
                                           ; SOURCE LINE # 405
0154 904000            MOV     DPTR,#04000H
0157 E0                MOVX    A,@DPTR
0158 5430              ANL     A,#030H
015A FF                MOV     R7,A
015B 900000      R     MOV     DPTR,#cyPmClockBackup+08H
015E E0                MOVX    A,@DPTR
015F FD                MOV     R5,A
0160 6F                XRL     A,R7
0161 7001              JNZ     ?C0137
0163 E4                CLR     A
0164         ?C0137:
0164 600A              JZ      ?C0044
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
0166 904000            MOV     DPTR,#04000H
0169 E0                MOVX    A,@DPTR
016A 54CF              ANL     A,#0CFH
016C FF                MOV     R7,A
016D ED                MOV     A,R5
016E 4F                ORL     A,R7
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
0170         ?C0044:
                                           ; SOURCE LINE # 413
0170 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0173 E0                MOVX    A,@DPTR
0174 6401              XRL     A,#01H
0176 7056              JNZ     ?C0045
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 421
0178 900000      R     MOV     DPTR,#status
017B 7410              MOV     A,#010H
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
017E E4                CLR     A
017F FF                MOV     R7,A
0180 120000      E     LCALL   _CyPLL_OUT_Start
                                           ; SOURCE LINE # 427
0183 7F50              MOV     R7,#050H
0185 7E00              MOV     R6,#00H
0187 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 428
018A 904225            MOV     DPTR,#04225H
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 43  

018D E0                MOVX    A,@DPTR
018E FF                MOV     R7,A
                                           ; SOURCE LINE # 431
018F 900000      R     MOV     DPTR,#i
0192 E4                CLR     A
0193 F0                MOVX    @DPTR,A
0194 A3                INC     DPTR
0195 74AB              MOV     A,#0ABH
0197 F0                MOVX    @DPTR,A
0198         ?C0046:
0198 D3                SETB    C
0199 900000      R     MOV     DPTR,#i+01H
019C E0                MOVX    A,@DPTR
019D 9400              SUBB    A,#00H
019F 900000      R     MOV     DPTR,#i
01A2 E0                MOVX    A,@DPTR
01A3 9400              SUBB    A,#00H
01A5 4027              JC      ?C0047
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
01A7 7F01              MOV     R7,#01H
01A9 7E00              MOV     R6,#00H
01AB 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 437
01AE 904225            MOV     DPTR,#04225H
01B1 E0                MOVX    A,@DPTR
01B2 5401              ANL     A,#01H
01B4 600C              JZ      ?C0048
01B6 E0                MOVX    A,@DPTR
01B7 5401              ANL     A,#01H
01B9 6007              JZ      ?C0048
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
01BB E4                CLR     A
01BC 900000      R     MOV     DPTR,#status
01BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
01C0 800C              SJMP    ?C0047
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
01C2         ?C0048:
01C2 900000      R     MOV     DPTR,#i
01C5 74FF              MOV     A,#0FFH
01C7 F5F0              MOV     B,A
01C9 120000      E     LCALL   ?C?IILDX
01CC 80CA              SJMP    ?C0046
01CE         ?C0047:
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
01CE         ?C0045:
                                           ; SOURCE LINE # 457
01CE 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01D1 E0                MOVX    A,@DPTR
01D2 FF                MOV     R7,A
01D3 6003              JZ      ?C0052
01D5 B40117            CJNE    A,#01H,?C0051
01D8         ?C0052:
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 461
01D8 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 44  

01DB E0                MOVX    A,@DPTR
01DC FF                MOV     R7,A
01DD 904004            MOV     DPTR,#04004H
01E0 E0                MOVX    A,@DPTR
01E1 6F                XRL     A,R7
01E2 6003              JZ      ?C0053
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
01E4 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 464
01E7         ?C0053:
                                           ; SOURCE LINE # 467
01E7 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01EA E0                MOVX    A,@DPTR
01EB FF                MOV     R7,A
01EC 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 468
01EF         ?C0051:
                                           ; SOURCE LINE # 472
01EF 900000      R     MOV     DPTR,#cyPmClockBackup+06H
01F2 E0                MOVX    A,@DPTR
01F3 700B              JNZ     ?C0054
01F5 9043A0            MOV     DPTR,#043A0H
01F8 E0                MOVX    A,@DPTR
01F9 5410              ANL     A,#010H
01FB 6003              JZ      ?C0054
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
01FD 120000      E     LCALL   CyIMO_Stop
                                           ; SOURCE LINE # 475
0200         ?C0054:
                                           ; SOURCE LINE # 478
0200 904007            MOV     DPTR,#04007H
0203 E0                MOVX    A,@DPTR
0204 7F00              MOV     R7,#00H
0206 FE                MOV     R6,A
;---- Variable 'clkBusDivTmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 479
0207 904006            MOV     DPTR,#04006H
020A E0                MOVX    A,@DPTR
020B FD                MOV     R5,A
020C EE                MOV     A,R6
020D ED                MOV     A,R5
020E FF                MOV     R7,A
                                           ; SOURCE LINE # 480
020F AC06              MOV     R4,AR6
0211 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
0214 E0                MOVX    A,@DPTR
0215 FE                MOV     R6,A
0216 A3                INC     DPTR
0217 E0                MOVX    A,@DPTR
0218 FF                MOV     R7,A
0219 6D                XRL     A,R5
021A 7002              JNZ     ?C0138
021C EE                MOV     A,R6
021D 6C                XRL     A,R4
021E         ?C0138:
021E 6003              JZ      ?C0055
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
0220 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 483
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 45  

0223         ?C0055:
                                           ; SOURCE LINE # 486
0223 904800            MOV     DPTR,#04800H
0226 E0                MOVX    A,@DPTR
0227 543F              ANL     A,#03FH
0229 FF                MOV     R7,A
022A 900000      R     MOV     DPTR,#cyPmClockBackup+05H
022D E0                MOVX    A,@DPTR
022E 4F                ORL     A,R7
022F 904800            MOV     DPTR,#04800H
0232 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
0233 900000      R     MOV     DPTR,#cyPmClockBackup
0236 E0                MOVX    A,@DPTR
0237 9043A1            MOV     DPTR,#043A1H
023A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
023B 900000      R     MOV     DPTR,#cyPmClockBackup+01H
023E E0                MOVX    A,@DPTR
023F 9043A2            MOV     DPTR,#043A2H
0242 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
0243 22                RET     
             ; FUNCTION CyPmRestoreClocks (END)

             ; FUNCTION _CyPmAltAct (BEGIN)
                                           ; SOURCE LINE # 636
0000 900000      R     MOV     DPTR,#wakeupSource
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#wakeupTime
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 637
                                           ; SOURCE LINE # 654
0010 C3                CLR     C
0011 940F              SUBB    A,#0FH
0013 EE                MOV     A,R6
0014 9400              SUBB    A,#00H
0016 4021              JC      ?C0057
0018 900000      R     MOV     DPTR,#wakeupTime
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 D3                SETB    C
0021 940E              SUBB    A,#0EH
0023 EE                MOV     A,R6
0024 9401              SUBB    A,#01H
0026 5011              JNC     ?C0057
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
0028 EF                MOV     A,R7
0029 24F2              ADD     A,#0F2H
002B FF                MOV     R7,A
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 46  

002C 120000      R     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 659
002F 900000      R     MOV     DPTR,#wakeupSource
0032 E0                MOVX    A,@DPTR
0033 4404              ORL     A,#04H
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
0039         ?C0057:
                                           ; SOURCE LINE # 663
0039 900000      R     MOV     DPTR,#wakeupTime
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 C3                CLR     C
0042 9402              SUBB    A,#02H
0044 EE                MOV     A,R6
0045 9400              SUBB    A,#00H
0047 4019              JC      ?C0058
0049 D3                SETB    C
004A EF                MOV     A,R7
004B 940D              SUBB    A,#0DH
004D EE                MOV     A,R6
004E 9400              SUBB    A,#00H
0050 5010              JNC     ?C0058
                                           ; SOURCE LINE # 664
                                           ; SOURCE LINE # 666
0052 EF                MOV     A,R7
0053 14                DEC     A
0054 FF                MOV     R7,A
0055 120000      R     LCALL   _CyPmCtwSetInterval
                                           ; SOURCE LINE # 669
0058 900000      R     MOV     DPTR,#wakeupSource
005B E0                MOVX    A,@DPTR
005C 4408              ORL     A,#08H
005E F0                MOVX    @DPTR,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 670
0062         ?C0058:
                                           ; SOURCE LINE # 673
0062 900000      R     MOV     DPTR,#wakeupTime
0065 E0                MOVX    A,@DPTR
0066 7004              JNZ     ?C0139
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A 6401              XRL     A,#01H
006C         ?C0139:
006C 700D              JNZ     ?C0059
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 676
006E 120000      R     LCALL   CyPmOppsSet
                                           ; SOURCE LINE # 679
0071 900000      R     MOV     DPTR,#wakeupSource
0074 E0                MOVX    A,@DPTR
0075 4408              ORL     A,#08H
0077 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 47  

0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
007B         ?C0059:
                                           ; SOURCE LINE # 688
007B 904398            MOV     DPTR,#04398H
007E E0                MOVX    A,@DPTR
007F 900000      R     MOV     DPTR,#cyPmBackup+07H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
0083 900000      R     MOV     DPTR,#wakeupSource
0086 E0                MOVX    A,@DPTR
0087 FC                MOV     R4,A
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A FD                MOV     R5,A
008B EC                MOV     A,R4
008C C4                SWAP    A
008D F8                MOV     R0,A
008E 54F0              ANL     A,#0F0H
0090 C8                XCH     A,R0
0091 68                XRL     A,R0
0092 ED                MOV     A,R5
0093 C4                SWAP    A
0094 540F              ANL     A,#0FH
0096 48                ORL     A,R0
0097 904398            MOV     DPTR,#04398H
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 692
009B A3                INC     DPTR
009C E0                MOVX    A,@DPTR
009D 900000      R     MOV     DPTR,#cyPmBackup+08H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 693
00A1 ED                MOV     A,R5
00A2 540F              ANL     A,#0FH
00A4 904399            MOV     DPTR,#04399H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 696
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA 900000      R     MOV     DPTR,#cyPmBackup+09H
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 697
00AE 900000      R     MOV     DPTR,#wakeupSource
00B1 E0                MOVX    A,@DPTR
00B2 C4                SWAP    A
00B3 5401              ANL     A,#01H
00B5 90439A            MOV     DPTR,#0439AH
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 701
00B9 904393            MOV     DPTR,#04393H
00BC E0                MOVX    A,@DPTR
00BD 54F8              ANL     A,#0F8H
00BF 4401              ORL     A,#01H
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
                                           ; SOURCE LINE # 707
00C4 00                NOP     
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 48  

                                           ; SOURCE LINE # 708
00C5 00                NOP     
                                           ; SOURCE LINE # 711
00C6 00                NOP     
                                           ; SOURCE LINE # 716
00C7 900000      R     MOV     DPTR,#cyPmBackup+07H
00CA E0                MOVX    A,@DPTR
00CB 904398            MOV     DPTR,#04398H
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
00CF 900000      R     MOV     DPTR,#cyPmBackup+08H
00D2 E0                MOVX    A,@DPTR
00D3 904399            MOV     DPTR,#04399H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
00D7 900000      R     MOV     DPTR,#cyPmBackup+09H
00DA E0                MOVX    A,@DPTR
00DB 90439A            MOV     DPTR,#0439AH
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 719
00DF 22                RET     
             ; FUNCTION _CyPmAltAct (END)

             ; FUNCTION _CyPmSleep (BEGIN)
                                           ; SOURCE LINE # 840
0000 900000      R     MOV     DPTR,#wakeupTime
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 845
000B 120000      E     LCALL   CyEnterCriticalSection
000E 900000      R     MOV     DPTR,#interruptState
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
0013 904393            MOV     DPTR,#04393H
0016 E0                MOVX    A,@DPTR
0017 5408              ANL     A,#08H
0019 7009              JNZ     ?C0061
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 857
001B 904683            MOV     DPTR,#04683H
001E E0                MOVX    A,@DPTR
001F 541F              ANL     A,#01FH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
0022 8009              SJMP    ?C0062
0024         ?C0061:
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 864
0024 900000      R     MOV     DPTR,#interruptState
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 120000      E     LCALL   _CyExitCriticalSection
002C 22                RET     
                                           ; SOURCE LINE # 867
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 49  

002D         ?C0062:
                                           ; SOURCE LINE # 884
002D 9046EC            MOV     DPTR,#046ECH
0030 E0                MOVX    A,@DPTR
0031 C3                CLR     C
0032 9405              SUBB    A,#05H
0034 5012              JNC     ?C0064
                                           ; SOURCE LINE # 885
                                           ; SOURCE LINE # 887
0036 904689            MOV     DPTR,#04689H
0039 E0                MOVX    A,@DPTR
003A 5401              ANL     A,#01H
003C 7002              JNZ     ?C0066
003E 8001              SJMP    ?C0067
0040         ?C0066:
0040 C3                CLR     C
0041         ?C0067:
0041 4005              JC      ?C0064
0043 7F00              MOV     R7,#00H
0045 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 888
0048         ?C0064:
                                           ; SOURCE LINE # 891
0048 9046F5            MOV     DPTR,#046F5H
004B E0                MOVX    A,@DPTR
004C 5407              ANL     A,#07H
004E 602B              JZ      ?C0068
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
0050 9046EC            MOV     DPTR,#046ECH
0053 E0                MOVX    A,@DPTR
0054 C3                CLR     C
0055 9405              SUBB    A,#05H
0057 5007              JNC     ?C0069
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 897
0059 7F00              MOV     R7,#00H
005B 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 898
005E 801B              SJMP    ?C0068
0060         ?C0069:
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
0060 904689            MOV     DPTR,#04689H
0063 E0                MOVX    A,@DPTR
0064 5401              ANL     A,#01H
0066 700D              JNZ     ?C0072
                                           ; SOURCE LINE # 902
                                           ; SOURCE LINE # 903
0068 900000      R     MOV     DPTR,#cyPmBackup+06H
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 904
006C 904689            MOV     DPTR,#04689H
006F E0                MOVX    A,@DPTR
0070 4401              ORL     A,#01H
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 905
0073 8006              SJMP    ?C0068
0075         ?C0072:
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 908
0075 900000      R     MOV     DPTR,#cyPmBackup+06H
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 50  

0078 7401              MOV     A,#01H
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
                                           ; SOURCE LINE # 911
007B         ?C0068:
                                           ; SOURCE LINE # 936
007B 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 942
007E 900000      R     MOV     DPTR,#wakeupTime
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 C3                CLR     C
0084 9402              SUBB    A,#02H
0086 4016              JC      ?C0074
0088 EF                MOV     A,R7
0089 D3                SETB    C
008A 940D              SUBB    A,#0DH
008C 5010              JNC     ?C0074
                                           ; SOURCE LINE # 943
                                           ; SOURCE LINE # 945
008E EF                MOV     A,R7
008F 14                DEC     A
0090 FF                MOV     R7,A
0091 120000      R     LCALL   _CyPmCtwSetInterval
                                           ; SOURCE LINE # 948
0094 900000      R     MOV     DPTR,#wakeupSource
0097 E0                MOVX    A,@DPTR
0098 4408              ORL     A,#08H
009A F0                MOVX    @DPTR,A
009B A3                INC     DPTR
009C E0                MOVX    A,@DPTR
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 949
009E         ?C0074:
                                           ; SOURCE LINE # 952
009E 900000      R     MOV     DPTR,#wakeupTime
00A1 E0                MOVX    A,@DPTR
00A2 B4010D            CJNE    A,#01H,?C0075
                                           ; SOURCE LINE # 953
                                           ; SOURCE LINE # 955
00A5 120000      R     LCALL   CyPmOppsSet
                                           ; SOURCE LINE # 958
00A8 900000      R     MOV     DPTR,#wakeupSource
00AB E0                MOVX    A,@DPTR
00AC 4408              ORL     A,#08H
00AE F0                MOVX    @DPTR,A
00AF A3                INC     DPTR
00B0 E0                MOVX    A,@DPTR
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 959
00B2         ?C0075:
                                           ; SOURCE LINE # 967
00B2 904398            MOV     DPTR,#04398H
00B5 E0                MOVX    A,@DPTR
00B6 900000      R     MOV     DPTR,#cyPmBackup+07H
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 968
00BA 900000      R     MOV     DPTR,#wakeupSource
00BD E0                MOVX    A,@DPTR
00BE FC                MOV     R4,A
00BF A3                INC     DPTR
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 51  

00C0 E0                MOVX    A,@DPTR
00C1 FD                MOV     R5,A
00C2 EC                MOV     A,R4
00C3 C4                SWAP    A
00C4 F8                MOV     R0,A
00C5 54F0              ANL     A,#0F0H
00C7 C8                XCH     A,R0
00C8 68                XRL     A,R0
00C9 ED                MOV     A,R5
00CA C4                SWAP    A
00CB 540F              ANL     A,#0FH
00CD 48                ORL     A,R0
00CE 904398            MOV     DPTR,#04398H
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 971
00D2 A3                INC     DPTR
00D3 E0                MOVX    A,@DPTR
00D4 900000      R     MOV     DPTR,#cyPmBackup+08H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 972
00D8 ED                MOV     A,R5
00D9 540F              ANL     A,#0FH
00DB 904399            MOV     DPTR,#04399H
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 975
00DF A3                INC     DPTR
00E0 E0                MOVX    A,@DPTR
00E1 900000      R     MOV     DPTR,#cyPmBackup+09H
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 976
00E5 900000      R     MOV     DPTR,#wakeupSource
00E8 E0                MOVX    A,@DPTR
00E9 C4                SWAP    A
00EA 5401              ANL     A,#01H
00EC 90439A            MOV     DPTR,#0439AH
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 989
00F0 904200            MOV     DPTR,#04200H
00F3 E0                MOVX    A,@DPTR
00F4 5407              ANL     A,#07H
00F6 7007              JNZ     ?C0076
                                           ; SOURCE LINE # 990
                                           ; SOURCE LINE # 992
00F8 900000      R     MOV     DPTR,#cyPmBackup+030H
00FB 04                INC     A
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 993
00FD 8016              SJMP    ?C0077
00FF         ?C0076:
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 997
00FF E4                CLR     A
0100 900000      R     MOV     DPTR,#cyPmBackup+030H
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1000
0104 904200            MOV     DPTR,#04200H
0107 E0                MOVX    A,@DPTR
0108 5407              ANL     A,#07H
010A 900000      R     MOV     DPTR,#cyPmBackup+02FH
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1003
010E 904200            MOV     DPTR,#04200H
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 52  

0111 E0                MOVX    A,@DPTR
0112 54F8              ANL     A,#0F8H
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1004
0115         ?C0077:
                                           ; SOURCE LINE # 1007
0115 904393            MOV     DPTR,#04393H
0118 E0                MOVX    A,@DPTR
0119 54F8              ANL     A,#0F8H
011B 4403              ORL     A,#03H
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1010
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
                                           ; SOURCE LINE # 1013
0120 00                NOP     
                                           ; SOURCE LINE # 1014
0121 00                NOP     
                                           ; SOURCE LINE # 1017
0122 00                NOP     
                                           ; SOURCE LINE # 1022
0123 900000      R     MOV     DPTR,#cyPmBackup+030H
0126 E0                MOVX    A,@DPTR
0127 6401              XRL     A,#01H
0129 6010              JZ      ?C0078
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
012B 904200            MOV     DPTR,#04200H
012E E0                MOVX    A,@DPTR
012F 54F8              ANL     A,#0F8H
0131 FF                MOV     R7,A
0132 900000      R     MOV     DPTR,#cyPmBackup+02FH
0135 E0                MOVX    A,@DPTR
0136 4F                ORL     A,R7
0137 904200            MOV     DPTR,#04200H
013A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1026
013B         ?C0078:
                                           ; SOURCE LINE # 1039
013B 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 1045
013E 9046F5            MOV     DPTR,#046F5H
0141 E0                MOVX    A,@DPTR
0142 5407              ANL     A,#07H
0144 6016              JZ      ?C0079
                                           ; SOURCE LINE # 1047
                                           ; SOURCE LINE # 1048
0146 9046EC            MOV     DPTR,#046ECH
0149 E0                MOVX    A,@DPTR
014A C3                CLR     C
014B 9405              SUBB    A,#05H
014D 400D              JC      ?C0079
                                           ; SOURCE LINE # 1049
                                           ; SOURCE LINE # 1050
014F 900000      R     MOV     DPTR,#cyPmBackup+06H
0152 E0                MOVX    A,@DPTR
0153 7007              JNZ     ?C0079
                                           ; SOURCE LINE # 1051
                                           ; SOURCE LINE # 1052
0155 904689            MOV     DPTR,#04689H
0158 E0                MOVX    A,@DPTR
0159 54FE              ANL     A,#0FEH
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 53  

015B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1054
                                           ; SOURCE LINE # 1055
015C         ?C0079:
                                           ; SOURCE LINE # 1061
015C 900000      R     MOV     DPTR,#cyPmBackup+07H
015F E0                MOVX    A,@DPTR
0160 904398            MOV     DPTR,#04398H
0163 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1062
0164 900000      R     MOV     DPTR,#cyPmBackup+08H
0167 E0                MOVX    A,@DPTR
0168 904399            MOV     DPTR,#04399H
016B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
016C 900000      R     MOV     DPTR,#cyPmBackup+09H
016F E0                MOVX    A,@DPTR
0170 90439A            MOV     DPTR,#0439AH
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1066
0174 900000      R     MOV     DPTR,#interruptState
0177 E0                MOVX    A,@DPTR
0178 FF                MOV     R7,A
0179 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1067
017C         ?C0063:
017C 22                RET     
             ; FUNCTION _CyPmSleep (END)

             ; FUNCTION CyPmHibernate (BEGIN)
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1118
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1126
0008 904393            MOV     DPTR,#04393H
000B E0                MOVX    A,@DPTR
000C 5408              ANL     A,#08H
000E 7009              JNZ     ?C0082
                                           ; SOURCE LINE # 1127
                                           ; SOURCE LINE # 1129
0010 904683            MOV     DPTR,#04683H
0013 E0                MOVX    A,@DPTR
0014 541F              ANL     A,#01FH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1130
0017 8009              SJMP    ?C0083
0019         ?C0082:
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1136
0019 900000      R     MOV     DPTR,#interruptState
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 120000      E     LCALL   _CyExitCriticalSection
0021 22                RET     
                                           ; SOURCE LINE # 1139
0022         ?C0083:
                                           ; SOURCE LINE # 1141
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 54  

0022 120000      R     LCALL   CyPmHibSaveSet
                                           ; SOURCE LINE # 1145
0025 904398            MOV     DPTR,#04398H
0028 E0                MOVX    A,@DPTR
0029 900000      R     MOV     DPTR,#cyPmBackup+07H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1146
002D 904398            MOV     DPTR,#04398H
0030 7404              MOV     A,#04H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1148
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 900000      R     MOV     DPTR,#cyPmBackup+08H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1149
0039 904399            MOV     DPTR,#04399H
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1151
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 900000      R     MOV     DPTR,#cyPmBackup+09H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1152
0044 90439A            MOV     DPTR,#0439AH
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1156
0049 904200            MOV     DPTR,#04200H
004C E0                MOVX    A,@DPTR
004D 5407              ANL     A,#07H
004F 7007              JNZ     ?C0085
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1159
0051 900000      R     MOV     DPTR,#cyPmBackup+030H
0054 04                INC     A
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1160
0056 8016              SJMP    ?C0086
0058         ?C0085:
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1164
0058 E4                CLR     A
0059 900000      R     MOV     DPTR,#cyPmBackup+030H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1167
005D 904200            MOV     DPTR,#04200H
0060 E0                MOVX    A,@DPTR
0061 5407              ANL     A,#07H
0063 900000      R     MOV     DPTR,#cyPmBackup+02FH
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1170
0067 904200            MOV     DPTR,#04200H
006A E0                MOVX    A,@DPTR
006B 54F8              ANL     A,#0F8H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1171
006E         ?C0086:
                                           ; SOURCE LINE # 1175
006E 904393            MOV     DPTR,#04393H
0071 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 55  

0072 54F8              ANL     A,#0F8H
0074 4404              ORL     A,#04H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1178
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
                                           ; SOURCE LINE # 1181
0079 00                NOP     
                                           ; SOURCE LINE # 1182
007A 00                NOP     
                                           ; SOURCE LINE # 1185
007B 00                NOP     
                                           ; SOURCE LINE # 1192
007C 900000      R     MOV     DPTR,#cyPmBackup+030H
007F E0                MOVX    A,@DPTR
0080 6401              XRL     A,#01H
0082 6010              JZ      ?C0087
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
0084 904200            MOV     DPTR,#04200H
0087 E0                MOVX    A,@DPTR
0088 54F8              ANL     A,#0F8H
008A FF                MOV     R7,A
008B 900000      R     MOV     DPTR,#cyPmBackup+02FH
008E E0                MOVX    A,@DPTR
008F 4F                ORL     A,R7
0090 904200            MOV     DPTR,#04200H
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1196
0094         ?C0087:
                                           ; SOURCE LINE # 1200
0094 120000      R     LCALL   CyPmHibRestore
                                           ; SOURCE LINE # 1203
0097 900000      R     MOV     DPTR,#cyPmBackup+07H
009A E0                MOVX    A,@DPTR
009B 904398            MOV     DPTR,#04398H
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1204
009F 900000      R     MOV     DPTR,#cyPmBackup+08H
00A2 E0                MOVX    A,@DPTR
00A3 904399            MOV     DPTR,#04399H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1205
00A7 900000      R     MOV     DPTR,#cyPmBackup+09H
00AA E0                MOVX    A,@DPTR
00AB 90439A            MOV     DPTR,#0439AH
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1208
00AF 900000      R     MOV     DPTR,#interruptState
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1209
00B7         ?C0084:
00B7 22                RET     
             ; FUNCTION CyPmHibernate (END)

             ; FUNCTION _CyPmReadStatus (BEGIN)
                                           ; SOURCE LINE # 1241
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 56  

                                           ; SOURCE LINE # 1242
                                           ; SOURCE LINE # 1248
0005 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R4' ----
0008 AC07              MOV     R4,AR7
                                           ; SOURCE LINE # 1251
000A 900000      R     MOV     DPTR,#interruptStatus
000D E0                MOVX    A,@DPTR
000E FE                MOV     R6,A
000F 904390            MOV     DPTR,#04390H
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 EE                MOV     A,R6
0015 4D                ORL     A,R5
0016 900000      R     MOV     DPTR,#interruptStatus
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1252
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#tmpStatus
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1253
0020 900000      R     MOV     DPTR,#mask
0023 E0                MOVX    A,@DPTR
0024 F4                CPL     A
0025 FE                MOV     R6,A
0026 EF                MOV     A,R7
0027 5E                ANL     A,R6
0028 900000      R     MOV     DPTR,#interruptStatus
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1256
002C AF04              MOV     R7,AR4
002E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1258
0031 900000      R     MOV     DPTR,#tmpStatus
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
                                           ; SOURCE LINE # 1259
0036         ?C0088:
0036 22                RET     
             ; FUNCTION _CyPmReadStatus (END)

             ; FUNCTION CyPmHibSaveSet (BEGIN)
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
                                           ; SOURCE LINE # 1288
0000 904331            MOV     DPTR,#04331H
0003 E0                MOVX    A,@DPTR
0004 5404              ANL     A,#04H
0006 6004              JZ      ?C0089
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1302
0008 E0                MOVX    A,@DPTR
0009 54FB              ANL     A,#0FBH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1303
000C         ?C0089:
                                           ; SOURCE LINE # 1307
000C 7F01              MOV     R7,#01H
000E 120000      E     LCALL   _CyILO_SetPowerMode
0011 900000      R     MOV     DPTR,#cyPmBackup
0014 EF                MOV     A,R7
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 57  

0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1310
0016 904300            MOV     DPTR,#04300H
0019 E0                MOVX    A,@DPTR
001A 5402              ANL     A,#02H
001C 7003              JNZ     ?C0090
001E FF                MOV     R7,A
001F 8002              SJMP    ?C0091
0021         ?C0090:
0021 7F01              MOV     R7,#01H
0023         ?C0091:
0023 900000      R     MOV     DPTR,#cyPmBackup+01H
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1314
0028 904300            MOV     DPTR,#04300H
002B E0                MOVX    A,@DPTR
002C 5404              ANL     A,#04H
002E 7003              JNZ     ?C0092
0030 FF                MOV     R7,A
0031 8002              SJMP    ?C0093
0033         ?C0092:
0033 7F01              MOV     R7,#01H
0035         ?C0093:
0035 900000      R     MOV     DPTR,#cyPmBackup+02H
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1319
003A 904683            MOV     DPTR,#04683H
003D E0                MOVX    A,@DPTR
003E 5410              ANL     A,#010H
0040 700D              JNZ     ?C0094
                                           ; SOURCE LINE # 1320
                                           ; SOURCE LINE # 1322
0042 900000      R     MOV     DPTR,#cyPmBackup+03H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1323
0046 904683            MOV     DPTR,#04683H
0049 E0                MOVX    A,@DPTR
004A 4410              ORL     A,#010H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1324
004D 8006              SJMP    ?C0095
004F         ?C0094:
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1327
004F 900000      R     MOV     DPTR,#cyPmBackup+03H
0052 7401              MOV     A,#01H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1328
0055         ?C0095:
                                           ; SOURCE LINE # 1338
0055 120000      R     LCALL   CyPmHviLviSaveDisable
                                           ; SOURCE LINE # 1342
0058 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 1348
005B 904685            MOV     DPTR,#04685H
005E E0                MOVX    A,@DPTR
005F 900000      R     MOV     DPTR,#cyPmBackup+0AH
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1349
0063 904686            MOV     DPTR,#04686H
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 58  

0066 E0                MOVX    A,@DPTR
0067 900000      R     MOV     DPTR,#cyPmBackup+0BH
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1351
006B 904685            MOV     DPTR,#04685H
006E 74FF              MOV     A,#0FFH
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1352
0071 A3                INC     DPTR
0072 7490              MOV     A,#090H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1353
0075 22                RET     
             ; FUNCTION CyPmHibSaveSet (END)

             ; FUNCTION CyPmHibRestore (BEGIN)
                                           ; SOURCE LINE # 1375
                                           ; SOURCE LINE # 1376
                                           ; SOURCE LINE # 1378
0000 120000      R     LCALL   CyPmHviLviRestore
                                           ; SOURCE LINE # 1381
0003 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 1384
0006 900000      R     MOV     DPTR,#cyPmBackup+01H
0009 E0                MOVX    A,@DPTR
000A B40103            CJNE    A,#01H,?C0097
                                           ; SOURCE LINE # 1385
                                           ; SOURCE LINE # 1387
000D 120000      E     LCALL   CyILO_Start1K
                                           ; SOURCE LINE # 1388
0010         ?C0097:
                                           ; SOURCE LINE # 1391
0010 900000      R     MOV     DPTR,#cyPmBackup+02H
0013 E0                MOVX    A,@DPTR
0014 B40103            CJNE    A,#01H,?C0098
                                           ; SOURCE LINE # 1392
                                           ; SOURCE LINE # 1394
0017 120000      E     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1395
001A         ?C0098:
                                           ; SOURCE LINE # 1398
001A 900000      R     MOV     DPTR,#cyPmBackup
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 120000      E     LCALL   _CyILO_SetPowerMode
                                           ; SOURCE LINE # 1401
0022 900000      R     MOV     DPTR,#cyPmBackup+03H
0025 E0                MOVX    A,@DPTR
0026 7007              JNZ     ?C0099
                                           ; SOURCE LINE # 1402
                                           ; SOURCE LINE # 1404
0028 904683            MOV     DPTR,#04683H
002B E0                MOVX    A,@DPTR
002C 54EF              ANL     A,#0EFH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1405
002F         ?C0099:
                                           ; SOURCE LINE # 1411
002F 900000      R     MOV     DPTR,#cyPmBackup+0AH
0032 E0                MOVX    A,@DPTR
0033 904685            MOV     DPTR,#04685H
0036 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 59  

                                           ; SOURCE LINE # 1412
0037 900000      R     MOV     DPTR,#cyPmBackup+0BH
003A E0                MOVX    A,@DPTR
003B 904686            MOV     DPTR,#04686H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1413
003F 22                RET     
             ; FUNCTION CyPmHibRestore (END)

             ; FUNCTION _CyPmCtwSetInterval (BEGIN)
                                           ; SOURCE LINE # 1436
0000 900000      R     MOV     DPTR,#ctwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1437
                                           ; SOURCE LINE # 1439
0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 54F7              ANL     A,#0F7H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1442
000C 120000      E     LCALL   CyILO_Start1K
                                           ; SOURCE LINE # 1445
000F 904382            MOV     DPTR,#04382H
0012 E0                MOVX    A,@DPTR
0013 5404              ANL     A,#04H
0015 601C              JZ      ?C0101
                                           ; SOURCE LINE # 1446
                                           ; SOURCE LINE # 1448
0017 900000      R     MOV     DPTR,#ctwInterval
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 904381            MOV     DPTR,#04381H
001F E0                MOVX    A,@DPTR
0020 6F                XRL     A,R7
0021 6025              JZ      ?C0105
                                           ; SOURCE LINE # 1449
                                           ; SOURCE LINE # 1451
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 54FB              ANL     A,#0FBH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1452
0028 904381            MOV     DPTR,#04381H
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1453
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F 4404              ORL     A,#04H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1454
                                           ; SOURCE LINE # 1455
0032 22                RET     
0033         ?C0101:
                                           ; SOURCE LINE # 1457
                                           ; SOURCE LINE # 1459
0033 900000      R     MOV     DPTR,#ctwInterval
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 904381            MOV     DPTR,#04381H
003B E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 60  

003C 6F                XRL     A,R7
003D 6002              JZ      ?C0104
                                           ; SOURCE LINE # 1460
                                           ; SOURCE LINE # 1462
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1463
0041         ?C0104:
                                           ; SOURCE LINE # 1466
0041 904382            MOV     DPTR,#04382H
0044 E0                MOVX    A,@DPTR
0045 4404              ORL     A,#04H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1467
                                           ; SOURCE LINE # 1468
0048         ?C0105:
0048 22                RET     
             ; FUNCTION _CyPmCtwSetInterval (END)

             ; FUNCTION CyPmOppsSet (BEGIN)
                                           ; SOURCE LINE # 1488
                                           ; SOURCE LINE # 1489
                                           ; SOURCE LINE # 1491
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 7003              JNZ     ?C0106
                                           ; SOURCE LINE # 1492
                                           ; SOURCE LINE # 1494
0008 120000      E     LCALL   CyXTAL_32KHZ_Start
                                           ; SOURCE LINE # 1495
000B         ?C0106:
                                           ; SOURCE LINE # 1498
000B 904382            MOV     DPTR,#04382H
000E E0                MOVX    A,@DPTR
000F 54DF              ANL     A,#0DFH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1501
0012 E0                MOVX    A,@DPTR
0013 4410              ORL     A,#010H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1502
0016 22                RET     
             ; FUNCTION CyPmOppsSet (END)

             ; FUNCTION _CyPmFtwSetInterval (BEGIN)
                                           ; SOURCE LINE # 1525
0000 900000      R     MOV     DPTR,#ftwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1526
                                           ; SOURCE LINE # 1528
0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 54FD              ANL     A,#0FDH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1531
000C 120000      E     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1534
000F 904382            MOV     DPTR,#04382H
0012 E0                MOVX    A,@DPTR
0013 5401              ANL     A,#01H
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 61  

0015 6020              JZ      ?C0108
                                           ; SOURCE LINE # 1535
                                           ; SOURCE LINE # 1537
0017 900000      R     MOV     DPTR,#ftwInterval
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 904380            MOV     DPTR,#04380H
001F E0                MOVX    A,@DPTR
0020 6F                XRL     A,R7
0021 6029              JZ      ?C0112
                                           ; SOURCE LINE # 1538
                                           ; SOURCE LINE # 1540
0023 904382            MOV     DPTR,#04382H
0026 E0                MOVX    A,@DPTR
0027 54FE              ANL     A,#0FEH
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1541
002A 904380            MOV     DPTR,#04380H
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1542
002F 904382            MOV     DPTR,#04382H
0032 E0                MOVX    A,@DPTR
0033 4401              ORL     A,#01H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1543
                                           ; SOURCE LINE # 1544
0036 22                RET     
0037         ?C0108:
                                           ; SOURCE LINE # 1546
                                           ; SOURCE LINE # 1548
0037 900000      R     MOV     DPTR,#ftwInterval
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 904380            MOV     DPTR,#04380H
003F E0                MOVX    A,@DPTR
0040 6F                XRL     A,R7
0041 6002              JZ      ?C0111
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1551
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1552
0045         ?C0111:
                                           ; SOURCE LINE # 1555
0045 904382            MOV     DPTR,#04382H
0048 E0                MOVX    A,@DPTR
0049 4401              ORL     A,#01H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1556
                                           ; SOURCE LINE # 1557
004C         ?C0112:
004C 22                RET     
             ; FUNCTION _CyPmFtwSetInterval (END)

             ; FUNCTION CyPmHibSlpSaveSet (BEGIN)
                                           ; SOURCE LINE # 1582
                                           ; SOURCE LINE # 1583
                                           ; SOURCE LINE # 1585
0000 905A00            MOV     DPTR,#05A00H
0003 E0                MOVX    A,@DPTR
0004 900000      R     MOV     DPTR,#cyPmBackup+0CH
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 62  

0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1586
0008 905A02            MOV     DPTR,#05A02H
000B E0                MOVX    A,@DPTR
000C 900000      R     MOV     DPTR,#cyPmBackup+0DH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1587
0010 905A03            MOV     DPTR,#05A03H
0013 E0                MOVX    A,@DPTR
0014 900000      R     MOV     DPTR,#cyPmBackup+0EH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1588
0018 905A04            MOV     DPTR,#05A04H
001B E0                MOVX    A,@DPTR
001C 900000      R     MOV     DPTR,#cyPmBackup+0FH
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1589
0020 905A06            MOV     DPTR,#05A06H
0023 E0                MOVX    A,@DPTR
0024 900000      R     MOV     DPTR,#cyPmBackup+010H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1590
0028 905A08            MOV     DPTR,#05A08H
002B E0                MOVX    A,@DPTR
002C 900000      R     MOV     DPTR,#cyPmBackup+011H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1591
0030 905A0A            MOV     DPTR,#05A0AH
0033 E0                MOVX    A,@DPTR
0034 900000      R     MOV     DPTR,#cyPmBackup+012H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1593
0038 905A10            MOV     DPTR,#05A10H
003B E0                MOVX    A,@DPTR
003C 900000      R     MOV     DPTR,#cyPmBackup+013H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1594
0040 905A12            MOV     DPTR,#05A12H
0043 E0                MOVX    A,@DPTR
0044 900000      R     MOV     DPTR,#cyPmBackup+014H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1595
0048 905A13            MOV     DPTR,#05A13H
004B E0                MOVX    A,@DPTR
004C 900000      R     MOV     DPTR,#cyPmBackup+015H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1596
0050 905A14            MOV     DPTR,#05A14H
0053 E0                MOVX    A,@DPTR
0054 900000      R     MOV     DPTR,#cyPmBackup+016H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1597
0058 905A16            MOV     DPTR,#05A16H
005B E0                MOVX    A,@DPTR
005C 900000      R     MOV     DPTR,#cyPmBackup+017H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1598
0060 905A18            MOV     DPTR,#05A18H
0063 E0                MOVX    A,@DPTR
0064 900000      R     MOV     DPTR,#cyPmBackup+018H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1599
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 63  

0068 905A1A            MOV     DPTR,#05A1AH
006B E0                MOVX    A,@DPTR
006C 900000      R     MOV     DPTR,#cyPmBackup+019H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1601
0070 905A20            MOV     DPTR,#05A20H
0073 E0                MOVX    A,@DPTR
0074 900000      R     MOV     DPTR,#cyPmBackup+01AH
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1602
0078 905A22            MOV     DPTR,#05A22H
007B E0                MOVX    A,@DPTR
007C 900000      R     MOV     DPTR,#cyPmBackup+01BH
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1603
0080 905A23            MOV     DPTR,#05A23H
0083 E0                MOVX    A,@DPTR
0084 900000      R     MOV     DPTR,#cyPmBackup+01CH
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1604
0088 905A24            MOV     DPTR,#05A24H
008B E0                MOVX    A,@DPTR
008C 900000      R     MOV     DPTR,#cyPmBackup+01DH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1605
0090 905A26            MOV     DPTR,#05A26H
0093 E0                MOVX    A,@DPTR
0094 900000      R     MOV     DPTR,#cyPmBackup+01EH
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1606
0098 905A28            MOV     DPTR,#05A28H
009B E0                MOVX    A,@DPTR
009C 900000      R     MOV     DPTR,#cyPmBackup+01FH
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1607
00A0 905A2A            MOV     DPTR,#05A2AH
00A3 E0                MOVX    A,@DPTR
00A4 900000      R     MOV     DPTR,#cyPmBackup+020H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1609
00A8 905A30            MOV     DPTR,#05A30H
00AB E0                MOVX    A,@DPTR
00AC 900000      R     MOV     DPTR,#cyPmBackup+021H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1610
00B0 905A32            MOV     DPTR,#05A32H
00B3 E0                MOVX    A,@DPTR
00B4 900000      R     MOV     DPTR,#cyPmBackup+022H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1611
00B8 905A33            MOV     DPTR,#05A33H
00BB E0                MOVX    A,@DPTR
00BC 900000      R     MOV     DPTR,#cyPmBackup+023H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1612
00C0 905A34            MOV     DPTR,#05A34H
00C3 E0                MOVX    A,@DPTR
00C4 900000      R     MOV     DPTR,#cyPmBackup+024H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1613
00C8 905A36            MOV     DPTR,#05A36H
00CB E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 64  

00CC 900000      R     MOV     DPTR,#cyPmBackup+025H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1614
00D0 905A38            MOV     DPTR,#05A38H
00D3 E0                MOVX    A,@DPTR
00D4 900000      R     MOV     DPTR,#cyPmBackup+026H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1615
00D8 905A3A            MOV     DPTR,#05A3AH
00DB E0                MOVX    A,@DPTR
00DC 900000      R     MOV     DPTR,#cyPmBackup+027H
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1617
00E0 905A00            MOV     DPTR,#05A00H
00E3 E4                CLR     A
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1618
00E5 905A02            MOV     DPTR,#05A02H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1619
00E9 A3                INC     DPTR
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1620
00EB A3                INC     DPTR
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1621
00ED 905A06            MOV     DPTR,#05A06H
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1622
00F1 905A08            MOV     DPTR,#05A08H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1623
00F5 905A0A            MOV     DPTR,#05A0AH
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1625
00F9 905A10            MOV     DPTR,#05A10H
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1626
00FD 905A12            MOV     DPTR,#05A12H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1627
0101 A3                INC     DPTR
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1628
0103 A3                INC     DPTR
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1629
0105 905A16            MOV     DPTR,#05A16H
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1630
0109 905A18            MOV     DPTR,#05A18H
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1631
010D 905A1A            MOV     DPTR,#05A1AH
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1633
0111 905A20            MOV     DPTR,#05A20H
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1634
0115 905A22            MOV     DPTR,#05A22H
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1635
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 65  

0119 A3                INC     DPTR
011A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1636
011B A3                INC     DPTR
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1637
011D 905A26            MOV     DPTR,#05A26H
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1638
0121 905A28            MOV     DPTR,#05A28H
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1639
0125 905A2A            MOV     DPTR,#05A2AH
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1641
0129 905A30            MOV     DPTR,#05A30H
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1642
012D 905A32            MOV     DPTR,#05A32H
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1643
0131 A3                INC     DPTR
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1644
0133 A3                INC     DPTR
0134 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1645
0135 905A36            MOV     DPTR,#05A36H
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1646
0139 905A38            MOV     DPTR,#05A38H
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1647
013D 905A3A            MOV     DPTR,#05A3AH
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1655
0141 9046E8            MOV     DPTR,#046E8H
0144 E0                MOVX    A,@DPTR
0145 5404              ANL     A,#04H
0147 6022              JZ      ?C0113
                                           ; SOURCE LINE # 1656
                                           ; SOURCE LINE # 1658
0149 900000      R     MOV     DPTR,#cyPmBackup+04H
014C 7401              MOV     A,#01H
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1661
014F 90500B            MOV     DPTR,#0500BH
0152 E0                MOVX    A,@DPTR
0153 540E              ANL     A,#0EH
0155 900000      R     MOV     DPTR,#cyPmBackup+05H
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1664
0159 90500B            MOV     DPTR,#0500BH
015C E0                MOVX    A,@DPTR
015D 54F1              ANL     A,#0F1H
015F 440C              ORL     A,#0CH
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1668
0162 9046E8            MOV     DPTR,#046E8H
0165 E0                MOVX    A,@DPTR
0166 54FB              ANL     A,#0FBH
0168 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 66  

                                           ; SOURCE LINE # 1669
0169 8005              SJMP    ?C0114
016B         ?C0113:
                                           ; SOURCE LINE # 1671
                                           ; SOURCE LINE # 1673
016B E4                CLR     A
016C 900000      R     MOV     DPTR,#cyPmBackup+04H
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1674
0170         ?C0114:
                                           ; SOURCE LINE # 1683
0170 904322            MOV     DPTR,#04322H
0173 E0                MOVX    A,@DPTR
0174 5408              ANL     A,#08H
0176 600E              JZ      ?C0115
                                           ; SOURCE LINE # 1684
                                           ; SOURCE LINE # 1685
0178 900000      R     MOV     DPTR,#cyPmBackup+031H
017B 7401              MOV     A,#01H
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1686
017E 904322            MOV     DPTR,#04322H
0181 E0                MOVX    A,@DPTR
0182 54F7              ANL     A,#0F7H
0184 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1687
0185 22                RET     
0186         ?C0115:
                                           ; SOURCE LINE # 1689
                                           ; SOURCE LINE # 1690
0186 E4                CLR     A
0187 900000      R     MOV     DPTR,#cyPmBackup+031H
018A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1691
                                           ; SOURCE LINE # 1692
018B         ?C0117:
018B 22                RET     
             ; FUNCTION CyPmHibSlpSaveSet (END)

             ; FUNCTION CyPmHibSlpRestore (BEGIN)
                                           ; SOURCE LINE # 1713
                                           ; SOURCE LINE # 1714
                                           ; SOURCE LINE # 1716
0000 900000      R     MOV     DPTR,#cyPmBackup+0CH
0003 E0                MOVX    A,@DPTR
0004 905A00            MOV     DPTR,#05A00H
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1717
0008 900000      R     MOV     DPTR,#cyPmBackup+0DH
000B E0                MOVX    A,@DPTR
000C 905A02            MOV     DPTR,#05A02H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1718
0010 900000      R     MOV     DPTR,#cyPmBackup+0EH
0013 E0                MOVX    A,@DPTR
0014 905A03            MOV     DPTR,#05A03H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1719
0018 900000      R     MOV     DPTR,#cyPmBackup+0FH
001B E0                MOVX    A,@DPTR
001C 905A04            MOV     DPTR,#05A04H
001F F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 67  

                                           ; SOURCE LINE # 1720
0020 900000      R     MOV     DPTR,#cyPmBackup+010H
0023 E0                MOVX    A,@DPTR
0024 905A06            MOV     DPTR,#05A06H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1721
0028 900000      R     MOV     DPTR,#cyPmBackup+011H
002B E0                MOVX    A,@DPTR
002C 905A08            MOV     DPTR,#05A08H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1722
0030 900000      R     MOV     DPTR,#cyPmBackup+012H
0033 E0                MOVX    A,@DPTR
0034 905A0A            MOV     DPTR,#05A0AH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1724
0038 900000      R     MOV     DPTR,#cyPmBackup+013H
003B E0                MOVX    A,@DPTR
003C 905A10            MOV     DPTR,#05A10H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1725
0040 900000      R     MOV     DPTR,#cyPmBackup+014H
0043 E0                MOVX    A,@DPTR
0044 905A12            MOV     DPTR,#05A12H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1726
0048 900000      R     MOV     DPTR,#cyPmBackup+015H
004B E0                MOVX    A,@DPTR
004C 905A13            MOV     DPTR,#05A13H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1727
0050 900000      R     MOV     DPTR,#cyPmBackup+016H
0053 E0                MOVX    A,@DPTR
0054 905A14            MOV     DPTR,#05A14H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1728
0058 900000      R     MOV     DPTR,#cyPmBackup+017H
005B E0                MOVX    A,@DPTR
005C 905A16            MOV     DPTR,#05A16H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1729
0060 900000      R     MOV     DPTR,#cyPmBackup+018H
0063 E0                MOVX    A,@DPTR
0064 905A18            MOV     DPTR,#05A18H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1730
0068 900000      R     MOV     DPTR,#cyPmBackup+019H
006B E0                MOVX    A,@DPTR
006C 905A1A            MOV     DPTR,#05A1AH
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1732
0070 900000      R     MOV     DPTR,#cyPmBackup+01AH
0073 E0                MOVX    A,@DPTR
0074 905A20            MOV     DPTR,#05A20H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1733
0078 900000      R     MOV     DPTR,#cyPmBackup+01BH
007B E0                MOVX    A,@DPTR
007C 905A22            MOV     DPTR,#05A22H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1734
0080 900000      R     MOV     DPTR,#cyPmBackup+01CH
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 68  

0083 E0                MOVX    A,@DPTR
0084 905A23            MOV     DPTR,#05A23H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1735
0088 900000      R     MOV     DPTR,#cyPmBackup+01DH
008B E0                MOVX    A,@DPTR
008C 905A24            MOV     DPTR,#05A24H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1736
0090 900000      R     MOV     DPTR,#cyPmBackup+01EH
0093 E0                MOVX    A,@DPTR
0094 905A26            MOV     DPTR,#05A26H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1737
0098 900000      R     MOV     DPTR,#cyPmBackup+01FH
009B E0                MOVX    A,@DPTR
009C 905A28            MOV     DPTR,#05A28H
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1738
00A0 900000      R     MOV     DPTR,#cyPmBackup+020H
00A3 E0                MOVX    A,@DPTR
00A4 905A2A            MOV     DPTR,#05A2AH
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1740
00A8 900000      R     MOV     DPTR,#cyPmBackup+021H
00AB E0                MOVX    A,@DPTR
00AC 905A30            MOV     DPTR,#05A30H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1741
00B0 900000      R     MOV     DPTR,#cyPmBackup+022H
00B3 E0                MOVX    A,@DPTR
00B4 905A32            MOV     DPTR,#05A32H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1742
00B8 900000      R     MOV     DPTR,#cyPmBackup+023H
00BB E0                MOVX    A,@DPTR
00BC 905A33            MOV     DPTR,#05A33H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1743
00C0 900000      R     MOV     DPTR,#cyPmBackup+024H
00C3 E0                MOVX    A,@DPTR
00C4 905A34            MOV     DPTR,#05A34H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1744
00C8 900000      R     MOV     DPTR,#cyPmBackup+025H
00CB E0                MOVX    A,@DPTR
00CC 905A36            MOV     DPTR,#05A36H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1745
00D0 900000      R     MOV     DPTR,#cyPmBackup+026H
00D3 E0                MOVX    A,@DPTR
00D4 905A38            MOV     DPTR,#05A38H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1746
00D8 900000      R     MOV     DPTR,#cyPmBackup+027H
00DB E0                MOVX    A,@DPTR
00DC 905A3A            MOV     DPTR,#05A3AH
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1752
00E0 900000      R     MOV     DPTR,#cyPmBackup+04H
00E3 E0                MOVX    A,@DPTR
00E4 B40117            CJNE    A,#01H,?C0118
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 69  

                                           ; SOURCE LINE # 1753
                                           ; SOURCE LINE # 1755
00E7 90500B            MOV     DPTR,#0500BH
00EA E0                MOVX    A,@DPTR
00EB 54F1              ANL     A,#0F1H
00ED FF                MOV     R7,A
00EE 900000      R     MOV     DPTR,#cyPmBackup+05H
00F1 E0                MOVX    A,@DPTR
00F2 4F                ORL     A,R7
00F3 90500B            MOV     DPTR,#0500BH
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1759
00F7 9046E8            MOV     DPTR,#046E8H
00FA E0                MOVX    A,@DPTR
00FB 4404              ORL     A,#04H
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1760
00FE         ?C0118:
                                           ; SOURCE LINE # 1766
00FE 900000      R     MOV     DPTR,#cyPmBackup+031H
0101 E0                MOVX    A,@DPTR
0102 B40107            CJNE    A,#01H,?C0120
                                           ; SOURCE LINE # 1767
                                           ; SOURCE LINE # 1768
0105 904322            MOV     DPTR,#04322H
0108 E0                MOVX    A,@DPTR
0109 4408              ORL     A,#08H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1769
                                           ; SOURCE LINE # 1770
010C         ?C0120:
010C 22                RET     
             ; FUNCTION CyPmHibSlpRestore (END)

             ; FUNCTION CyPmHviLviSaveDisable (BEGIN)
                                           ; SOURCE LINE # 1790
                                           ; SOURCE LINE # 1791
                                           ; SOURCE LINE # 1792
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 6027              JZ      ?C0121
                                           ; SOURCE LINE # 1793
                                           ; SOURCE LINE # 1794
0008 900000      R     MOV     DPTR,#cyPmBackup+028H
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1795
000E 9046F4            MOV     DPTR,#046F4H
0011 E0                MOVX    A,@DPTR
0012 540F              ANL     A,#0FH
0014 900000      R     MOV     DPTR,#cyPmBackup+029H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1798
0018 9046F7            MOV     DPTR,#046F7H
001B E0                MOVX    A,@DPTR
001C 5440              ANL     A,#040H
001E 7003              JNZ     ?C0122
0020 FF                MOV     R7,A
0021 8002              SJMP    ?C0123
0023         ?C0122:
0023 7F01              MOV     R7,#01H
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 70  

0025         ?C0123:
0025 900000      R     MOV     DPTR,#cyPmBackup+02DH
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1801
002A 120000      E     LCALL   CyVdLvDigitDisable
                                           ; SOURCE LINE # 1802
002D 8005              SJMP    ?C0124
002F         ?C0121:
                                           ; SOURCE LINE # 1804
                                           ; SOURCE LINE # 1805
002F E4                CLR     A
0030 900000      R     MOV     DPTR,#cyPmBackup+028H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1806
0034         ?C0124:
                                           ; SOURCE LINE # 1808
0034 9046F5            MOV     DPTR,#046F5H
0037 E0                MOVX    A,@DPTR
0038 5402              ANL     A,#02H
003A 6029              JZ      ?C0125
                                           ; SOURCE LINE # 1809
                                           ; SOURCE LINE # 1810
003C 900000      R     MOV     DPTR,#cyPmBackup+02AH
003F 7401              MOV     A,#01H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1811
0042 9046F4            MOV     DPTR,#046F4H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 C4                SWAP    A
0048 540F              ANL     A,#0FH
004A 900000      R     MOV     DPTR,#cyPmBackup+02BH
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1814
004E 9046F7            MOV     DPTR,#046F7H
0051 E0                MOVX    A,@DPTR
0052 5480              ANL     A,#080H
0054 7003              JNZ     ?C0126
0056 FF                MOV     R7,A
0057 8002              SJMP    ?C0127
0059         ?C0126:
0059 7F01              MOV     R7,#01H
005B         ?C0127:
005B 900000      R     MOV     DPTR,#cyPmBackup+02EH
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1817
0060 120000      E     LCALL   CyVdLvAnalogDisable
                                           ; SOURCE LINE # 1818
0063 8005              SJMP    ?C0128
0065         ?C0125:
                                           ; SOURCE LINE # 1820
                                           ; SOURCE LINE # 1821
0065 E4                CLR     A
0066 900000      R     MOV     DPTR,#cyPmBackup+02AH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1822
006A         ?C0128:
                                           ; SOURCE LINE # 1824
006A 9046F5            MOV     DPTR,#046F5H
006D E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 71  

006E 5404              ANL     A,#04H
0070 600A              JZ      ?C0129
                                           ; SOURCE LINE # 1825
                                           ; SOURCE LINE # 1826
0072 900000      R     MOV     DPTR,#cyPmBackup+02CH
0075 7401              MOV     A,#01H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1827
0078 120000      E     LCALL   CyVdHvAnalogDisable
                                           ; SOURCE LINE # 1828
007B 22                RET     
007C         ?C0129:
                                           ; SOURCE LINE # 1830
                                           ; SOURCE LINE # 1831
007C E4                CLR     A
007D 900000      R     MOV     DPTR,#cyPmBackup+02CH
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1832
                                           ; SOURCE LINE # 1833
0081         ?C0131:
0081 22                RET     
             ; FUNCTION CyPmHviLviSaveDisable (END)

             ; FUNCTION CyPmHviLviRestore (BEGIN)
                                           ; SOURCE LINE # 1853
                                           ; SOURCE LINE # 1854
                                           ; SOURCE LINE # 1856
0000 900000      R     MOV     DPTR,#cyPmBackup+028H
0003 E0                MOVX    A,@DPTR
0004 B4010D            CJNE    A,#01H,?C0132
                                           ; SOURCE LINE # 1857
                                           ; SOURCE LINE # 1858
0007 900000      R     MOV     DPTR,#cyPmBackup+02DH
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
000C 900000      R     MOV     DPTR,#cyPmBackup+029H
000F E0                MOVX    A,@DPTR
0010 FD                MOV     R5,A
0011 120000      E     LCALL   _CyVdLvDigitEnable
                                           ; SOURCE LINE # 1859
0014         ?C0132:
                                           ; SOURCE LINE # 1861
0014 900000      R     MOV     DPTR,#cyPmBackup+02AH
0017 E0                MOVX    A,@DPTR
0018 B4010D            CJNE    A,#01H,?C0133
                                           ; SOURCE LINE # 1862
                                           ; SOURCE LINE # 1863
001B 900000      R     MOV     DPTR,#cyPmBackup+02EH
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#cyPmBackup+02BH
0023 E0                MOVX    A,@DPTR
0024 FD                MOV     R5,A
0025 120000      E     LCALL   _CyVdLvAnalogEnable
                                           ; SOURCE LINE # 1864
0028         ?C0133:
                                           ; SOURCE LINE # 1866
0028 900000      R     MOV     DPTR,#cyPmBackup+02CH
002B E0                MOVX    A,@DPTR
002C B40103            CJNE    A,#01H,?C0135
                                           ; SOURCE LINE # 1867
                                           ; SOURCE LINE # 1868
C51 COMPILER V9.51   CYPM                                                                  04/19/2015 19:43:11 PAGE 72  

002F 120000      E     LCALL   CyVdHvAnalogEnable
                                           ; SOURCE LINE # 1869
                                           ; SOURCE LINE # 1870
0032         ?C0135:
0032 22                RET     
             ; FUNCTION CyPmHviLviRestore (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3058    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     67      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
