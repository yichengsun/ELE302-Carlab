C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Release\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051\DP8051_Keil_951
                    -\Release/main.lst) CD OT(8,SIZE) OJ(.\DP8051\DP8051_Keil_951\Release\main.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          #include <project.h>
   2          #include <stdio.h>
   3          
   4          #define INCH_PER_MAGNET 1.58
   5          #define SEC_PER_PERIOD 357.914
   6          #define EXPECTED_SPEED 3.5
   7          #define THREE_FT_DUTY 900
   8          #define CENTER_DUTY 4560 
   9          
  10          #define Kp 5250
  11          #define Ki 400
  12          #define Kd 0
  13          
  14          #define Kp_steer 100
  15          #define Ki_steer 50
  16          #define Kd_steer 0
  17          
  18          double gprev_HE_count = 0;
  19          int gfirst_HE_read = 1;
  20          int gspeedMeasurements = 0;
  21          double gcurSpeed = 0;
  22          double speedCounts[5];
  23          double gki_speederror = 0;
  24          double gki_steererror = 0;
  25          int glinepos = 0;
  26          
  27          int gnum_line_reads = 0;
  28          double gblack_pos_first_diff = 0;
  29          double gblack_pos_second_diff = 0;
  30          double gblack_totalpos_diff = 0;
  31          int gCounterNReads = 0;
  32          int gblackcount = 0;
  33          
  34          //Averages out speed for the last wheel rotation to even out magnet spacing
  35          double getSpeedAvg(double speeds[]){
  36   1          double counter = 0;
  37   1          uint32 i = 0;
  38   1          uint32 size = 5;
  39   1          if (gspeedMeasurements < 5) {
  40   2              size = gspeedMeasurements;
  41   2          }
  42   1          for (i = 0; i < size; i++){
  43   2              counter = counter + speeds[i];   
  44   2          }
  45   1          return counter/(double)size;
  46   1      }
  47          
  48          //Grab current speed via unit conversions
  49          double getCurSpeed(){
  50   1          double current_Speed = 0;
  51   1          //average clock tix b/w two magnets in one rotation
  52   1          current_Speed = getSpeedAvg(speedCounts);
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 2   

  53   1          //average sec elapsed b/w two magnets
  54   1          current_Speed = (double)current_Speed/HE_TIMER_ReadPeriod() * SEC_PER_PERIOD;
  55   1          //average speed b/w two magnets
  56   1          current_Speed = (double)INCH_PER_MAGNET/current_Speed/12;
  57   1          // return (double)current_Speed;
  58   1          return current_Speed;
  59   1      }
  60          
  61          CY_ISR(FRAME_inter) {
  62   1          //LCD_PrintString("Frame start");
  63   1          LINE_COUNTER_Start();
  64   1          //gCounterNReads = 0;
  65   1      }
  66          
  67          //CY_ISR(COUNTER_N_inter) {
  68          //    LINE_COUNTER_ReadStatusRegister();
  69          //    
  70          //    if (gCounterNReads == 2){
  71          //        LINE_COUNTER_Stop();   
  72          //    }
  73          //    else if (gCounterNReads == 0) {
  74          //        int multiples = 20+80;
  75          //        LINE_COUNTER_WriteCompare(multiples);
  76          //    } 
  77          //    gCounterNReads += 1;
  78          //}
  79          
  80          CY_ISR(SEC_TIL_BLACK_TIMER_inter) {
  81   1          uint32 firstpos;
  82   1          uint32 secondpos;
  83   1      
  84   1          SEC_TIL_BLACK_TIMER_ReadStatusRegister();
  85   1          
  86   1          LINE_COUNTER_Stop();
  87   1          firstpos = SEC_TIL_BLACK_TIMER_ReadCapture();
  88   1          secondpos = SEC_TIL_BLACK_TIMER_ReadCapture();
  89   1          
  90   1          gblack_totalpos_diff = (double)(firstpos - secondpos);
  91   1      //    if (gnum_line_reads == 0) {
  92   1      //        gnum_line_reads = 1;
  93   1      //        gblack_pos_first_diff = (double)(firstpos - secondpos);
  94   1      //    } else {
  95   1      //        gnum_line_reads = 0;
  96   1      //        gblack_pos_second_diff = (double)(firstpos - secondpos);
  97   1      //        gblack_totalpos_diff = gblack_pos_first_diff - gblack_pos_second_diff;
  98   1      //    }
  99   1          
 100   1          //LCD_ClearDisplay();
 101   1          //LCD_PrintNumber(gblack_totalpos_diff);
 102   1      }
 103          
 104          //Interrupt on each hall effect sensor passing by to update speed and PWM duty cycle
 105          CY_ISR(HE_inter) {
 106   1      //    double curr_HE_count = 0;
 107   1      //    double time_diff = 0;
 108   1      //    double time_diff_s = 0;
 109   1      //    double error = 0;
 110   1      //    double PID_speed = 0;
 111   1      //    char buffer[15];
 112   1      //    double duty_cycle_buffer = 0;
 113   1      //    uint16 duty_cycle = 0;
 114   1      //    
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 3   

 115   1      //    //Special first time read   
 116   1      //    if (gfirst_HE_read == 1) {
 117   1      //        gprev_HE_count = HE_TIMER_ReadCounter();
 118   1      //        gfirst_HE_read = 0;
 119   1      //    } 
 120   1      //    else {
 121   1      //        curr_HE_count = HE_TIMER_ReadCounter();
 122   1      //        if (gprev_HE_count < curr_HE_count) {
 123   1      //            gprev_HE_count = gprev_HE_count + HE_TIMER_ReadPeriod();
 124   1      //        }
 125   1      //
 126   1      //        //Calculate the time difference between each magnet passing by
 127   1      //        time_diff = gprev_HE_count - curr_HE_count;
 128   1      //        time_diff_s = time_diff/HE_TIMER_ReadPeriod() * SEC_PER_PERIOD;
 129   1      //        
 130   1      //        speedCounts[gspeedMeasurements%5] = time_diff;
 131   1      //        gspeedMeasurements++;
 132   1      //        gcurSpeed = getCurSpeed();
 133   1      //        gprev_HE_count = curr_HE_count;
 134   1      //        //Calculate the error for feedback 
 135   1      //        error = EXPECTED_SPEED - gcurSpeed;
 136   1      //        //Accumulate past errors for Ki
 137   1      //        gki_speederror = gki_speederror+error*time_diff_s;
 138   1      //        // Discard saved error from acceleration as it becomes less relevant after starting
 139   1      //        if (gspeedMeasurements == 28) gki_speederror = 0;
 140   1      //        //Calculate the duty cycle based upon Kp, Ki, and Kd
 141   1      //        duty_cycle_buffer = THREE_FT_DUTY + Kp*error + Ki*gki_speederror + Kd*error/time_diff_s;
 142   1      //        
 143   1      //        //LCD output for debugging
 144   1      //        LCD_ClearDisplay();
 145   1      //        LCD_Position(0,0);
 146   1      //        sprintf(buffer, "%f", error);        
 147   1      //        LCD_PrintString(buffer);
 148   1      //        LCD_PrintString("//");
 149   1      //        sprintf(buffer, "%f", Kd*error/time_diff_s);
 150   1      //        LCD_PrintString(buffer);
 151   1      //        
 152   1      //        //Have in place error checking to ensure duty cycle goes to 1 if negative and caps at a 
 153   1      //        //certain duty cycle to prevent sporadic  behavior
 154   1      //        if (duty_cycle_buffer > 4000){
 155   1      //            duty_cycle_buffer = 1350;   
 156   1      //        }
 157   1      //        if (duty_cycle_buffer <= 0) duty_cycle_buffer = 1;
 158   1      //        duty_cycle = duty_cycle_buffer;
 159   1      //        
 160   1      //        //more LCD debugging code
 161   1      //        LCD_Position(1, 0);
 162   1      //        //sprintf(buffer, "%f", duty_cycle);
 163   1      //        LCD_PrintNumber(duty_cycle);
 164   1      //        MOTOR_PWM_WriteCompare(duty_cycle);
 165   1      //    }
 166   1          double error;   
 167   1          double duty_cycle_buffer;
 168   1          uint16 duty_cycle;
 169   1          char buffer[10];
 170   1          
 171   1         // UPDATE_STEERING_TIMER_ReadStatusRegister();
 172   1          
 173   1          //Calculate the error for feedback 
 174   1          error = gblack_totalpos_diff / SEC_TIL_BLACK_TIMER_ReadPeriod() * 179 * 1000000 - 65/2.0;
 175   1              //Accumulate past errors for Ki
 176   1          // left max 3600; center 4560; right max 5800
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 4   

 177   1          gki_steererror = gki_steererror+error*.000011;
 178   1          duty_cycle_buffer = CENTER_DUTY - Kp_steer*error; //+ Ki_steer*gki_steererror;
 179   1      
 180   1          //Have in place error checking to prevent sporadic  behavior
 181   1          if (duty_cycle_buffer > 5600){
 182   2              duty_cycle_buffer = 5600;   
 183   2          }
 184   1          if (duty_cycle_buffer <= 3600) {
 185   2              duty_cycle_buffer = 3600;
 186   2          }
 187   1          duty_cycle = duty_cycle_buffer;
 188   1      
 189   1              //LCD output for debugging
 190   1          LCD_ClearDisplay();
 191   1          LCD_Position(0,0);
 192   1          sprintf(buffer, "%f", error);        
 193   1          LCD_PrintString(buffer);
 194   1          
 195   1      //     //more LCD debugging code
 196   1      //    LCD_Position(1, 0);
 197   1      //     //sprintf(buffer, "%f", duty_cycle);
 198   1      //    LCD_PrintNumber(duty_cycle);
 199   1      
 200   1          STEERING_PWM_WriteCompare(duty_cycle);
 201   1      }
 202          
 203          /*CY_ISR(UPDATE_STEERING_inter) {
 204              double error;   
 205              double duty_cycle_buffer;
 206              uint16 duty_cycle;
 207              char buffer[10];
 208              
 209              //UPDATE_STEERING_TIMER_ReadStatusRegister();
 210              
 211              //Calculate the error for feedback 
 212              error = gblack_totalpos_diff;
 213                  //Accumulate past errors for Ki
 214              // left max 3600; center 4560; right max 5800
 215              gki_steererror = gki_steererror+error*.000011;
 216              duty_cycle_buffer = CENTER_DUTY + Kp_steer*error; //+ Ki_steer*gki_steererror;
 217          
 218              //Have in place error checking to prevent sporadic  behavior
 219              if (duty_cycle_buffer > 5600){
 220                  duty_cycle_buffer = 5600;   
 221              }
 222              if (duty_cycle_buffer <= 3600) {
 223                  duty_cycle_buffer = 3600;
 224              }
 225              duty_cycle = duty_cycle_buffer;
 226          
 227                  //LCD output for debugging
 228          //    LCD_ClearDisplay();
 229          //    LCD_Position(0,0);
 230          //    sprintf(buffer, "%f", error);        
 231          //    LCD_PrintString(buffer);
 232              
 233          //     //more LCD debugging code
 234          //    LCD_Position(1, 0);
 235          //     //sprintf(buffer, "%f", duty_cycle);
 236          //    LCD_PrintNumber(duty_cycle);
 237          
 238              STEERING_PWM_WriteCompare(duty_cycle);
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 5   

 239          }
 240          */
 241          
 242          int main()
 243          {
 244   1          //initialize all modules
 245   1          CYGlobalIntEnable;  
 246   1          HE_TIMER_Start();
 247   1          HE_ISR_Start();
 248   1          HE_ISR_SetVector(HE_inter);
 249   1          MOTOR_PWM_Start();
 250   1          MOTOR_PWM_CLK_Start();
 251   1          
 252   1          FRAME_ISR_Start();
 253   1          FRAME_ISR_SetVector(FRAME_inter);
 254   1          //COUNTER_N_ISR_Start();
 255   1          //COUNTER_N_ISR_SetVector(COUNTER_N_inter);   
 256   1          SEC_TIL_BLACK_TIMER_Start();
 257   1          SEC_TIL_BLACK_TIMER_ISR_Start();
 258   1          SEC_TIL_BLACK_TIMER_ISR_SetVector(SEC_TIL_BLACK_TIMER_inter);
 259   1          
 260   1          //UPDATE_STEERING_TIMER_Start();
 261   1          //UPDATE_STEERING_ISR_Start();
 262   1          //UPDATE_STEERING_ISR_SetVector(UPDATE_STEERING_inter);
 263   1          
 264   1          STEERING_PWM_Start();
 265   1          STEERING_PWM_CLK_Start();
 266   1          
 267   1          LCD_Start();
 268   1          LCD_Position(0,0);
 269   1          LCD_PrintString("ELE302 Carlab");
 270   1          
 271   1          for(;;)
 272   1          {
 273   2          }
 274   1      }
 275          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _getSpeedAvg (BEGIN)
                                           ; SOURCE LINE # 35
0000 900000      R     MOV     DPTR,#speeds
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 36
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008 FE                MOV     R6,A
0009 FD                MOV     R5,A
000A FC                MOV     R4,A
000B 900000      R     MOV     DPTR,#counter
000E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 37
0011 E4                CLR     A
0012 FF                MOV     R7,A
0013 FE                MOV     R6,A
0014 FD                MOV     R5,A
0015 FC                MOV     R4,A
0016 900000      R     MOV     DPTR,#i
0019 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 38
001C E4                CLR     A
001D 7F05              MOV     R7,#05H
001F FE                MOV     R6,A
0020 FD                MOV     R5,A
0021 FC                MOV     R4,A
0022 900000      R     MOV     DPTR,#size
0025 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 39
0028 900000      R     MOV     DPTR,#gspeedMeasurements
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 C3                CLR     C
0031 9405              SUBB    A,#05H
0033 EE                MOV     A,R6
0034 6480              XRL     A,#080H
0036 9480              SUBB    A,#080H
0038 500C              JNC     ?C0001
                                           ; SOURCE LINE # 40
003A EE                MOV     A,R6
003B 33                RLC     A
003C 95E0              SUBB    A,ACC
003E FD                MOV     R5,A
003F FC                MOV     R4,A
0040 900000      R     MOV     DPTR,#size
0043 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 41
0046         ?C0001:
                                           ; SOURCE LINE # 42
0046 E4                CLR     A
0047 FF                MOV     R7,A
0048 FE                MOV     R6,A
0049 FD                MOV     R5,A
004A FC                MOV     R4,A
004B 900000      R     MOV     DPTR,#i
004E 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 7   

0051         ?C0002:
0051 900000      R     MOV     DPTR,#size
0054 120000      E     LCALL   ?C?LLDXDATA
0057 900000      R     MOV     DPTR,#i
005A 120000      E     LCALL   ?C?LLDXDATA0
005D C3                CLR     C
005E 120000      E     LCALL   ?C?ULCMP
0061 5057              JNC     ?C0003
                                           ; SOURCE LINE # 43
0063 900000      R     MOV     DPTR,#counter
0066 120000      E     LCALL   ?C?LLDXDATA
0069 C004              PUSH    AR4
006B C005              PUSH    AR5
006D C006              PUSH    AR6
006F C007              PUSH    AR7
0071 E4                CLR     A
0072 7F04              MOV     R7,#04H
0074 FE                MOV     R6,A
0075 FD                MOV     R5,A
0076 FC                MOV     R4,A
0077 900000      R     MOV     DPTR,#i
007A 120000      E     LCALL   ?C?LLDXDATA0
007D 120000      E     LCALL   ?C?LMUL
0080 900000      R     MOV     DPTR,#speeds
0083 120000      E     LCALL   ?C?PLDXDATA
0086 E9                MOV     A,R1
0087 2F                ADD     A,R7
0088 F9                MOV     R1,A
0089 EA                MOV     A,R2
008A 3E                ADDC    A,R6
008B FA                MOV     R2,A
008C EB                MOV     A,R3
008D 3D                ADDC    A,R5
008E FB                MOV     R3,A
008F 120000      E     LCALL   ?C?LLDPTR0
0092 D007              POP     AR7
0094 D006              POP     AR6
0096 D005              POP     AR5
0098 D004              POP     AR4
009A 120000      E     LCALL   ?C?FPADD
009D 900000      R     MOV     DPTR,#counter
00A0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 44
00A3 900000      R     MOV     DPTR,#i
00A6 120000      E     LCALL   ?C?LLDXDATA
00A9 E4                CLR     A
00AA 7B01              MOV     R3,#01H
00AC FA                MOV     R2,A
00AD F9                MOV     R1,A
00AE F8                MOV     R0,A
00AF 120000      E     LCALL   ?C?LADD
00B2 900000      R     MOV     DPTR,#i
00B5 120000      E     LCALL   ?C?LSTXDATA
00B8 8097              SJMP    ?C0002
00BA         ?C0003:
                                           ; SOURCE LINE # 45
00BA 900000      R     MOV     DPTR,#size
00BD 120000      E     LCALL   ?C?LLDXDATA
00C0 E4                CLR     A
00C1 120000      E     LCALL   ?C?FCASTL
00C4 A804              MOV     R0,AR4
00C6 A905              MOV     R1,AR5
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 8   

00C8 AA06              MOV     R2,AR6
00CA AB07              MOV     R3,AR7
00CC 900000      R     MOV     DPTR,#counter
00CF 120000      E     LCALL   ?C?LLDXDATA
00D2 120000      E     LCALL   ?C?FPDIV
                                           ; SOURCE LINE # 46
00D5         ?C0005:
00D5 22                RET     
             ; FUNCTION _getSpeedAvg (END)

             ; FUNCTION getCurSpeed (BEGIN)
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 FE                MOV     R6,A
0003 FD                MOV     R5,A
0004 FC                MOV     R4,A
0005 900000      R     MOV     DPTR,#current_Speed
0008 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 52
000B 7B01              MOV     R3,#01H
000D 7A00        R     MOV     R2,#HIGH speedCounts
000F 7900        R     MOV     R1,#LOW speedCounts
0011 120000      R     LCALL   _getSpeedAvg
0014 900000      R     MOV     DPTR,#current_Speed
0017 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 54
001A 120000      E     LCALL   HE_TIMER_ReadPeriod
001D E4                CLR     A
001E 120000      E     LCALL   ?C?FCASTL
0021 A804              MOV     R0,AR4
0023 A905              MOV     R1,AR5
0025 AA06              MOV     R2,AR6
0027 AB07              MOV     R3,AR7
0029 900000      R     MOV     DPTR,#current_Speed
002C 120000      E     LCALL   ?C?LLDXDATA
002F 120000      E     LCALL   ?C?FPDIV
0032 7BFE              MOV     R3,#0FEH
0034 7AF4              MOV     R2,#0F4H
0036 79B2              MOV     R1,#0B2H
0038 7843              MOV     R0,#043H
003A 120000      E     LCALL   ?C?FPMUL
003D 900000      R     MOV     DPTR,#current_Speed
0040 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 56
0043 900000      R     MOV     DPTR,#current_Speed
0046 120000      E     LCALL   ?C?LLDXDATA0
0049 7F71              MOV     R7,#071H
004B 7E3D              MOV     R6,#03DH
004D 7DCA              MOV     R5,#0CAH
004F 7C3F              MOV     R4,#03FH
0051 120000      E     LCALL   ?C?FPDIV
0054 E4                CLR     A
0055 FB                MOV     R3,A
0056 FA                MOV     R2,A
0057 7940              MOV     R1,#040H
0059 7841              MOV     R0,#041H
005B 120000      E     LCALL   ?C?FPDIV
005E 900000      R     MOV     DPTR,#current_Speed
0061 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 58
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 9   

0064 900000      R     MOV     DPTR,#current_Speed
0067 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 59
006A         ?C0006:
006A 22                RET     
             ; FUNCTION getCurSpeed (END)

             ; FUNCTION FRAME_inter (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 63
002B 120000      E     LCALL   LINE_COUNTER_Start
                                           ; SOURCE LINE # 65
002E D007              POP     AR7
0030 D006              POP     AR6
0032 D005              POP     AR5
0034 D004              POP     AR4
0036 D003              POP     AR3
0038 D002              POP     AR2
003A D001              POP     AR1
003C D000              POP     AR0
003E D0D0              POP     PSW
0040 D000        E     POP     ?C?XPAGE1SFR
0042 D086              POP     DPS
0044 D084              POP     DPL1
0046 D085              POP     DPH1
0048 D082              POP     DPL
004A D083              POP     DPH
004C D0F0              POP     B
004E D0E0              POP     ACC
0050 32                RETI    
             ; FUNCTION FRAME_inter (END)

             ; FUNCTION SEC_TIL_BLACK_TIMER_inter (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 10  

0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 84
002B 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ReadStatusRegister
                                           ; SOURCE LINE # 86
002E 120000      E     LCALL   LINE_COUNTER_Stop
                                           ; SOURCE LINE # 87
0031 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ReadCapture
0034 900000      R     MOV     DPTR,#firstpos
0037 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 88
003A 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ReadCapture
;---- Variable 'secondpos' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 90
003D AB07              MOV     R3,AR7
003F AA06              MOV     R2,AR6
0041 A905              MOV     R1,AR5
0043 A804              MOV     R0,AR4
0045 900000      R     MOV     DPTR,#firstpos
0048 120000      E     LCALL   ?C?LLDXDATA
004B 120000      E     LCALL   ?C?LSUB
004E E4                CLR     A
004F 120000      E     LCALL   ?C?FCASTL
0052 900000      R     MOV     DPTR,#gblack_totalpos_diff
0055 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 102
0058 D007              POP     AR7
005A D006              POP     AR6
005C D005              POP     AR5
005E D004              POP     AR4
0060 D003              POP     AR3
0062 D002              POP     AR2
0064 D001              POP     AR1
0066 D000              POP     AR0
0068 D0D0              POP     PSW
006A D000        E     POP     ?C?XPAGE1SFR
006C D086              POP     DPS
006E D084              POP     DPL1
0070 D085              POP     DPH1
0072 D082              POP     DPL
0074 D083              POP     DPH
0076 D0F0              POP     B
0078 D0E0              POP     ACC
007A 32                RETI    
             ; FUNCTION SEC_TIL_BLACK_TIMER_inter (END)

             ; FUNCTION HE_inter (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 11  

000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 174
002B 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ReadPeriod
002E E4                CLR     A
002F 120000      E     LCALL   ?C?FCASTL
0032 A804              MOV     R0,AR4
0034 A905              MOV     R1,AR5
0036 AA06              MOV     R2,AR6
0038 AB07              MOV     R3,AR7
003A 900000      R     MOV     DPTR,#gblack_totalpos_diff
003D 120000      E     LCALL   ?C?LLDXDATA
0040 120000      E     LCALL   ?C?FPDIV
0043 7B2C              MOV     R3,#02CH
0045 7AB5              MOV     R2,#0B5H
0047 792A              MOV     R1,#02AH
0049 784D              MOV     R0,#04DH
004B 120000      E     LCALL   ?C?FPMUL
004E E4                CLR     A
004F FB                MOV     R3,A
0050 FA                MOV     R2,A
0051 7902              MOV     R1,#02H
0053 78C2              MOV     R0,#0C2H
0055 120000      E     LCALL   ?C?FPADD
0058 900000      R     MOV     DPTR,#error
005B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 177
005E 900000      R     MOV     DPTR,#gki_steererror
0061 120000      E     LCALL   ?C?LLDXDATA0
0064 C000              PUSH    AR0
0066 C001              PUSH    AR1
0068 C002              PUSH    AR2
006A C003              PUSH    AR3
006C 7FA4              MOV     R7,#0A4H
006E 7E8C              MOV     R6,#08CH
0070 7D38              MOV     R5,#038H
0072 7C37              MOV     R4,#037H
0074 900000      R     MOV     DPTR,#error
0077 120000      E     LCALL   ?C?LLDXDATA0
007A 120000      E     LCALL   ?C?FPMUL
007D D003              POP     AR3
007F D002              POP     AR2
0081 D001              POP     AR1
0083 D000              POP     AR0
0085 120000      E     LCALL   ?C?FPADD
0088 900000      R     MOV     DPTR,#gki_steererror
008B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 178
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 12  

008E E4                CLR     A
008F FF                MOV     R7,A
0090 FE                MOV     R6,A
0091 7DC8              MOV     R5,#0C8H
0093 7C42              MOV     R4,#042H
0095 900000      R     MOV     DPTR,#error
0098 120000      E     LCALL   ?C?LLDXDATA0
009B 120000      E     LCALL   ?C?FPMUL
009E A804              MOV     R0,AR4
00A0 A905              MOV     R1,AR5
00A2 AA06              MOV     R2,AR6
00A4 AB07              MOV     R3,AR7
00A6 7F00              MOV     R7,#00H
00A8 7E80              MOV     R6,#080H
00AA 7D8E              MOV     R5,#08EH
00AC 7C45              MOV     R4,#045H
00AE 120000      E     LCALL   ?C?FPSUB
00B1 900000      R     MOV     DPTR,#duty_cycle_buffer
00B4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 181
00B7 E4                CLR     A
00B8 FF                MOV     R7,A
00B9 FE                MOV     R6,A
00BA 7DAF              MOV     R5,#0AFH
00BC 7C45              MOV     R4,#045H
00BE 900000      R     MOV     DPTR,#duty_cycle_buffer
00C1 120000      E     LCALL   ?C?LLDXDATA0
00C4 120000      E     LCALL   ?C?FPCMP3
00C7 600F              JZ      ?C0009
00C9 400D              JC      ?C0009
                                           ; SOURCE LINE # 182
00CB E4                CLR     A
00CC FF                MOV     R7,A
00CD FE                MOV     R6,A
00CE 7DAF              MOV     R5,#0AFH
00D0 7C45              MOV     R4,#045H
00D2 900000      R     MOV     DPTR,#duty_cycle_buffer
00D5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 183
00D8         ?C0009:
                                           ; SOURCE LINE # 184
00D8 E4                CLR     A
00D9 FF                MOV     R7,A
00DA FE                MOV     R6,A
00DB 7D61              MOV     R5,#061H
00DD 7C45              MOV     R4,#045H
00DF 900000      R     MOV     DPTR,#duty_cycle_buffer
00E2 120000      E     LCALL   ?C?LLDXDATA0
00E5 120000      E     LCALL   ?C?FPCMP3
00E8 6002              JZ      $ + 4H
00EA 500D              JNC     ?C0010
                                           ; SOURCE LINE # 185
00EC E4                CLR     A
00ED FF                MOV     R7,A
00EE FE                MOV     R6,A
00EF 7D61              MOV     R5,#061H
00F1 7C45              MOV     R4,#045H
00F3 900000      R     MOV     DPTR,#duty_cycle_buffer
00F6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 186
00F9         ?C0010:
                                           ; SOURCE LINE # 187
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 13  

00F9 900000      R     MOV     DPTR,#duty_cycle_buffer
00FC 120000      E     LCALL   ?C?LLDXDATA
00FF 120000      E     LCALL   ?C?CASTF
0102 900000      R     MOV     DPTR,#duty_cycle
0105 EE                MOV     A,R6
0106 F0                MOVX    @DPTR,A
0107 A3                INC     DPTR
0108 EF                MOV     A,R7
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
010A 7F01              MOV     R7,#01H
010C 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 191
010F E4                CLR     A
0110 FD                MOV     R5,A
0111 FF                MOV     R7,A
0112 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 192
0115 7BFF              MOV     R3,#0FFH
0117 7A00        R     MOV     R2,#HIGH ?SC_0
0119 7900        R     MOV     R1,#LOW ?SC_0
011B 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
011E 120000      E     LCALL   ?C?PSTXDATA
0121 900000      R     MOV     DPTR,#error
0124 120000      E     LCALL   ?C?LLDXDATA
0127 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
012A 120000      E     LCALL   ?C?LSTXDATA
012D 7B01              MOV     R3,#01H
012F 7A00        R     MOV     R2,#HIGH buffer
0131 7900        R     MOV     R1,#LOW buffer
0133 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 193
0136 7B01              MOV     R3,#01H
0138 7A00        R     MOV     R2,#HIGH buffer
013A 7900        R     MOV     R1,#LOW buffer
013C 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 200
013F 900000      R     MOV     DPTR,#duty_cycle
0142 E0                MOVX    A,@DPTR
0143 FE                MOV     R6,A
0144 A3                INC     DPTR
0145 E0                MOVX    A,@DPTR
0146 FF                MOV     R7,A
0147 120000      E     LCALL   _STEERING_PWM_WriteCompare
                                           ; SOURCE LINE # 201
014A D007              POP     AR7
014C D006              POP     AR6
014E D005              POP     AR5
0150 D004              POP     AR4
0152 D003              POP     AR3
0154 D002              POP     AR2
0156 D001              POP     AR1
0158 D000              POP     AR0
015A D0D0              POP     PSW
015C D000        E     POP     ?C?XPAGE1SFR
015E D086              POP     DPS
0160 D084              POP     DPL1
0162 D085              POP     DPH1
0164 D082              POP     DPL
0166 D083              POP     DPH
0168 D0F0              POP     B
016A D0E0              POP     ACC
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 14  

016C 32                RETI    
             ; FUNCTION HE_inter (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 245
0000 D2AF              SETB    EA
0002 9044F4            MOV     DPTR,#044F4H
0005 74FD              MOV     A,#0FDH
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
0008 120000      E     LCALL   HE_TIMER_Start
                                           ; SOURCE LINE # 247
000B 120000      E     LCALL   HE_ISR_Start
                                           ; SOURCE LINE # 248
000E 7E00        R     MOV     R6,#HIGH HE_inter
0010 7F00        R     MOV     R7,#LOW HE_inter
0012 120000      E     LCALL   _HE_ISR_SetVector
                                           ; SOURCE LINE # 249
0015 120000      E     LCALL   MOTOR_PWM_Start
                                           ; SOURCE LINE # 250
0018 120000      E     LCALL   MOTOR_PWM_CLK_Start
                                           ; SOURCE LINE # 252
001B 120000      E     LCALL   FRAME_ISR_Start
                                           ; SOURCE LINE # 253
001E 7E00        R     MOV     R6,#HIGH FRAME_inter
0020 7F00        R     MOV     R7,#LOW FRAME_inter
0022 120000      E     LCALL   _FRAME_ISR_SetVector
                                           ; SOURCE LINE # 256
0025 120000      E     LCALL   SEC_TIL_BLACK_TIMER_Start
                                           ; SOURCE LINE # 257
0028 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ISR_Start
                                           ; SOURCE LINE # 258
002B 7E00        R     MOV     R6,#HIGH SEC_TIL_BLACK_TIMER_inter
002D 7F00        R     MOV     R7,#LOW SEC_TIL_BLACK_TIMER_inter
002F 120000      E     LCALL   _SEC_TIL_BLACK_TIMER_ISR_SetVector
                                           ; SOURCE LINE # 264
0032 120000      E     LCALL   STEERING_PWM_Start
                                           ; SOURCE LINE # 265
0035 120000      E     LCALL   STEERING_PWM_CLK_Start
                                           ; SOURCE LINE # 267
0038 120000      E     LCALL   LCD_Start
                                           ; SOURCE LINE # 268
003B E4                CLR     A
003C FD                MOV     R5,A
003D FF                MOV     R7,A
003E 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 269
0041 7BFF              MOV     R3,#0FFH
0043 7A00        R     MOV     R2,#HIGH ?SC_3
0045 7900        R     MOV     R1,#LOW ?SC_3
0047 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 271
004A         ?C0012:
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
004A 80FE              SJMP    ?C0012
004C 22                RET     
             ; FUNCTION main (END)


C51 COMPILER V9.51   MAIN                                                                  03/27/2015 00:59:00 PAGE 15  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    967    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =     60      43
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
