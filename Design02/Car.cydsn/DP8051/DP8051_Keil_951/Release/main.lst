C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Release\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051\DP8051_Keil_951
                    -\Release/main.lst) CD OT(8,SIZE) OJ(.\DP8051\DP8051_Keil_951\Release\main.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          #include <project.h>
   2          #include <stdio.h>
   3          
   4          #define INCH_PER_MAGNET 1.58
   5          #define SEC_PER_PERIOD 357.914
   6          #define EXPECTED_SPEED 3.5
   7          #define THREE_FT_DUTY 900
   8          #define CENTER_DUTY 4560 
   9          
  10          #define Kp 5250
  11          #define Ki 400
  12          #define Kd 0
  13          
  14          #define Kp_steer 100
  15          #define Ki_steer 50
  16          #define Kd_steer 0
  17          
  18          double gprev_HE_count = 0;
  19          int gfirst_HE_read = 1;
  20          int gspeedMeasurements = 0;
  21          double gcurSpeed = 0;
  22          double speedCounts[5];
  23          double gki_speederror = 0;
  24          double gki_steererror = 0;
  25          int glinepos = 0;
  26          
  27          int gnum_line_reads = 0;
  28          double gblack_pos_first_diff = 0;
  29          double gblack_pos_second_diff = 0;
  30          double gblack_totalpos_diff = 0;
  31          int gCounterNReads = 0;
  32          int gblackcount = 0;
  33          uint32 gfirstpos;
  34          uint32 gsecondpos;
  35          
  36          //Averages out speed for the last wheel rotation to even out magnet spacing
  37          double getSpeedAvg(double speeds[]){
  38   1          double counter = 0;
  39   1          uint32 i = 0;
  40   1          uint32 size = 5;
  41   1          if (gspeedMeasurements < 5) {
  42   2              size = gspeedMeasurements;
  43   2          }
  44   1          for (i = 0; i < size; i++){
  45   2              counter = counter + speeds[i];   
  46   2          }
  47   1          return counter/(double)size;
  48   1      }
  49          
  50          //Grab current speed via unit conversions
  51          double getCurSpeed(){
  52   1          double current_Speed = 0;
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 2   

  53   1          //average clock tix b/w two magnets in one rotation
  54   1          current_Speed = getSpeedAvg(speedCounts);
  55   1          //average sec elapsed b/w two magnets
  56   1          current_Speed = (double)current_Speed/HE_TIMER_ReadPeriod() * SEC_PER_PERIOD;
  57   1          //average speed b/w two magnets
  58   1          current_Speed = (double)INCH_PER_MAGNET/current_Speed/12;
  59   1          // return (double)current_Speed;
  60   1          return current_Speed;
  61   1      }
  62          
  63          //CY_ISR(COUNTER_N_inter) {
  64          //    LINE_COUNTER_ReadStatusRegister();
  65          //    
  66          //    if (gCounterNReads == 2){
  67          //        LINE_COUNTER_Stop();   
  68          //    }
  69          //    else if (gCounterNReads == 0) {
  70          //        int multiples = 20+80;
  71          //        LINE_COUNTER_WriteCompare(multiples);
  72          //    } 
  73          //    gCounterNReads += 1;
  74          //}
  75          
  76          CY_ISR(SEC_TIL_BLACK_TIMER_inter) {
  77   1          char buffer[15];
  78   1      
  79   1          
  80   1          gfirstpos = SEC_TIL_BLACK_TIMER_ReadCapture();
  81   1          gsecondpos = SEC_TIL_BLACK_TIMER_ReadCapture();
  82   1          gsecondpos = SEC_TIL_BLACK_TIMER_ReadCapture();
  83   1          SEC_TIL_BLACK_TIMER_ClearFIFO();
  84   1          
  85   1          gblack_totalpos_diff = (double)(gfirstpos - gsecondpos);
  86   1      //    if (gnum_line_reads == 0) {
  87   1      //        gnum_line_reads = 1;
  88   1      //        gblack_pos_first_diff = (double)(firstpos - secondpos);
  89   1      //    } else {
  90   1      //        gnum_line_reads = 0;
  91   1      //        gblack_pos_second_diff = (double)(firstpos - secondpos);
  92   1      //        gblack_totalpos_diff = gblack_pos_first_diff - gblack_pos_second_diff;
  93   1      //    }
  94   1              SEC_TIL_BLACK_TIMER_ReadStatusRegister();
  95   1      
  96   1          }
*** WARNING C280 IN LINE 77 OF .\main.c: 'buffer': unreferenced local variable
  97          
  98          //Interrupt on each hall effect sensor passing by to update speed and PWM duty cycle
  99          CY_ISR(HE_inter) {
 100   1      //    double curr_HE_count = 0;
 101   1      //    double time_diff = 0;
 102   1      //    double time_diff_s = 0;
 103   1      //    double error = 0;
 104   1      //    double PID_speed = 0;
 105   1      //    char buffer[15];
 106   1      //    double duty_cycle_buffer = 0;
 107   1      //    uint16 duty_cycle = 0;
 108   1      //    
 109   1      //    //Special first time read   
 110   1      //    if (gfirst_HE_read == 1) {
 111   1      //        gprev_HE_count = HE_TIMER_ReadCounter();
 112   1      //        gfirst_HE_read = 0;
 113   1      //    } 
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 3   

 114   1      //    else {
 115   1      //        curr_HE_count = HE_TIMER_ReadCounter();
 116   1      //        if (gprev_HE_count < curr_HE_count) {
 117   1      //            gprev_HE_count = gprev_HE_count + HE_TIMER_ReadPeriod();
 118   1      //        }
 119   1      //
 120   1      //        //Calculate the time difference between each magnet passing by
 121   1      //        time_diff = gprev_HE_count - curr_HE_count;
 122   1      //        time_diff_s = time_diff/HE_TIMER_ReadPeriod() * SEC_PER_PERIOD;
 123   1      //        
 124   1      //        speedCounts[gspeedMeasurements%5] = time_diff;
 125   1      //        gspeedMeasurements++;
 126   1      //        gcurSpeed = getCurSpeed();
 127   1      //        gprev_HE_count = curr_HE_count;
 128   1      //        //Calculate the error for feedback 
 129   1      //        error = EXPECTED_SPEED - gcurSpeed;
 130   1      //        //Accumulate past errors for Ki
 131   1      //        gki_speederror = gki_speederror+error*time_diff_s;
 132   1      //        // Discard saved error from acceleration as it becomes less relevant after starting
 133   1      //        if (gspeedMeasurements == 28) gki_speederror = 0;
 134   1      //        //Calculate the duty cycle based upon Kp, Ki, and Kd
 135   1      //        duty_cycle_buffer = THREE_FT_DUTY + Kp*error + Ki*gki_speederror + Kd*error/time_diff_s;
 136   1      //        
 137   1      //        //LCD output for debugging
 138   1      //        LCD_ClearDisplay();
 139   1      //        LCD_Position(0,0);
 140   1      //        sprintf(buffer, "%f", error);        
 141   1      //        LCD_PrintString(buffer);
 142   1      //        LCD_PrintString("//");
 143   1      //        sprintf(buffer, "%f", Kd*error/time_diff_s);
 144   1      //        LCD_PrintString(buffer);
 145   1      //        
 146   1      //        //Have in place error checking to ensure duty cycle goes to 1 if negative and caps at a 
 147   1      //        //certain duty cycle to prevent sporadic  behavior
 148   1      //        if (duty_cycle_buffer > 4000){
 149   1      //            duty_cycle_buffer = 1350;   
 150   1      //        }
 151   1      //        if (duty_cycle_buffer <= 0) duty_cycle_buffer = 1;
 152   1      //        duty_cycle = duty_cycle_buffer;
 153   1      //        
 154   1      //        //more LCD debugging code
 155   1      //        LCD_Position(1, 0);
 156   1      //        //sprintf(buffer, "%f", duty_cycle);
 157   1      //        LCD_PrintNumber(duty_cycle);
 158   1      //        MOTOR_PWM_WriteCompare(duty_cycle);
 159   1      //    }
 160   1          double error;   
 161   1          double duty_cycle_buffer;
 162   1          uint16 duty_cycle;
 163   1          char buffer[10];
 164   1          
 165   1         // UPDATE_STEERING_TIMER_ReadStatusRegister();
 166   1          
 167   1          //Calculate the error for feedback 
 168   1          error = gblack_totalpos_diff - 780;
 169   1              //Accumulate past errors for Ki
 170   1          // left max 3600; center 4560; right max 5800
 171   1          gki_steererror = gki_steererror+error*.000011;
 172   1          duty_cycle_buffer = CENTER_DUTY - Kp_steer*error; //+ Ki_steer*gki_steererror;
 173   1      
 174   1          //Have in place error checking to prevent sporadic  behavior
 175   1          if (duty_cycle_buffer > 5600){
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 4   

 176   2              duty_cycle_buffer = 5600;   
 177   2          }
 178   1          if (duty_cycle_buffer <= 3600) {
 179   2              duty_cycle_buffer = 3600;
 180   2          }
 181   1          duty_cycle = duty_cycle_buffer;
 182   1      
 183   1          LCD_ClearDisplay();
 184   1          LCD_Position(0,0);
 185   1          sprintf(buffer, "%f", error);
 186   1          LCD_PrintString(buffer);
 187   1          LCD_Position(1, 0);
 188   1          sprintf(buffer, "%f", gblack_totalpos_diff);
 189   1          LCD_PrintString(buffer);
 190   1          
 191   1              //LCD output for debugging
 192   1      //    LCD_ClearDisplay();
 193   1      //    LCD_Position(0,0);
 194   1      //    sprintf(buffer, "%f", error);        
 195   1      //    LCD_PrintString(buffer);
 196   1          
 197   1      //     //more LCD debugging code
 198   1      //    LCD_Position(1, 0);
 199   1      //     //sprintf(buffer, "%f", duty_cycle);
 200   1      //    LCD_PrintNumber(duty_cycle);
 201   1      
 202   1          STEERING_PWM_WriteCompare(duty_cycle);
 203   1      }
 204          
 205          /*CY_ISR(UPDATE_STEERING_inter) {
 206              double error;   
 207              double duty_cycle_buffer;
 208              uint16 duty_cycle;
 209              char buffer[10];
 210              
 211              //UPDATE_STEERING_TIMER_ReadStatusRegister();
 212              
 213              //Calculate the error for feedback 
 214              error = gblack_totalpos_diff;
 215                  //Accumulate past errors for Ki
 216              // left max 3600; center 4560; right max 5800
 217              gki_steererror = gki_steererror+error*.000011;
 218              duty_cycle_buffer = CENTER_DUTY + Kp_steer*error; //+ Ki_steer*gki_steererror;
 219          
 220              //Have in place error checking to prevent sporadic  behavior
 221              if (duty_cycle_buffer > 5600){
 222                  duty_cycle_buffer = 5600;   
 223              }
 224              if (duty_cycle_buffer <= 3600) {
 225                  duty_cycle_buffer = 3600;
 226              }
 227              duty_cycle = duty_cycle_buffer;
 228          
 229                  //LCD output for debugging
 230          //    LCD_ClearDisplay();
 231          //    LCD_Position(0,0);
 232          //    sprintf(buffer, "%f", error);        
 233          //    LCD_PrintString(buffer);
 234              
 235          //     //more LCD debugging code
 236          //    LCD_Position(1, 0);
 237          //     //sprintf(buffer, "%f", duty_cycle);
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 5   

 238          //    LCD_PrintNumber(duty_cycle);
 239          
 240              STEERING_PWM_WriteCompare(duty_cycle);
 241          }
 242          */
 243          
 244          int main()
 245          {
 246   1          //initialize all modules
 247   1          CYGlobalIntEnable;  
 248   1          HE_TIMER_Start();
 249   1          HE_ISR_Start();
 250   1          HE_ISR_SetVector(HE_inter);
 251   1          MOTOR_PWM_Start();
 252   1          MOTOR_PWM_CLK_Start();
 253   1          
 254   1          LINE_COUNTER_Start();
 255   1          //COUNTER_N_ISR_Start();
 256   1          //COUNTER_N_ISR_SetVector(COUNTER_N_inter);   
 257   1          SEC_TIL_BLACK_TIMER_Start();
 258   1          SEC_TIL_BLACK_TIMER_ISR_Start();
 259   1          SEC_TIL_BLACK_TIMER_ISR_SetVector(SEC_TIL_BLACK_TIMER_inter);
 260   1          
 261   1          //UPDATE_STEERING_TIMER_Start();
 262   1          //UPDATE_STEERING_ISR_Start();
 263   1          //UPDATE_STEERING_ISR_SetVector(UPDATE_STEERING_inter);
 264   1          
 265   1          STEERING_PWM_Start();
 266   1          STEERING_PWM_CLK_Start();
 267   1          
 268   1          LCD_Start();
 269   1          LCD_Position(0,0);
 270   1          LCD_PrintString("ELE302 Carlab");
 271   1          
 272   1          for(;;)
 273   1          {
 274   2          }
 275   1      }
 276          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _getSpeedAvg (BEGIN)
                                           ; SOURCE LINE # 37
0000 900000      R     MOV     DPTR,#speeds
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 38
0006 E4                CLR     A
0007 FF                MOV     R7,A
0008 FE                MOV     R6,A
0009 FD                MOV     R5,A
000A FC                MOV     R4,A
000B 900000      R     MOV     DPTR,#counter
000E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 39
0011 E4                CLR     A
0012 FF                MOV     R7,A
0013 FE                MOV     R6,A
0014 FD                MOV     R5,A
0015 FC                MOV     R4,A
0016 900000      R     MOV     DPTR,#i
0019 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 40
001C E4                CLR     A
001D 7F05              MOV     R7,#05H
001F FE                MOV     R6,A
0020 FD                MOV     R5,A
0021 FC                MOV     R4,A
0022 900000      R     MOV     DPTR,#size
0025 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 41
0028 900000      R     MOV     DPTR,#gspeedMeasurements
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 C3                CLR     C
0031 9405              SUBB    A,#05H
0033 EE                MOV     A,R6
0034 6480              XRL     A,#080H
0036 9480              SUBB    A,#080H
0038 500C              JNC     ?C0001
                                           ; SOURCE LINE # 42
003A EE                MOV     A,R6
003B 33                RLC     A
003C 95E0              SUBB    A,ACC
003E FD                MOV     R5,A
003F FC                MOV     R4,A
0040 900000      R     MOV     DPTR,#size
0043 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 43
0046         ?C0001:
                                           ; SOURCE LINE # 44
0046 E4                CLR     A
0047 FF                MOV     R7,A
0048 FE                MOV     R6,A
0049 FD                MOV     R5,A
004A FC                MOV     R4,A
004B 900000      R     MOV     DPTR,#i
004E 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 7   

0051         ?C0002:
0051 900000      R     MOV     DPTR,#size
0054 120000      E     LCALL   ?C?LLDXDATA
0057 900000      R     MOV     DPTR,#i
005A 120000      E     LCALL   ?C?LLDXDATA0
005D C3                CLR     C
005E 120000      E     LCALL   ?C?ULCMP
0061 5057              JNC     ?C0003
                                           ; SOURCE LINE # 45
0063 900000      R     MOV     DPTR,#counter
0066 120000      E     LCALL   ?C?LLDXDATA
0069 C004              PUSH    AR4
006B C005              PUSH    AR5
006D C006              PUSH    AR6
006F C007              PUSH    AR7
0071 E4                CLR     A
0072 7F04              MOV     R7,#04H
0074 FE                MOV     R6,A
0075 FD                MOV     R5,A
0076 FC                MOV     R4,A
0077 900000      R     MOV     DPTR,#i
007A 120000      E     LCALL   ?C?LLDXDATA0
007D 120000      E     LCALL   ?C?LMUL
0080 900000      R     MOV     DPTR,#speeds
0083 120000      E     LCALL   ?C?PLDXDATA
0086 E9                MOV     A,R1
0087 2F                ADD     A,R7
0088 F9                MOV     R1,A
0089 EA                MOV     A,R2
008A 3E                ADDC    A,R6
008B FA                MOV     R2,A
008C EB                MOV     A,R3
008D 3D                ADDC    A,R5
008E FB                MOV     R3,A
008F 120000      E     LCALL   ?C?LLDPTR0
0092 D007              POP     AR7
0094 D006              POP     AR6
0096 D005              POP     AR5
0098 D004              POP     AR4
009A 120000      E     LCALL   ?C?FPADD
009D 900000      R     MOV     DPTR,#counter
00A0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 46
00A3 900000      R     MOV     DPTR,#i
00A6 120000      E     LCALL   ?C?LLDXDATA
00A9 E4                CLR     A
00AA 7B01              MOV     R3,#01H
00AC FA                MOV     R2,A
00AD F9                MOV     R1,A
00AE F8                MOV     R0,A
00AF 120000      E     LCALL   ?C?LADD
00B2 900000      R     MOV     DPTR,#i
00B5 120000      E     LCALL   ?C?LSTXDATA
00B8 8097              SJMP    ?C0002
00BA         ?C0003:
                                           ; SOURCE LINE # 47
00BA 900000      R     MOV     DPTR,#size
00BD 120000      E     LCALL   ?C?LLDXDATA
00C0 E4                CLR     A
00C1 120000      E     LCALL   ?C?FCASTL
00C4 A804              MOV     R0,AR4
00C6 A905              MOV     R1,AR5
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 8   

00C8 AA06              MOV     R2,AR6
00CA AB07              MOV     R3,AR7
00CC 900000      R     MOV     DPTR,#counter
00CF 120000      E     LCALL   ?C?LLDXDATA
00D2 120000      E     LCALL   ?C?FPDIV
                                           ; SOURCE LINE # 48
00D5         ?C0005:
00D5 22                RET     
             ; FUNCTION _getSpeedAvg (END)

             ; FUNCTION getCurSpeed (BEGIN)
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 FE                MOV     R6,A
0003 FD                MOV     R5,A
0004 FC                MOV     R4,A
0005 900000      R     MOV     DPTR,#current_Speed
0008 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 54
000B 7B01              MOV     R3,#01H
000D 7A00        R     MOV     R2,#HIGH speedCounts
000F 7900        R     MOV     R1,#LOW speedCounts
0011 120000      R     LCALL   _getSpeedAvg
0014 900000      R     MOV     DPTR,#current_Speed
0017 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 56
001A 120000      E     LCALL   HE_TIMER_ReadPeriod
001D E4                CLR     A
001E 120000      E     LCALL   ?C?FCASTL
0021 A804              MOV     R0,AR4
0023 A905              MOV     R1,AR5
0025 AA06              MOV     R2,AR6
0027 AB07              MOV     R3,AR7
0029 900000      R     MOV     DPTR,#current_Speed
002C 120000      E     LCALL   ?C?LLDXDATA
002F 120000      E     LCALL   ?C?FPDIV
0032 7BFE              MOV     R3,#0FEH
0034 7AF4              MOV     R2,#0F4H
0036 79B2              MOV     R1,#0B2H
0038 7843              MOV     R0,#043H
003A 120000      E     LCALL   ?C?FPMUL
003D 900000      R     MOV     DPTR,#current_Speed
0040 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 58
0043 900000      R     MOV     DPTR,#current_Speed
0046 120000      E     LCALL   ?C?LLDXDATA0
0049 7F71              MOV     R7,#071H
004B 7E3D              MOV     R6,#03DH
004D 7DCA              MOV     R5,#0CAH
004F 7C3F              MOV     R4,#03FH
0051 120000      E     LCALL   ?C?FPDIV
0054 E4                CLR     A
0055 FB                MOV     R3,A
0056 FA                MOV     R2,A
0057 7940              MOV     R1,#040H
0059 7841              MOV     R0,#041H
005B 120000      E     LCALL   ?C?FPDIV
005E 900000      R     MOV     DPTR,#current_Speed
0061 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 60
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 9   

0064 900000      R     MOV     DPTR,#current_Speed
0067 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 61
006A         ?C0006:
006A 22                RET     
             ; FUNCTION getCurSpeed (END)

             ; FUNCTION SEC_TIL_BLACK_TIMER_inter (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 80
002B 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ReadCapture
002E 900000      R     MOV     DPTR,#gfirstpos
0031 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 81
0034 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ReadCapture
0037 900000      R     MOV     DPTR,#gsecondpos
003A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 82
003D 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ReadCapture
0040 900000      R     MOV     DPTR,#gsecondpos
0043 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 83
0046 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ClearFIFO
                                           ; SOURCE LINE # 85
0049 900000      R     MOV     DPTR,#gsecondpos
004C 120000      E     LCALL   ?C?LLDXDATA0
004F 900000      R     MOV     DPTR,#gfirstpos
0052 120000      E     LCALL   ?C?LLDXDATA
0055 120000      E     LCALL   ?C?LSUB
0058 E4                CLR     A
0059 120000      E     LCALL   ?C?FCASTL
005C 900000      R     MOV     DPTR,#gblack_totalpos_diff
005F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 94
0062 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ReadStatusRegister
                                           ; SOURCE LINE # 96
0065 D007              POP     AR7
0067 D006              POP     AR6
0069 D005              POP     AR5
006B D004              POP     AR4
006D D003              POP     AR3
006F D002              POP     AR2
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 10  

0071 D001              POP     AR1
0073 D000              POP     AR0
0075 D0D0              POP     PSW
0077 D000        E     POP     ?C?XPAGE1SFR
0079 D086              POP     DPS
007B D084              POP     DPL1
007D D085              POP     DPH1
007F D082              POP     DPL
0081 D083              POP     DPH
0083 D0F0              POP     B
0085 D0E0              POP     ACC
0087 32                RETI    
             ; FUNCTION SEC_TIL_BLACK_TIMER_inter (END)

             ; FUNCTION HE_inter (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 168
002B E4                CLR     A
002C FF                MOV     R7,A
002D FE                MOV     R6,A
002E 7D43              MOV     R5,#043H
0030 7CC4              MOV     R4,#0C4H
0032 900000      R     MOV     DPTR,#gblack_totalpos_diff
0035 120000      E     LCALL   ?C?LLDXDATA0
0038 120000      E     LCALL   ?C?FPADD
003B 900000      R     MOV     DPTR,#error
003E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 171
0041 900000      R     MOV     DPTR,#gki_steererror
0044 120000      E     LCALL   ?C?LLDXDATA0
0047 C000              PUSH    AR0
0049 C001              PUSH    AR1
004B C002              PUSH    AR2
004D C003              PUSH    AR3
004F 7FA4              MOV     R7,#0A4H
0051 7E8C              MOV     R6,#08CH
0053 7D38              MOV     R5,#038H
0055 7C37              MOV     R4,#037H
0057 900000      R     MOV     DPTR,#error
005A 120000      E     LCALL   ?C?LLDXDATA0
005D 120000      E     LCALL   ?C?FPMUL
0060 D003              POP     AR3
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 11  

0062 D002              POP     AR2
0064 D001              POP     AR1
0066 D000              POP     AR0
0068 120000      E     LCALL   ?C?FPADD
006B 900000      R     MOV     DPTR,#gki_steererror
006E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 172
0071 E4                CLR     A
0072 FF                MOV     R7,A
0073 FE                MOV     R6,A
0074 7DC8              MOV     R5,#0C8H
0076 7C42              MOV     R4,#042H
0078 900000      R     MOV     DPTR,#error
007B 120000      E     LCALL   ?C?LLDXDATA0
007E 120000      E     LCALL   ?C?FPMUL
0081 A804              MOV     R0,AR4
0083 A905              MOV     R1,AR5
0085 AA06              MOV     R2,AR6
0087 AB07              MOV     R3,AR7
0089 7F00              MOV     R7,#00H
008B 7E80              MOV     R6,#080H
008D 7D8E              MOV     R5,#08EH
008F 7C45              MOV     R4,#045H
0091 120000      E     LCALL   ?C?FPSUB
0094 900000      R     MOV     DPTR,#duty_cycle_buffer
0097 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 175
009A E4                CLR     A
009B FF                MOV     R7,A
009C FE                MOV     R6,A
009D 7DAF              MOV     R5,#0AFH
009F 7C45              MOV     R4,#045H
00A1 900000      R     MOV     DPTR,#duty_cycle_buffer
00A4 120000      E     LCALL   ?C?LLDXDATA0
00A7 120000      E     LCALL   ?C?FPCMP3
00AA 600F              JZ      ?C0008
00AC 400D              JC      ?C0008
                                           ; SOURCE LINE # 176
00AE E4                CLR     A
00AF FF                MOV     R7,A
00B0 FE                MOV     R6,A
00B1 7DAF              MOV     R5,#0AFH
00B3 7C45              MOV     R4,#045H
00B5 900000      R     MOV     DPTR,#duty_cycle_buffer
00B8 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 177
00BB         ?C0008:
                                           ; SOURCE LINE # 178
00BB E4                CLR     A
00BC FF                MOV     R7,A
00BD FE                MOV     R6,A
00BE 7D61              MOV     R5,#061H
00C0 7C45              MOV     R4,#045H
00C2 900000      R     MOV     DPTR,#duty_cycle_buffer
00C5 120000      E     LCALL   ?C?LLDXDATA0
00C8 120000      E     LCALL   ?C?FPCMP3
00CB 6002              JZ      $ + 4H
00CD 500D              JNC     ?C0009
                                           ; SOURCE LINE # 179
00CF E4                CLR     A
00D0 FF                MOV     R7,A
00D1 FE                MOV     R6,A
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 12  

00D2 7D61              MOV     R5,#061H
00D4 7C45              MOV     R4,#045H
00D6 900000      R     MOV     DPTR,#duty_cycle_buffer
00D9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 180
00DC         ?C0009:
                                           ; SOURCE LINE # 181
00DC 900000      R     MOV     DPTR,#duty_cycle_buffer
00DF 120000      E     LCALL   ?C?LLDXDATA
00E2 120000      E     LCALL   ?C?CASTF
00E5 900000      R     MOV     DPTR,#duty_cycle
00E8 EE                MOV     A,R6
00E9 F0                MOVX    @DPTR,A
00EA A3                INC     DPTR
00EB EF                MOV     A,R7
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
00ED 7F01              MOV     R7,#01H
00EF 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 184
00F2 E4                CLR     A
00F3 FD                MOV     R5,A
00F4 FF                MOV     R7,A
00F5 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 185
00F8 7BFF              MOV     R3,#0FFH
00FA 7A00        R     MOV     R2,#HIGH ?SC_0
00FC 7900        R     MOV     R1,#LOW ?SC_0
00FE 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0101 120000      E     LCALL   ?C?PSTXDATA
0104 900000      R     MOV     DPTR,#error
0107 120000      E     LCALL   ?C?LLDXDATA
010A 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
010D 120000      E     LCALL   ?C?LSTXDATA
0110 7B01              MOV     R3,#01H
0112 7A00        R     MOV     R2,#HIGH buffer
0114 7900        R     MOV     R1,#LOW buffer
0116 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 186
0119 7B01              MOV     R3,#01H
011B 7A00        R     MOV     R2,#HIGH buffer
011D 7900        R     MOV     R1,#LOW buffer
011F 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 187
0122 E4                CLR     A
0123 FD                MOV     R5,A
0124 7F01              MOV     R7,#01H
0126 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 188
0129 7BFF              MOV     R3,#0FFH
012B 7A00        R     MOV     R2,#HIGH ?SC_0
012D 7900        R     MOV     R1,#LOW ?SC_0
012F 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0132 120000      E     LCALL   ?C?PSTXDATA
0135 900000      R     MOV     DPTR,#gblack_totalpos_diff
0138 120000      E     LCALL   ?C?LLDXDATA
013B 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
013E 120000      E     LCALL   ?C?LSTXDATA
0141 7B01              MOV     R3,#01H
0143 7A00        R     MOV     R2,#HIGH buffer
0145 7900        R     MOV     R1,#LOW buffer
0147 120000      E     LCALL   _sprintf
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 13  

                                           ; SOURCE LINE # 189
014A 7B01              MOV     R3,#01H
014C 7A00        R     MOV     R2,#HIGH buffer
014E 7900        R     MOV     R1,#LOW buffer
0150 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 202
0153 900000      R     MOV     DPTR,#duty_cycle
0156 E0                MOVX    A,@DPTR
0157 FE                MOV     R6,A
0158 A3                INC     DPTR
0159 E0                MOVX    A,@DPTR
015A FF                MOV     R7,A
015B 120000      E     LCALL   _STEERING_PWM_WriteCompare
                                           ; SOURCE LINE # 203
015E D007              POP     AR7
0160 D006              POP     AR6
0162 D005              POP     AR5
0164 D004              POP     AR4
0166 D003              POP     AR3
0168 D002              POP     AR2
016A D001              POP     AR1
016C D000              POP     AR0
016E D0D0              POP     PSW
0170 D000        E     POP     ?C?XPAGE1SFR
0172 D086              POP     DPS
0174 D084              POP     DPL1
0176 D085              POP     DPH1
0178 D082              POP     DPL
017A D083              POP     DPH
017C D0F0              POP     B
017E D0E0              POP     ACC
0180 32                RETI    
             ; FUNCTION HE_inter (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 247
0000 D2AF              SETB    EA
0002 9044F4            MOV     DPTR,#044F4H
0005 74FD              MOV     A,#0FDH
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
0008 120000      E     LCALL   HE_TIMER_Start
                                           ; SOURCE LINE # 249
000B 120000      E     LCALL   HE_ISR_Start
                                           ; SOURCE LINE # 250
000E 7E00        R     MOV     R6,#HIGH HE_inter
0010 7F00        R     MOV     R7,#LOW HE_inter
0012 120000      E     LCALL   _HE_ISR_SetVector
                                           ; SOURCE LINE # 251
0015 120000      E     LCALL   MOTOR_PWM_Start
                                           ; SOURCE LINE # 252
0018 120000      E     LCALL   MOTOR_PWM_CLK_Start
                                           ; SOURCE LINE # 254
001B 120000      E     LCALL   LINE_COUNTER_Start
                                           ; SOURCE LINE # 257
001E 120000      E     LCALL   SEC_TIL_BLACK_TIMER_Start
                                           ; SOURCE LINE # 258
0021 120000      E     LCALL   SEC_TIL_BLACK_TIMER_ISR_Start
                                           ; SOURCE LINE # 259
0024 7E00        R     MOV     R6,#HIGH SEC_TIL_BLACK_TIMER_inter
C51 COMPILER V9.51   MAIN                                                                  03/27/2015 10:01:37 PAGE 14  

0026 7F00        R     MOV     R7,#LOW SEC_TIL_BLACK_TIMER_inter
0028 120000      E     LCALL   _SEC_TIL_BLACK_TIMER_ISR_SetVector
                                           ; SOURCE LINE # 265
002B 120000      E     LCALL   STEERING_PWM_Start
                                           ; SOURCE LINE # 266
002E 120000      E     LCALL   STEERING_PWM_CLK_Start
                                           ; SOURCE LINE # 268
0031 120000      E     LCALL   LCD_Start
                                           ; SOURCE LINE # 269
0034 E4                CLR     A
0035 FD                MOV     R5,A
0036 FF                MOV     R7,A
0037 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 270
003A 7BFF              MOV     R3,#0FFH
003C 7A00        R     MOV     R2,#HIGH ?SC_3
003E 7900        R     MOV     R1,#LOW ?SC_3
0040 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 272
0043         ?C0011:
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
0043 80FE              SJMP    ?C0011
0045 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    912    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =     68      54
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
