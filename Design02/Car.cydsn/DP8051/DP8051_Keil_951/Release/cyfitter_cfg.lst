C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Release\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL
                    -(2) PR(.\DP8051\DP8051_Keil_951\Release/cyfitter_cfg.lst) CD OT(8,SIZE) OJ(.\DP8051\DP8051_Keil_951\Release\cyfitter_cfg
                    -.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator  3.1
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  25          
  26          
  27          #if defined(__C51__) || defined(__CX51__)
  28                  #define CYPACKED
  29                  #define CYPACKED_ATTR
  30                  #define CYALIGNED
  31                  
  32              #define CY_CFG_UNUSED
  33                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  34          
  35          
  36          
  37                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  38                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  39                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  40          #else
                      #error Unsupported toolchain
              #endif
  43          
  44          
  45          
  46          /* Clock startup error codes                                                   */
  47          #define CYCLOCKSTART_NO_ERROR    0u
  48          #define CYCLOCKSTART_XTAL_ERROR  1u
  49          #define CYCLOCKSTART_32KHZ_ERROR 2u
  50          #define CYCLOCKSTART_PLL_ERROR   3u
  51          
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 2   

  52          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  53          /*******************************************************************************
  54          * Function Name: CyClockStartupError
  55          ********************************************************************************
  56          * Summary:
  57          *  If an error is encountered during clock configuration (crystal startup error,
  58          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  59          *  the customer, this function will stop in an infinite loop.
  60          *
  61          * Parameters:
  62          *   void
  63          *
  64          * Return:
  65          *   void
  66          *
  67          *******************************************************************************/
  68          CY_CFG_UNUSED
  69          static void CyClockStartupError(uint8 errorCode);
  70          CY_CFG_UNUSED
  71          static void CyClockStartupError(uint8 errorCode)
  72          {
  73   1          /* To remove the compiler warning if errorCode not used.                */
  74   1          errorCode = errorCode;
  75   1      
  76   1          /* `#START CyClockStartupError` */
  77   1      
  78   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  79   1          /* we will end up here to allow the customer to implement something to  */
  80   1          /* deal with the clock condition.                                       */
  81   1      
  82   1          /* `#END` */
  83   1      
  84   1          /* If nothing else, stop here since the clocks have not started         */
  85   1          /* correctly.                                                           */
  86   1          while(1) {}
  87   1      }
  88          #endif
  89          
  90          #define cfg_byte_table ((const void CYFAR *)0x080000u)
  91          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
  92          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00080474u)
  93          
  94          /* IOPINS0_3 Address: CYREG_PRT3_DM0 Size (bytes): 8 */
  95          #define BS_IOPINS0_3_VAL ((const uint8 CYFAR *)0x0008047Cu)
  96          
  97          /* IOPINS0_4 Address: CYREG_PRT4_DM0 Size (bytes): 8 */
  98          #define BS_IOPINS0_4_VAL ((const uint8 CYFAR *)0x00080484u)
  99          
 100          /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 101          #define BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL ((const uint8 CYFAR *)0x0008048Cu)
 102          
 103          
 104          /*******************************************************************************
 105          * Function Name: ClockSetup
 106          ********************************************************************************
 107          *
 108          * Summary:
 109          *  Performs the initialization of all of the clocks in the device based on the
 110          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 111          *  clocks and setting the necessary dividers to produce the desired frequency. 
 112          *
 113          * Parameters:
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 3   

 114          *  void
 115          *
 116          * Return:
 117          *  void
 118          *
 119          *******************************************************************************/
 120          static void ClockSetup(void);
 121          static void ClockSetup(void)
 122          {
 123   1              uint32 timeout;
 124   1              uint8 pllLock;
 125   1      
 126   1      
 127   1              /* Configure Digital Clocks based on settings from Clock DWR */
 128   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0001u);
 129   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x18u);
 130   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x0007u);
 131   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG1_CFG0 + 0x2u), 0x18u);
 132   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG2_CFG0), 0x0017u);
 133   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG2_CFG0 + 0x2u), 0x18u);
 134   1      
 135   1              /* Configure Analog Clocks based on settings from Clock DWR */
 136   1              CYCONFIGCPY((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (const void CYFAR *)(BS_CYDEV_CLKDIST_ACFG0_CFG0_VA
             -L), 4u);
 137   1      
 138   1              /* Configure ILO based on settings from Clock DWR */
 139   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 140   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 141   1      
 142   1              /* Configure IMO based on settings from Clock DWR */
 143   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 144   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 145   1      
 146   1              /* Configure PLL based on settings from Clock DWR */
 147   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 148   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 149   1              /* Wait up to 250us for the PLL to lock */
 150   1              pllLock = 0u;
 151   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 152   1              { 
 153   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 154   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 155   2              }
 156   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 157   1              if (timeout == 0u)
 158   1              {
 159   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 160   2              }
 161   1      
 162   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 163   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 164   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 165   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 166   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 167   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 168   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 169   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DLY1), 0x04u);
 170   1      
 171   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x07u
             -)));
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 4   

 172   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG1), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG1) | 0x01u
             -)));
 173   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG0), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x80u
             -)));
 174   1      }
 175          
 176          
 177          /* Analog API Functions */
 178          
 179          
 180          /*******************************************************************************
 181          * Function Name: AnalogSetDefault
 182          ********************************************************************************
 183          *
 184          * Summary:
 185          *  Sets up the analog portions of the chip to default values based on chip
 186          *  configuration options from the project.
 187          *
 188          * Parameters:
 189          *  void
 190          *
 191          * Return:
 192          *  void
 193          *
 194          *******************************************************************************/
 195          static void AnalogSetDefault(void);
 196          static void AnalogSetDefault(void)
 197          {
 198   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 199   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 200   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 201   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT4_AG, 0x01u);
 202   1              CY_SET_REG8((void CYXDATA *)CYREG_DAC2_SW0, 0x20u);
 203   1              CY_SET_REG8((void CYXDATA *)CYREG_CMP2_SW0, 0x10u);
 204   1              CY_SET_REG8((void CYXDATA *)CYREG_CMP2_SW4, 0x20u);
 205   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 206   1      }
 207          
 208          
 209          /*******************************************************************************
 210          * Function Name: SetAnalogRoutingPumps
 211          ********************************************************************************
 212          *
 213          * Summary:
 214          * Enables or disables the analog pumps feeding analog routing switches.
 215          * Intended to be called at startup, based on the Vdda system configuration;
 216          * may be called during operation when the user informs us that the Vdda voltage
 217          * crossed the pump threshold.
 218          *
 219          * Parameters:
 220          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 221          *
 222          * Return:
 223          *  void
 224          *
 225          *******************************************************************************/
 226          void SetAnalogRoutingPumps(uint8 enabled)
 227          {
 228   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 229   1              if (enabled != 0u)
 230   1              {
 231   2                      regValue |= 0x22u;
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 5   

 232   2              }
 233   1              else
 234   1              {
 235   2                      regValue &= (uint8)~0x22u;
 236   2              }
 237   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 238   1      }
 239          
 240          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 241          
 242          
 243          /*******************************************************************************
 244          * Function Name: cyfitter_cfg
 245          ********************************************************************************
 246          * Summary:
 247          *  This function is called by the start-up code for the selected device. It
 248          *  performs all of the necessary device configuration based on the design
 249          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 250          *  as Clocks and Pins as well as any component configuration that is necessary.
 251          *
 252          * Parameters:  
 253          *   void
 254          *
 255          * Return:
 256          *   void
 257          *
 258          *******************************************************************************/
 259          
 260          void cyfitter_cfg(void)
 261          {
 262   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 263   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 264   1      
 265   1              {
 266   2      
 267   2                      CYPACKED typedef struct {
 268   2                              void CYFAR *address;
 269   2                              uint16 size;
 270   2                      } CYPACKED_ATTR cfg_memset_t;
 271   2      
 272   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 273   2                              /* address, size */
 274   2                              {(void CYFAR *)(CYREG_PRT0_DR), 32u},
 275   2                              {(void CYFAR *)(CYREG_PRT5_DR), 32u},
 276   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 277   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 278   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 279   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 280   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 281   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 282   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 283   2                      };
 284   2      
 285   2                      uint8 CYDATA i;
 286   2      
 287   2                      /* Zero out critical memory blocks before beginning configuration */
 288   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 289   2                      {
 290   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 291   3                              CYMEMZERO(ms->address, ms->size);
 292   3                      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 6   

 293   2      
 294   2                      cfg_write_bytes(cfg_byte_table);
 295   2      
 296   2                      /* Perform normal device configuration. Order is not critical for these items. */
 297   2                      CY_SET_XTND_REG16((void CYFAR *)(CYREG_LUT2_CR), 0x0203u);
 298   2      
 299   2                      /* Enable digital routing */
 300   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 301   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 302   2      
 303   2                      /* Enable UDB array */
 304   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 305   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 306   2              }
 307   1      
 308   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 309   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 310   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT3_DM0), (const void CYFAR *)(BS_IOPINS0_3_VAL), 8u);
 311   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT4_DM0), (const void CYFAR *)(BS_IOPINS0_4_VAL), 8u);
 312   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 313   1      
 314   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 315   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 316   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 317   1              {
 318   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 319   2              }
 320   1      
 321   1      
 322   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 323   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 324   1              /* Setup clocks based on selections from Clock DWR */
 325   1              ClockSetup();
 326   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 327   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 328   1      
 329   1              /* Perform basic analog initialization to defaults */
 330   1              AnalogSetDefault();
 331   1      
 332   1              /* Configure alternate active mode */
 333   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 334   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 335   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0000         ?C0001:
                                           ; SOURCE LINE # 86
0000 80FE              SJMP    ?C0001
0002 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 128
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D01              MOV     R5,#01H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 129
000D 904082            MOV     DPTR,#04082H
0010 7418              MOV     A,#018H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
0013 7B00              MOV     R3,#00H
0015 7A40              MOV     R2,#040H
0017 7984              MOV     R1,#084H
0019 7D07              MOV     R5,#07H
001B 7C00              MOV     R4,#00H
001D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 131
0020 904086            MOV     DPTR,#04086H
0023 7418              MOV     A,#018H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0026 7B00              MOV     R3,#00H
0028 7A40              MOV     R2,#040H
002A 7988              MOV     R1,#088H
002C 7D17              MOV     R5,#017H
002E 7C00              MOV     R4,#00H
0030 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 133
0033 90408A            MOV     DPTR,#0408AH
0036 7418              MOV     A,#018H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0039 7B08              MOV     R3,#08H
003B 7A04              MOV     R2,#04H
003D 798C              MOV     R1,#08CH
003F C003              PUSH    AR3
0041 C002              PUSH    AR2
0043 C001              PUSH    AR1
0045 7B00              MOV     R3,#00H
0047 7A41              MOV     R2,#041H
0049 7900              MOV     R1,#00H
004B 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
004E 120000      E     LCALL   ?C?PSTXDATA
0051 D001              POP     AR1
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 8   

0053 D002              POP     AR2
0055 D003              POP     AR3
0057 7F04              MOV     R7,#04H
0059 7E00              MOV     R6,#00H
005B 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 139
005E 904300            MOV     DPTR,#04300H
0061 7402              MOV     A,#02H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
0064 904000            MOV     DPTR,#04000H
0067 7408              MOV     A,#08H
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
006A 904200            MOV     DPTR,#04200H
006D 7403              MOV     A,#03H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0070 7B0C              MOV     R3,#0CH
0072 7A01              MOV     R2,#01H
0074 7908              MOV     R1,#08H
0076 120000      E     LCALL   _cyread8
0079 9046A1            MOV     DPTR,#046A1H
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
007E 7B00              MOV     R3,#00H
0080 7A42              MOV     R2,#042H
0082 7922              MOV     R1,#022H
0084 7D08              MOV     R5,#08H
0086 7C00              MOV     R4,#00H
0088 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 148
008B 7B00              MOV     R3,#00H
008D 7A42              MOV     R2,#042H
008F 7920              MOV     R1,#020H
0091 7D51              MOV     R5,#051H
0093 7C12              MOV     R4,#012H
0095 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 150
0098 E4                CLR     A
0099 900000      R     MOV     DPTR,#pllLock
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
009D 7F19              MOV     R7,#019H
009F FE                MOV     R6,A
00A0 FD                MOV     R5,A
00A1 FC                MOV     R4,A
00A2 900000      R     MOV     DPTR,#timeout
00A5 120000      E     LCALL   ?C?LSTXDATA
00A8         ?C0004:
00A8 900000      R     MOV     DPTR,#timeout
00AB 120000      E     LCALL   ?C?LLDXDATA
00AE D3                SETB    C
00AF EF                MOV     A,R7
00B0 9400              SUBB    A,#00H
00B2 EE                MOV     A,R6
00B3 9400              SUBB    A,#00H
00B5 403B              JC      ?C0005
00B7 900000      R     MOV     DPTR,#pllLock
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 9   

00BC 6403              XRL     A,#03H
00BE 6032              JZ      ?C0005
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
00C0 904225            MOV     DPTR,#04225H
00C3 E0                MOVX    A,@DPTR
00C4 5401              ANL     A,#01H
00C6 FE                MOV     R6,A
00C7 EF                MOV     A,R7
00C8 25E0              ADD     A,ACC
00CA 4E                ORL     A,R6
00CB 5403              ANL     A,#03H
00CD 900000      R     MOV     DPTR,#pllLock
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
00D1 E4                CLR     A
00D2 7FE0              MOV     R7,#0E0H
00D4 7E01              MOV     R6,#01H
00D6 FD                MOV     R5,A
00D7 FC                MOV     R4,A
00D8 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 155
00DB 900000      R     MOV     DPTR,#timeout
00DE 120000      E     LCALL   ?C?LLDXDATA
00E1 74FF              MOV     A,#0FFH
00E3 FB                MOV     R3,A
00E4 FA                MOV     R2,A
00E5 F9                MOV     R1,A
00E6 F8                MOV     R0,A
00E7 120000      E     LCALL   ?C?LADD
00EA 900000      R     MOV     DPTR,#timeout
00ED 120000      E     LCALL   ?C?LSTXDATA
00F0 80B6              SJMP    ?C0004
00F2         ?C0005:
                                           ; SOURCE LINE # 157
00F2 900000      R     MOV     DPTR,#timeout
00F5 120000      E     LCALL   ?C?LLDXDATA
00F8 EF                MOV     A,R7
00F9 4E                ORL     A,R6
00FA 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
00FC 7F03              MOV     R7,#03H
00FE 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 160
0101         ?C0007:
                                           ; SOURCE LINE # 163
0101 7B00              MOV     R3,#00H
0103 7A40              MOV     R2,#040H
0105 7904              MOV     R1,#04H
0107 7D00              MOV     R5,#00H
0109 7C01              MOV     R4,#01H
010B 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 164
010E 904004            MOV     DPTR,#04004H
0111 7407              MOV     A,#07H
0113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0114 904006            MOV     DPTR,#04006H
0117 E4                CLR     A
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 10  

0119 904008            MOV     DPTR,#04008H
011C 7448              MOV     A,#048H
011E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
011F 904004            MOV     DPTR,#04004H
0122 E4                CLR     A
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
0124 904001            MOV     DPTR,#04001H
0127 7402              MOV     A,#02H
0129 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
012A 90400B            MOV     DPTR,#0400BH
012D 7404              MOV     A,#04H
012F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0130 9043A2            MOV     DPTR,#043A2H
0133 E0                MOVX    A,@DPTR
0134 4407              ORL     A,#07H
0136 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
0137 9043A1            MOV     DPTR,#043A1H
013A E0                MOVX    A,@DPTR
013B 4401              ORL     A,#01H
013D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
013E 9043A0            MOV     DPTR,#043A0H
0141 E0                MOVX    A,@DPTR
0142 4480              ORL     A,#080H
0144 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
0145 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
;---- Variable 'bg_xover_inl_trim' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 199
0009 EF                MOV     A,R7
000A 5407              ANL     A,#07H
000C 90586E            MOV     DPTR,#0586EH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0010 EF                MOV     A,R7
0011 C4                SWAP    A
0012 540F              ANL     A,#0FH
0014 A3                INC     DPTR
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0016 90514D            MOV     DPTR,#0514DH
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
001C 905A90            MOV     DPTR,#05A90H
001F 7420              MOV     A,#020H
0021 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 11  

                                           ; SOURCE LINE # 203
0022 905AD0            MOV     DPTR,#05AD0H
0025 7410              MOV     A,#010H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0028 905AD4            MOV     DPTR,#05AD4H
002B 7420              MOV     A,#020H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
002E 905876            MOV     DPTR,#05876H
0031 7444              MOV     A,#044H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0034 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 226
;---- Variable 'enabled' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
0000 905876            MOV     DPTR,#05876H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
;---- Variable 'regValue' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 229
0005 EF                MOV     A,R7
0006 6006              JZ      ?C0010
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
0008 EE                MOV     A,R6
0009 4422              ORL     A,#022H
000B FE                MOV     R6,A
                                           ; SOURCE LINE # 232
000C 8004              SJMP    ?C0011
000E         ?C0010:
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
000E EE                MOV     A,R6
000F 54DD              ANL     A,#0DDH
0011 FE                MOV     R6,A
                                           ; SOURCE LINE # 236
0012         ?C0011:
                                           ; SOURCE LINE # 237
0012 AF06              MOV     R7,AR6
0014 905876            MOV     DPTR,#05876H
0017 EE                MOV     A,R6
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
0019 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 263
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 12  

000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 288
0016 E4                CLR     A
0017 F500        R     MOV     i,A
0019         ?C0013:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 9409              SUBB    A,#09H
001E 502C              JNC     ?C0014
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
0020 E500        R     MOV     A,i
0022 75F005            MOV     B,#05H
0025 A4                MUL     AB
0026 2400        R     ADD     A,#LOW cfg_memset_list
0028 F582              MOV     DPL,A
002A E4                CLR     A
002B 3400        R     ADDC    A,#HIGH cfg_memset_list
002D AF82              MOV     R7,DPL
002F F500        R     MOV     ms,A
0031 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 291
0033 F583              MOV     DPH,A
0035 120000      E     LCALL   ?C?PLDCODE
0038 8F82              MOV     DPL,R7
003A 850083      R     MOV     DPH,ms
003D 7403              MOV     A,#03H
003F 93                MOVC    A,@A+DPTR
0040 FC                MOV     R4,A
0041 7404              MOV     A,#04H
0043 93                MOVC    A,@A+DPTR
0044 FD                MOV     R5,A
0045 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 292
0048 0500        R     INC     i
004A 80CD              SJMP    ?C0013
004C         ?C0014:
                                           ; SOURCE LINE # 294
004C 7B08              MOV     R3,#08H
004E 7A00              MOV     R2,#00H
0050 7900              MOV     R1,#00H
0052 120000      E     LCALL   _cfg_write_bytes
                                           ; SOURCE LINE # 297
0055 7B00              MOV     R3,#00H
0057 7A58              MOV     R2,#058H
0059 794C              MOV     R1,#04CH
005B 7D03              MOV     R5,#03H
005D 7C02              MOV     R4,#02H
005F 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 300
0062 7B01              MOV     R3,#01H
0064 7A50              MOV     R2,#050H
0066 7903              MOV     R1,#03H
0068 120000      E     LCALL   _cyread8
006B EF                MOV     A,R7
006C 4402              ORL     A,#02H
006E FD                MOV     R5,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 13  

006F 7B01              MOV     R3,#01H
0071 7A50              MOV     R2,#050H
0073 7903              MOV     R1,#03H
0075 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 301
0078 7B01              MOV     R3,#01H
007A 7A50              MOV     R2,#050H
007C 7913              MOV     R1,#013H
007E 120000      E     LCALL   _cyread8
0081 EF                MOV     A,R7
0082 4402              ORL     A,#02H
0084 FD                MOV     R5,A
0085 7B01              MOV     R3,#01H
0087 7A50              MOV     R2,#050H
0089 7913              MOV     R1,#013H
008B 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 304
008E 9043A0            MOV     DPTR,#043A0H
0091 E0                MOVX    A,@DPTR
0092 4440              ORL     A,#040H
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
0095 9043C2            MOV     DPTR,#043C2H
0098 E0                MOVX    A,@DPTR
0099 4410              ORL     A,#010H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 309
009C 7B08              MOV     R3,#08H
009E 7A04              MOV     R2,#04H
00A0 7974              MOV     R1,#074H
00A2 C003              PUSH    AR3
00A4 C002              PUSH    AR2
00A6 C001              PUSH    AR1
00A8 7B00              MOV     R3,#00H
00AA 7A51              MOV     R2,#051H
00AC 7922              MOV     R1,#022H
00AE 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00B1 120000      E     LCALL   ?C?PSTXDATA
00B4 D001              POP     AR1
00B6 D002              POP     AR2
00B8 D003              POP     AR3
00BA 7F08              MOV     R7,#08H
00BC 7E00              MOV     R6,#00H
00BE 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 310
00C1 7B08              MOV     R3,#08H
00C3 7A04              MOV     R2,#04H
00C5 797C              MOV     R1,#07CH
00C7 C003              PUSH    AR3
00C9 C002              PUSH    AR2
00CB C001              PUSH    AR1
00CD 7B00              MOV     R3,#00H
00CF 7A51              MOV     R2,#051H
00D1 7932              MOV     R1,#032H
00D3 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00D6 120000      E     LCALL   ?C?PSTXDATA
00D9 D001              POP     AR1
00DB D002              POP     AR2
00DD D003              POP     AR3
00DF 7F08              MOV     R7,#08H
00E1 7E00              MOV     R6,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 14  

00E3 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 311
00E6 7B08              MOV     R3,#08H
00E8 7A04              MOV     R2,#04H
00EA 7984              MOV     R1,#084H
00EC C003              PUSH    AR3
00EE C002              PUSH    AR2
00F0 C001              PUSH    AR1
00F2 7B00              MOV     R3,#00H
00F4 7A51              MOV     R2,#051H
00F6 7942              MOV     R1,#042H
00F8 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00FB 120000      E     LCALL   ?C?PSTXDATA
00FE D001              POP     AR1
0100 D002              POP     AR2
0102 D003              POP     AR3
0104 7F08              MOV     R7,#08H
0106 7E00              MOV     R6,#00H
0108 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 312
010B 9044F4            MOV     DPTR,#044F4H
010E 7401              MOV     A,#01H
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
0111 904322            MOV     DPTR,#04322H
0114 E0                MOVX    A,@DPTR
0115 4408              ORL     A,#08H
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0118 9046EC            MOV     DPTR,#046ECH
011B E0                MOVX    A,@DPTR
011C C3                CLR     C
011D 9405              SUBB    A,#05H
011F 5006              JNC     ?C0016
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
0121 904689            MOV     DPTR,#04689H
0124 743A              MOV     A,#03AH
0126 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
0127         ?C0016:
                                           ; SOURCE LINE # 323
0127 904800            MOV     DPTR,#04800H
012A 74F1              MOV     A,#0F1H
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
012D 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 327
0130 904800            MOV     DPTR,#04800H
0133 74B1              MOV     A,#0B1H
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 330
0136 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 333
0139 7B00              MOV     R3,#00H
013B 7A43              MOV     R2,#043H
013D 79A0              MOV     R1,#0A0H
013F C001              PUSH    AR1
0141 79B0              MOV     R1,#0B0H
0143 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0146 120000      E     LCALL   ?C?PSTXDATA
0149 D001              POP     AR1
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 00:49:16 PAGE 15  

014B 7F0E              MOV     R7,#0EH
014D 7E00              MOV     R6,#00H
014F 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 334
0152 9043B0            MOV     DPTR,#043B0H
0155 E0                MOVX    A,@DPTR
0156 54FD              ANL     A,#0FDH
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
0159 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    754    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
