C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Release\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL
                    -(2) PR(.\DP8051\DP8051_Keil_951\Release/cyfitter_cfg.lst) CD OT(8,SIZE) OJ(.\DP8051\DP8051_Keil_951\Release\cyfitter_cfg
                    -.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator  3.1
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  25          
  26          
  27          #if defined(__C51__) || defined(__CX51__)
  28                  #define CYPACKED
  29                  #define CYPACKED_ATTR
  30                  #define CYALIGNED
  31                  
  32              #define CY_CFG_UNUSED
  33                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  34          
  35          
  36          
  37                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  38                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  39                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  40          #else
                      #error Unsupported toolchain
              #endif
  43          
  44          
  45          
  46          /* Clock startup error codes                                                   */
  47          #define CYCLOCKSTART_NO_ERROR    0u
  48          #define CYCLOCKSTART_XTAL_ERROR  1u
  49          #define CYCLOCKSTART_32KHZ_ERROR 2u
  50          #define CYCLOCKSTART_PLL_ERROR   3u
  51          
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 2   

  52          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  53          /*******************************************************************************
  54          * Function Name: CyClockStartupError
  55          ********************************************************************************
  56          * Summary:
  57          *  If an error is encountered during clock configuration (crystal startup error,
  58          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  59          *  the customer, this function will stop in an infinite loop.
  60          *
  61          * Parameters:
  62          *   void
  63          *
  64          * Return:
  65          *   void
  66          *
  67          *******************************************************************************/
  68          CY_CFG_UNUSED
  69          static void CyClockStartupError(uint8 errorCode);
  70          CY_CFG_UNUSED
  71          static void CyClockStartupError(uint8 errorCode)
  72          {
  73   1          /* To remove the compiler warning if errorCode not used.                */
  74   1          errorCode = errorCode;
  75   1      
  76   1          /* `#START CyClockStartupError` */
  77   1      
  78   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  79   1          /* we will end up here to allow the customer to implement something to  */
  80   1          /* deal with the clock condition.                                       */
  81   1      
  82   1          /* `#END` */
  83   1      
  84   1          /* If nothing else, stop here since the clocks have not started         */
  85   1          /* correctly.                                                           */
  86   1          while(1) {}
  87   1      }
  88          #endif
  89          
  90          #define cfg_byte_table ((const void CYFAR *)0x080000u)
  91          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
  92          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x000804B8u)
  93          
  94          /* IOPINS0_3 Address: CYREG_PRT3_DM0 Size (bytes): 8 */
  95          #define BS_IOPINS0_3_VAL ((const uint8 CYFAR *)0x000804C0u)
  96          
  97          /* IOPINS0_4 Address: CYREG_PRT4_DM0 Size (bytes): 8 */
  98          #define BS_IOPINS0_4_VAL ((const uint8 CYFAR *)0x000804C8u)
  99          
 100          
 101          /*******************************************************************************
 102          * Function Name: ClockSetup
 103          ********************************************************************************
 104          *
 105          * Summary:
 106          *  Performs the initialization of all of the clocks in the device based on the
 107          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 108          *  clocks and setting the necessary dividers to produce the desired frequency. 
 109          *
 110          * Parameters:
 111          *  void
 112          *
 113          * Return:
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 3   

 114          *  void
 115          *
 116          *******************************************************************************/
 117          static void ClockSetup(void);
 118          static void ClockSetup(void)
 119          {
 120   1              uint32 timeout;
 121   1              uint8 pllLock;
 122   1      
 123   1      
 124   1              /* Configure Digital Clocks based on settings from Clock DWR */
 125   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0001u);
 126   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x18u);
 127   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x0007u);
 128   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG1_CFG0 + 0x2u), 0x18u);
 129   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG2_CFG0), 0x0017u);
 130   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG2_CFG0 + 0x2u), 0x18u);
 131   1      
 132   1              /* Configure ILO based on settings from Clock DWR */
 133   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 134   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 135   1      
 136   1              /* Configure IMO based on settings from Clock DWR */
 137   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 138   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 139   1      
 140   1              /* Configure PLL based on settings from Clock DWR */
 141   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 142   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 143   1              /* Wait up to 250us for the PLL to lock */
 144   1              pllLock = 0u;
 145   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 146   1              { 
 147   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 148   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 149   2              }
 150   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 151   1              if (timeout == 0u)
 152   1              {
 153   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 154   2              }
 155   1      
 156   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 157   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 158   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 159   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 160   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 161   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 162   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 163   1      
 164   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x07u
             -)));
 165   1      }
 166          
 167          
 168          /* Analog API Functions */
 169          
 170          
 171          /*******************************************************************************
 172          * Function Name: AnalogSetDefault
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 4   

 173          ********************************************************************************
 174          *
 175          * Summary:
 176          *  Sets up the analog portions of the chip to default values based on chip
 177          *  configuration options from the project.
 178          *
 179          * Parameters:
 180          *  void
 181          *
 182          * Return:
 183          *  void
 184          *
 185          *******************************************************************************/
 186          static void AnalogSetDefault(void);
 187          static void AnalogSetDefault(void)
 188          {
 189   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 190   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 191   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 192   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT4_AG, 0x01u);
 193   1              CY_SET_REG8((void CYXDATA *)CYREG_DAC2_SW0, 0x20u);
 194   1              CY_SET_REG8((void CYXDATA *)CYREG_CMP2_SW0, 0x10u);
 195   1              CY_SET_REG8((void CYXDATA *)CYREG_CMP2_SW4, 0x20u);
 196   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 197   1      }
 198          
 199          
 200          /*******************************************************************************
 201          * Function Name: SetAnalogRoutingPumps
 202          ********************************************************************************
 203          *
 204          * Summary:
 205          * Enables or disables the analog pumps feeding analog routing switches.
 206          * Intended to be called at startup, based on the Vdda system configuration;
 207          * may be called during operation when the user informs us that the Vdda voltage
 208          * crossed the pump threshold.
 209          *
 210          * Parameters:
 211          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 212          *
 213          * Return:
 214          *  void
 215          *
 216          *******************************************************************************/
 217          void SetAnalogRoutingPumps(uint8 enabled)
 218          {
 219   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 220   1              if (enabled != 0u)
 221   1              {
 222   2                      regValue |= 0x22u;
 223   2              }
 224   1              else
 225   1              {
 226   2                      regValue &= (uint8)~0x22u;
 227   2              }
 228   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 229   1      }
 230          
 231          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 232          
 233          
 234          /*******************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 5   

 235          * Function Name: cyfitter_cfg
 236          ********************************************************************************
 237          * Summary:
 238          *  This function is called by the start-up code for the selected device. It
 239          *  performs all of the necessary device configuration based on the design
 240          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 241          *  as Clocks and Pins as well as any component configuration that is necessary.
 242          *
 243          * Parameters:  
 244          *   void
 245          *
 246          * Return:
 247          *   void
 248          *
 249          *******************************************************************************/
 250          
 251          void cyfitter_cfg(void)
 252          {
 253   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 254   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 255   1      
 256   1              {
 257   2      
 258   2                      CYPACKED typedef struct {
 259   2                              void CYFAR *address;
 260   2                              uint16 size;
 261   2                      } CYPACKED_ATTR cfg_memset_t;
 262   2      
 263   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 264   2                              /* address, size */
 265   2                              {(void CYFAR *)(CYREG_TMR0_CFG0), 12u},
 266   2                              {(void CYFAR *)(CYREG_PRT0_DR), 32u},
 267   2                              {(void CYFAR *)(CYREG_PRT5_DR), 32u},
 268   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 269   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 270   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 271   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 272   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 273   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 274   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 275   2                      };
 276   2      
 277   2                      uint8 CYDATA i;
 278   2      
 279   2                      /* Zero out critical memory blocks before beginning configuration */
 280   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 281   2                      {
 282   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 283   3                              CYMEMZERO(ms->address, ms->size);
 284   3                      }
 285   2      
 286   2                      cfg_write_bytes(cfg_byte_table);
 287   2      
 288   2                      /* Perform normal device configuration. Order is not critical for these items. */
 289   2                      CY_SET_XTND_REG16((void CYFAR *)(CYREG_LUT2_CR), 0x0203u);
 290   2      
 291   2                      /* Enable digital routing */
 292   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 293   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 6   

 294   2      
 295   2                      /* Enable UDB array */
 296   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 297   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 298   2              }
 299   1      
 300   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 301   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 302   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT3_DM0), (const void CYFAR *)(BS_IOPINS0_3_VAL), 8u);
 303   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT4_DM0), (const void CYFAR *)(BS_IOPINS0_4_VAL), 8u);
 304   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 305   1      
 306   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 307   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 308   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 309   1              {
 310   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 311   2              }
 312   1      
 313   1      
 314   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 315   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 316   1              /* Setup clocks based on selections from Clock DWR */
 317   1              ClockSetup();
 318   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 319   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 320   1      
 321   1              /* Perform basic analog initialization to defaults */
 322   1              AnalogSetDefault();
 323   1      
 324   1              /* Configure alternate active mode */
 325   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 326   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 327   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0000         ?C0001:
                                           ; SOURCE LINE # 86
0000 80FE              SJMP    ?C0001
0002 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 125
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D01              MOV     R5,#01H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 126
000D 904082            MOV     DPTR,#04082H
0010 7418              MOV     A,#018H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0013 7B00              MOV     R3,#00H
0015 7A40              MOV     R2,#040H
0017 7984              MOV     R1,#084H
0019 7D07              MOV     R5,#07H
001B 7C00              MOV     R4,#00H
001D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 128
0020 904086            MOV     DPTR,#04086H
0023 7418              MOV     A,#018H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0026 7B00              MOV     R3,#00H
0028 7A40              MOV     R2,#040H
002A 7988              MOV     R1,#088H
002C 7D17              MOV     R5,#017H
002E 7C00              MOV     R4,#00H
0030 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 130
0033 90408A            MOV     DPTR,#0408AH
0036 7418              MOV     A,#018H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
0039 904300            MOV     DPTR,#04300H
003C 7402              MOV     A,#02H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
003F 904000            MOV     DPTR,#04000H
0042 7408              MOV     A,#08H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0045 904200            MOV     DPTR,#04200H
0048 7403              MOV     A,#03H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 8   

004B 7B0C              MOV     R3,#0CH
004D 7A01              MOV     R2,#01H
004F 7908              MOV     R1,#08H
0051 120000      E     LCALL   _cyread8
0054 9046A1            MOV     DPTR,#046A1H
0057 EF                MOV     A,R7
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0059 7B00              MOV     R3,#00H
005B 7A42              MOV     R2,#042H
005D 7922              MOV     R1,#022H
005F 7D08              MOV     R5,#08H
0061 7C00              MOV     R4,#00H
0063 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 142
0066 7B00              MOV     R3,#00H
0068 7A42              MOV     R2,#042H
006A 7920              MOV     R1,#020H
006C 7D51              MOV     R5,#051H
006E 7C12              MOV     R4,#012H
0070 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 144
0073 E4                CLR     A
0074 900000      R     MOV     DPTR,#pllLock
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
0078 7F19              MOV     R7,#019H
007A FE                MOV     R6,A
007B FD                MOV     R5,A
007C FC                MOV     R4,A
007D 900000      R     MOV     DPTR,#timeout
0080 120000      E     LCALL   ?C?LSTXDATA
0083         ?C0004:
0083 900000      R     MOV     DPTR,#timeout
0086 120000      E     LCALL   ?C?LLDXDATA
0089 D3                SETB    C
008A EF                MOV     A,R7
008B 9400              SUBB    A,#00H
008D EE                MOV     A,R6
008E 9400              SUBB    A,#00H
0090 403B              JC      ?C0005
0092 900000      R     MOV     DPTR,#pllLock
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 6403              XRL     A,#03H
0099 6032              JZ      ?C0005
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
009B 904225            MOV     DPTR,#04225H
009E E0                MOVX    A,@DPTR
009F 5401              ANL     A,#01H
00A1 FE                MOV     R6,A
00A2 EF                MOV     A,R7
00A3 25E0              ADD     A,ACC
00A5 4E                ORL     A,R6
00A6 5403              ANL     A,#03H
00A8 900000      R     MOV     DPTR,#pllLock
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
00AC E4                CLR     A
00AD 7FE0              MOV     R7,#0E0H
00AF 7E01              MOV     R6,#01H
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 9   

00B1 FD                MOV     R5,A
00B2 FC                MOV     R4,A
00B3 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 149
00B6 900000      R     MOV     DPTR,#timeout
00B9 120000      E     LCALL   ?C?LLDXDATA
00BC 74FF              MOV     A,#0FFH
00BE FB                MOV     R3,A
00BF FA                MOV     R2,A
00C0 F9                MOV     R1,A
00C1 F8                MOV     R0,A
00C2 120000      E     LCALL   ?C?LADD
00C5 900000      R     MOV     DPTR,#timeout
00C8 120000      E     LCALL   ?C?LSTXDATA
00CB 80B6              SJMP    ?C0004
00CD         ?C0005:
                                           ; SOURCE LINE # 151
00CD 900000      R     MOV     DPTR,#timeout
00D0 120000      E     LCALL   ?C?LLDXDATA
00D3 EF                MOV     A,R7
00D4 4E                ORL     A,R6
00D5 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
00D7 7F03              MOV     R7,#03H
00D9 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 154
00DC         ?C0007:
                                           ; SOURCE LINE # 157
00DC 7B00              MOV     R3,#00H
00DE 7A40              MOV     R2,#040H
00E0 7904              MOV     R1,#04H
00E2 7D00              MOV     R5,#00H
00E4 7C01              MOV     R4,#01H
00E6 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 158
00E9 904004            MOV     DPTR,#04004H
00EC 7407              MOV     A,#07H
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
00EF 904006            MOV     DPTR,#04006H
00F2 E4                CLR     A
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
00F4 904008            MOV     DPTR,#04008H
00F7 7448              MOV     A,#048H
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
00FA 904004            MOV     DPTR,#04004H
00FD E4                CLR     A
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
00FF 904001            MOV     DPTR,#04001H
0102 7402              MOV     A,#02H
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
0105 9043A2            MOV     DPTR,#043A2H
0108 E0                MOVX    A,@DPTR
0109 4407              ORL     A,#07H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
010C 22                RET     
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 10  

             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
;---- Variable 'bg_xover_inl_trim' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 190
0009 EF                MOV     A,R7
000A 5407              ANL     A,#07H
000C 90586E            MOV     DPTR,#0586EH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0010 EF                MOV     A,R7
0011 C4                SWAP    A
0012 540F              ANL     A,#0FH
0014 A3                INC     DPTR
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
0016 90514D            MOV     DPTR,#0514DH
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
001C 905A90            MOV     DPTR,#05A90H
001F 7420              MOV     A,#020H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
0022 905AD0            MOV     DPTR,#05AD0H
0025 7410              MOV     A,#010H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0028 905AD4            MOV     DPTR,#05AD4H
002B 7420              MOV     A,#020H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
002E 905876            MOV     DPTR,#05876H
0031 7444              MOV     A,#044H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
0034 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 217
;---- Variable 'enabled' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0000 905876            MOV     DPTR,#05876H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
;---- Variable 'regValue' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 220
0005 EF                MOV     A,R7
0006 6006              JZ      ?C0010
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
0008 EE                MOV     A,R6
0009 4422              ORL     A,#022H
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 11  

000B FE                MOV     R6,A
                                           ; SOURCE LINE # 223
000C 8004              SJMP    ?C0011
000E         ?C0010:
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
000E EE                MOV     A,R6
000F 54DD              ANL     A,#0DDH
0011 FE                MOV     R6,A
                                           ; SOURCE LINE # 227
0012         ?C0011:
                                           ; SOURCE LINE # 228
0012 AF06              MOV     R7,AR6
0014 905876            MOV     DPTR,#05876H
0017 EE                MOV     A,R6
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
0019 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 254
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 280
0016 E4                CLR     A
0017 F500        R     MOV     i,A
0019         ?C0013:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 940A              SUBB    A,#0AH
001E 502C              JNC     ?C0014
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
0020 E500        R     MOV     A,i
0022 75F005            MOV     B,#05H
0025 A4                MUL     AB
0026 2400        R     ADD     A,#LOW cfg_memset_list
0028 F582              MOV     DPL,A
002A E4                CLR     A
002B 3400        R     ADDC    A,#HIGH cfg_memset_list
002D AF82              MOV     R7,DPL
002F F500        R     MOV     ms,A
0031 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 283
0033 F583              MOV     DPH,A
0035 120000      E     LCALL   ?C?PLDCODE
0038 8F82              MOV     DPL,R7
003A 850083      R     MOV     DPH,ms
003D 7403              MOV     A,#03H
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 12  

003F 93                MOVC    A,@A+DPTR
0040 FC                MOV     R4,A
0041 7404              MOV     A,#04H
0043 93                MOVC    A,@A+DPTR
0044 FD                MOV     R5,A
0045 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 284
0048 0500        R     INC     i
004A 80CD              SJMP    ?C0013
004C         ?C0014:
                                           ; SOURCE LINE # 286
004C 7B08              MOV     R3,#08H
004E 7A00              MOV     R2,#00H
0050 7900              MOV     R1,#00H
0052 120000      E     LCALL   _cfg_write_bytes
                                           ; SOURCE LINE # 289
0055 7B00              MOV     R3,#00H
0057 7A58              MOV     R2,#058H
0059 794C              MOV     R1,#04CH
005B 7D03              MOV     R5,#03H
005D 7C02              MOV     R4,#02H
005F 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 292
0062 7B01              MOV     R3,#01H
0064 7A50              MOV     R2,#050H
0066 7903              MOV     R1,#03H
0068 120000      E     LCALL   _cyread8
006B EF                MOV     A,R7
006C 4402              ORL     A,#02H
006E FD                MOV     R5,A
006F 7B01              MOV     R3,#01H
0071 7A50              MOV     R2,#050H
0073 7903              MOV     R1,#03H
0075 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 293
0078 7B01              MOV     R3,#01H
007A 7A50              MOV     R2,#050H
007C 7913              MOV     R1,#013H
007E 120000      E     LCALL   _cyread8
0081 EF                MOV     A,R7
0082 4402              ORL     A,#02H
0084 FD                MOV     R5,A
0085 7B01              MOV     R3,#01H
0087 7A50              MOV     R2,#050H
0089 7913              MOV     R1,#013H
008B 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 296
008E 9043A0            MOV     DPTR,#043A0H
0091 E0                MOVX    A,@DPTR
0092 4440              ORL     A,#040H
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
0095 9043C2            MOV     DPTR,#043C2H
0098 E0                MOVX    A,@DPTR
0099 4410              ORL     A,#010H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 301
009C 7B08              MOV     R3,#08H
009E 7A04              MOV     R2,#04H
00A0 79B8              MOV     R1,#0B8H
00A2 C003              PUSH    AR3
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 13  

00A4 C002              PUSH    AR2
00A6 C001              PUSH    AR1
00A8 7B00              MOV     R3,#00H
00AA 7A51              MOV     R2,#051H
00AC 7922              MOV     R1,#022H
00AE 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00B1 120000      E     LCALL   ?C?PSTXDATA
00B4 D001              POP     AR1
00B6 D002              POP     AR2
00B8 D003              POP     AR3
00BA 7F08              MOV     R7,#08H
00BC 7E00              MOV     R6,#00H
00BE 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 302
00C1 7B08              MOV     R3,#08H
00C3 7A04              MOV     R2,#04H
00C5 79C0              MOV     R1,#0C0H
00C7 C003              PUSH    AR3
00C9 C002              PUSH    AR2
00CB C001              PUSH    AR1
00CD 7B00              MOV     R3,#00H
00CF 7A51              MOV     R2,#051H
00D1 7932              MOV     R1,#032H
00D3 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00D6 120000      E     LCALL   ?C?PSTXDATA
00D9 D001              POP     AR1
00DB D002              POP     AR2
00DD D003              POP     AR3
00DF 7F08              MOV     R7,#08H
00E1 7E00              MOV     R6,#00H
00E3 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 303
00E6 7B08              MOV     R3,#08H
00E8 7A04              MOV     R2,#04H
00EA 79C8              MOV     R1,#0C8H
00EC C003              PUSH    AR3
00EE C002              PUSH    AR2
00F0 C001              PUSH    AR1
00F2 7B00              MOV     R3,#00H
00F4 7A51              MOV     R2,#051H
00F6 7942              MOV     R1,#042H
00F8 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00FB 120000      E     LCALL   ?C?PSTXDATA
00FE D001              POP     AR1
0100 D002              POP     AR2
0102 D003              POP     AR3
0104 7F08              MOV     R7,#08H
0106 7E00              MOV     R6,#00H
0108 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 304
010B 9044F4            MOV     DPTR,#044F4H
010E 7401              MOV     A,#01H
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
0111 904322            MOV     DPTR,#04322H
0114 E0                MOVX    A,@DPTR
0115 4408              ORL     A,#08H
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
0118 9046EC            MOV     DPTR,#046ECH
011B E0                MOVX    A,@DPTR
011C C3                CLR     C
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/26/2015 03:45:56 PAGE 14  

011D 9405              SUBB    A,#05H
011F 5006              JNC     ?C0016
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0121 904689            MOV     DPTR,#04689H
0124 743A              MOV     A,#03AH
0126 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
0127         ?C0016:
                                           ; SOURCE LINE # 315
0127 904800            MOV     DPTR,#04800H
012A 74F1              MOV     A,#0F1H
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
012D 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 319
0130 904800            MOV     DPTR,#04800H
0133 74B1              MOV     A,#0B1H
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
0136 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 325
0139 7B00              MOV     R3,#00H
013B 7A43              MOV     R2,#043H
013D 79A0              MOV     R1,#0A0H
013F C001              PUSH    AR1
0141 79B0              MOV     R1,#0B0H
0143 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0146 120000      E     LCALL   ?C?PSTXDATA
0149 D001              POP     AR1
014B 7F0E              MOV     R7,#0EH
014D 7E00              MOV     R6,#00H
014F 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 326
0152 9043B0            MOV     DPTR,#043B0H
0155 E0                MOVX    A,@DPTR
0156 54FD              ANL     A,#0FDH
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0159 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    697    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
