C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Release\CyFlash.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,.\Generated_Source\PSoC3) FF(3) DB WL(2) P
                    -R(.\DP8051\DP8051_Keil_951\Release/CyFlash.lst) CD OT(8,SIZE) OJ(.\DP8051\DP8051_Keil_951\Release\CyFlash.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: CyFlash.c
   3          * Version 4.20
   4          *
   5          *  Description:
   6          *   Provides an API for the FLASH/EEPROM.
   7          *
   8          *  Note:
   9          *   This code is endian agnostic.
  10          *
  11          *  Note:
  12          *   Documentation of the API's in this file is located in the
  13          *   System Reference Guide provided with PSoC Creator.
  14          *
  15          ********************************************************************************
  16          * Copyright 2008-2014, Cypress Semiconductor Corporation. All rights reserved.
  17          * You may use this file only in accordance with the license, terms, conditions,
  18          * disclaimers, and limitations in the end user license agreement accompanying
  19          * the software package with which this file was provided.
  20          *******************************************************************************/
  21          
  22          #include "CyFlash.h"
  23          
  24          /*  The number of EEPROM arrays */
  25          #define CY_FLASH_EEPROM_NUMBER_ARRAYS                 (1u)
  26          
  27          
  28          /*******************************************************************************
  29          * Holds the die temperature, updated by CySetTemp(). Used for flash writing.
  30          * The first byte is the sign of the temperature (0 = negative, 1 = positive).
  31          * The second byte is the magnitude.
  32          *******************************************************************************/
  33          uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
  34          
  35          #if(CYDEV_ECC_ENABLE == 0)
  36              static uint8 * rowBuffer = 0;
  37          #endif  /* (CYDEV_ECC_ENABLE == 0) */
  38          
  39          
  40          static cystatus CySetTempInt(void);
  41          static cystatus CyFlashGetSpcAlgorithm(void);
  42          
  43          
  44          /*******************************************************************************
  45          * Function Name: CyFlash_Start
  46          ********************************************************************************
  47          *
  48          * Summary:
  49          *  Enable the Flash.
  50          *
  51          * Parameters:
  52          *  None
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 2   

  53          *
  54          * Return:
  55          *  None
  56          *
  57          *******************************************************************************/
  58          void CyFlash_Start(void) 
  59          {
  60   1          uint8 interruptState;
  61   1      
  62   1          interruptState = CyEnterCriticalSection();
  63   1      
  64   1      
  65   1          /***************************************************************************
  66   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
  67   1          * is required for the SPC to function.
  68   1          ***************************************************************************/
  69   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
  70   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
  71   1      
  72   1      
  73   1          /***************************************************************************
  74   1          * The wake count defines the number of Bus Clock cycles it takes for the
  75   1          * flash or eeprom to wake up from a low power mode independent of the chip
  76   1          * power mode. Wake up time for these blocks is 5 us.
  77   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
  78   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
  79   1          * This register needs to be written with a value dependent on the Bus Clock
  80   1          * frequency so that the duration of the cycles is equal to or greater than
  81   1          * the 5 us delay required.
  82   1          ***************************************************************************/
  83   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
  84   1      
  85   1      
  86   1          /***************************************************************************
  87   1          * Enable flash. Active flash macros consume current, but re-enabling a
  88   1          * disabled flash macro takes 5us. If the CPU attempts to fetch out of the
  89   1          * macro during that time, it will be stalled. This bit allows the flash to
  90   1          * be enabled even if the CPU is disabled, which allows a quicker return to
  91   1          * code execution.
  92   1          ***************************************************************************/
  93   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_FM;
  94   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_FM;
  95   1      
  96   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
  97   1          {
  98   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
  99   2          }
 100   1      
 101   1          CyExitCriticalSection(interruptState);
 102   1      }
 103          
 104          
 105          /*******************************************************************************
 106          * Function Name: CyFlash_Stop
 107          ********************************************************************************
 108          *
 109          * Summary:
 110          *  Disable the Flash.
 111          *
 112          * Parameters:
 113          *  None
 114          *
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 3   

 115          * Return:
 116          *  None
 117          *
 118          * Side Effects:
 119          *  This setting is ignored as long as the CPU is currently running.  This will
 120          *  only take effect when the CPU is later disabled.
 121          *
 122          *******************************************************************************/
 123          void CyFlash_Stop(void) 
 124          {
 125   1          uint8 interruptState;
 126   1      
 127   1          interruptState = CyEnterCriticalSection();
 128   1      
 129   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_FM));
 130   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_FM));
 131   1      
 132   1          CyExitCriticalSection(interruptState);
 133   1      }
 134          
 135          
 136          /*******************************************************************************
 137          * Function Name: CySetTempInt
 138          ********************************************************************************
 139          *
 140          * Summary:
 141          *  Sends a command to the SPC to read the die temperature. Sets a global value
 142          *  used by the Write function. This function must be called once before
 143          *  executing a series of Flash writing functions.
 144          *
 145          * Parameters:
 146          *  None
 147          *
 148          * Return:
 149          *  status:
 150          *   CYRET_SUCCESS - if successful
 151          *   CYRET_LOCKED  - if Flash writing already in use
 152          *   CYRET_UNKNOWN - if there was an SPC error
 153          *
 154          *******************************************************************************/
 155          static cystatus CySetTempInt(void) 
 156          {
 157   1          cystatus status;
 158   1      
 159   1          /* Make sure SPC is powered */
 160   1          CySpcStart();
 161   1      
 162   1          /* Plan for failure. */
 163   1          status = CYRET_UNKNOWN;
 164   1      
 165   1          if(CySpcLock() == CYRET_SUCCESS)
 166   1          {
 167   2              /* Write the command. */
 168   2              if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES))
 169   2              {
 170   3                  do
 171   3                  {
 172   4                      if(CySpcReadData(dieTemperature, CY_FLASH_DIE_TEMP_DATA_SIZE) == CY_FLASH_DIE_TEMP_DATA_SI
             -ZE)
 173   4                      {
 174   5                          status = CYRET_SUCCESS;
 175   5      
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 4   

 176   5                          while(CY_SPC_BUSY)
 177   5                          {
 178   6                              /* Spin until idle. */
 179   6                              CyDelayUs(1u);
 180   6                          }
 181   5                          break;
 182   5                      }
 183   4      
 184   4                  } while(CY_SPC_BUSY);
 185   3              }
 186   2      
 187   2              CySpcUnlock();
 188   2          }
 189   1          else
 190   1          {
 191   2              status = CYRET_LOCKED;
 192   2          }
 193   1      
 194   1          return (status);
 195   1      }
 196          
 197          
 198          /*******************************************************************************
 199          * Function Name: CyFlashGetSpcAlgorithm
 200          ********************************************************************************
 201          *
 202          * Summary:
 203          *  Sends a command to the SPC to download code into RAM.
 204          *
 205          * Parameters:
 206          *  None
 207          *
 208          * Return:
 209          *  status:
 210          *   CYRET_SUCCESS - if successful
 211          *   CYRET_LOCKED  - if Flash writing already in use
 212          *   CYRET_UNKNOWN - if there was an SPC error
 213          *
 214          *******************************************************************************/
 215          static cystatus CyFlashGetSpcAlgorithm(void) 
 216          {
 217   1          cystatus status;
 218   1      
 219   1          /* Make sure SPC is powered */
 220   1          CySpcStart();
 221   1      
 222   1          if(CySpcLock() == CYRET_SUCCESS)
 223   1          {
 224   2              status = CySpcGetAlgorithm();
 225   2      
 226   2              if(CYRET_STARTED == status)
 227   2              {
 228   3                  while(CY_SPC_BUSY)
 229   3                  {
 230   4                      /* Spin until idle. */
 231   4                      CyDelayUs(1u);
 232   4                  }
 233   3      
 234   3                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 235   3                  {
 236   4                      status = CYRET_SUCCESS;
 237   4                  }
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 5   

 238   3              }
 239   2              CySpcUnlock();
 240   2          }
 241   1          else
 242   1          {
 243   2              status = CYRET_LOCKED;
 244   2          }
 245   1      
 246   1          return (status);
 247   1      }
 248          
 249          
 250          /*******************************************************************************
 251          * Function Name: CySetTemp
 252          ********************************************************************************
 253          *
 254          * Summary:
 255          *  This is a wraparound for CySetTempInt(). It is used to return the second
 256          *  successful read of the temperature value.
 257          *
 258          * Parameters:
 259          *  None
 260          *
 261          * Return:
 262          *  status:
 263          *   CYRET_SUCCESS if successful.
 264          *   CYRET_LOCKED  if Flash writing already in use
 265          *   CYRET_UNKNOWN if there was an SPC error.
 266          *
 267          *  uint8 dieTemperature[2]:
 268          *   Holds the die temperature for the flash writing algorithm. The first byte is
 269          *   the sign of the temperature (0 = negative, 1 = positive). The second byte is
 270          *   the magnitude.
 271          *
 272          *******************************************************************************/
 273          cystatus CySetTemp(void) 
 274          {
 275   1          cystatus status = CyFlashGetSpcAlgorithm();
 276   1      
 277   1          if(status == CYRET_SUCCESS)
 278   1          {
 279   2              status = CySetTempInt();
 280   2          }
 281   1      
 282   1          return (status);
 283   1      }
 284          
 285          
 286          /*******************************************************************************
 287          * Function Name: CySetFlashEEBuffer
 288          ********************************************************************************
 289          *
 290          * Summary:
 291          *  Sets the user supplied temporary buffer to store SPC data while performing
 292          *  Flash and EEPROM commands. This buffer is only necessary when the Flash ECC is
 293          *  disabled.
 294          *
 295          * Parameters:
 296          *  buffer:
 297          *   The address of a block of memory to store temporary memory. The size of the block
 298          *   of memory is CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE.
 299          *
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 6   

 300          * Return:
 301          *  status:
 302          *   CYRET_SUCCESS if successful.
 303          *   CYRET_BAD_PARAM if the buffer is NULL
 304          *
 305          *******************************************************************************/
 306          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 307          {
 308   1          cystatus status = CYRET_SUCCESS;
 309   1      
 310   1          CySpcStart();
 311   1      
 312   1          #if(CYDEV_ECC_ENABLE == 0)
 313   1      
 314   1              if(NULL == buffer)
 315   1              {
 316   2                  rowBuffer = rowBuffer;
 317   2                  status = CYRET_BAD_PARAM;
 318   2              }
 319   1              else if(CySpcLock() != CYRET_SUCCESS)
 320   1              {
 321   2                  rowBuffer = rowBuffer;
 322   2                  status = CYRET_LOCKED;
 323   2              }
 324   1              else
 325   1              {
 326   2                  rowBuffer = buffer;
 327   2                  CySpcUnlock();
 328   2              }
 329   1      
 330   1          #else
              
                      /* To suppress warning */
                      buffer = buffer;
              
                  #endif  /* (CYDEV_ECC_ENABLE == 0u) */
 336   1      
 337   1          return(status);
 338   1      }
 339          
 340          
 341          /*******************************************************************************
 342          * Function Name: CyWriteRowData
 343          ********************************************************************************
 344          *
 345          * Summary:
 346          *  Sends a command to the SPC to load and program a row of data in
 347          *  Flash or EEPROM.
 348          *
 349          * Parameters:
 350          *  arrayID:    ID of the array to write.
 351          *   The type of write, Flash or EEPROM, is determined from the array ID.
 352          *   The arrays in the part are sequential starting at the first ID for the
 353          *   specific memory type. The array ID for the Flash memory lasts from 0x00 to
 354          *   0x3F and for the EEPROM memory it lasts from 0x40 to 0x7F.
 355          *  rowAddress: rowAddress of flash row to program.
 356          *  rowData:    Array of bytes to write.
 357          *
 358          * Return:
 359          *  status:
 360          *   CYRET_SUCCESS if successful.
 361          *   CYRET_LOCKED if the SPC is already in use.
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 7   

 362          *   CYRET_CANCELED if command not accepted
 363          *   CYRET_UNKNOWN if there was an SPC error.
 364          *
 365          *******************************************************************************/
 366          cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
 367          {
 368   1          uint16 rowSize;
 369   1          cystatus status;
 370   1      
 371   1          rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? CYDEV_EEPROM_ROW_SIZE : CYDEV_FLS_ROW_SIZE;
 372   1          status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
 373   1      
 374   1          return(status);
 375   1      }
 376          
 377          
 378          /*******************************************************************
 379          * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 380          * Data in ECC" DWR options are disabled, ECC section is available
 381          * for user data.
 382          *******************************************************************/
 383          #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowConfig
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sends a command to the SPC to load and program a row of config data in the Flash.
                  *  This function is only valid for Flash array IDs (not for EEPROM).
                  *
                  * Parameters:
                  *  arrayId:      ID of the array to write
                  *   The arrays in the part are sequential starting at the first ID for the
                  *   specific memory type. The array ID for the Flash memory lasts
                  *   from 0x00 to 0x3F.
                  *  rowAddress:   The address of the sector to erase.
                  *  rowECC:       The array of bytes to write.
                  *
                  * Return:
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC)\
                  
                  {
                      cystatus status;
              
                      status = CyWriteRowFull(arrayId, rowAddress, rowECC, CYDEV_ECC_ROW_SIZE);
              
                      return (status);
                  }
              
              #endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 420          
 421          
 422          
 423          /*******************************************************************************
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 8   

 424          * Function Name: CyWriteRowFull
 425          ********************************************************************************
 426          * Summary:
 427          *  Sends a command to the SPC to load and program a row of data in the Flash.
 428          *  rowData array is expected to contain Flash and ECC data if needed.
 429          *
 430          * Parameters:
 431          *  arrayId:    FLASH or EEPROM array id.
 432          *  rowData:    Pointer to a row of data to write.
 433          *  rowNumber:  Zero based number of the row.
 434          *  rowSize:    Size of the row.
 435          *
 436          * Return:
 437          *  CYRET_SUCCESS if successful.
 438          *  CYRET_LOCKED if the SPC is already in use.
 439          *  CYRET_CANCELED if command not accepted
 440          *  CYRET_UNKNOWN if there was an SPC error.
 441          *
 442          *******************************************************************************/
 443          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8* rowData, uint16 rowSize) \
 444                  
 445          {
 446   1          cystatus status = CYRET_SUCCESS;
 447   1      
 448   1          if((arrayId <=  CY_SPC_LAST_FLASH_ARRAYID) && (arrayId > (CY_FLASH_NUMBER_ARRAYS  + CY_SPC_FIRST_FLASH
             -_ARRAYID)))
 449   1          {
 450   2              status = CYRET_BAD_PARAM;
 451   2          }
 452   1      
 453   1          if(arrayId > CY_SPC_LAST_EE_ARRAYID)
 454   1          {
 455   2              status = CYRET_BAD_PARAM;
 456   2          }
 457   1      
 458   1          if((arrayId >= CY_SPC_FIRST_EE_ARRAYID) && (arrayId > (CY_FLASH_EEPROM_NUMBER_ARRAYS + CY_SPC_FIRST_EE
             -_ARRAYID)))
 459   1          {
 460   2              status = CYRET_BAD_PARAM;
 461   2          }
 462   1      
 463   1          if(arrayId <=  CY_SPC_LAST_FLASH_ARRAYID)
 464   1          {
 465   2              /* Flash */
 466   2              if(rowNumber > (CY_FLASH_NUMBER_ROWS/CY_FLASH_NUMBER_ARRAYS))
 467   2              {
 468   3                  status = CYRET_BAD_PARAM;
 469   3              }
 470   2          }
 471   1          else
 472   1          {
 473   2              /* EEPROM */
 474   2              if(rowNumber > (CY_EEPROM_NUMBER_ROWS/CY_FLASH_EEPROM_NUMBER_ARRAYS))
 475   2              {
 476   3                  status = CYRET_BAD_PARAM;
 477   3              }
 478   2      
 479   2              if(CY_EEPROM_SIZEOF_ROW != rowSize)
 480   2              {
 481   3                  status = CYRET_BAD_PARAM;
 482   3              }
 483   2          }
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 9   

 484   1      
 485   1          if(rowData == NULL)
 486   1          {
 487   2              status = CYRET_BAD_PARAM;
 488   2          }
 489   1      
 490   1      
 491   1          if(status == CYRET_SUCCESS)
 492   1          {
 493   2              if(CySpcLock() == CYRET_SUCCESS)
 494   2              {
 495   3                  /* Load row data into SPC internal latch */
 496   3                  status = CySpcLoadRowFull(arrayId, rowNumber, rowData, rowSize);
 497   3      
 498   3                  if(CYRET_STARTED == status)
 499   3                  {
 500   4                      while(CY_SPC_BUSY)
 501   4                      {
 502   5                          /* Wait for SPC to finish and get SPC status */
 503   5                          CyDelayUs(1u);
 504   5                      }
 505   4      
 506   4                      /* Hide SPC status */
 507   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 508   4                      {
 509   5                          status = CYRET_SUCCESS;
 510   5                      }
 511   4                      else
 512   4                      {
 513   5                          status = CYRET_UNKNOWN;
 514   5                      }
 515   4      
 516   4                      if(CYRET_SUCCESS == status)
 517   4                      {
 518   5                          /* Erase and program flash with data from SPC interval latch */
 519   5                          status = CySpcWriteRow(arrayId, rowNumber, dieTemperature[0u], dieTemperature[1u]);
 520   5      
 521   5                          if(CYRET_STARTED == status)
 522   5                          {
 523   6                              while(CY_SPC_BUSY)
 524   6                              {
 525   7                                  /* Wait for SPC to finish and get SPC status */
 526   7                                  CyDelayUs(1u);
 527   7                              }
 528   6      
 529   6                              /* Hide SPC status */
 530   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 531   6                              {
 532   7                                  status = CYRET_SUCCESS;
 533   7                              }
 534   6                              else
 535   6                              {
 536   7                                  status = CYRET_UNKNOWN;
 537   7                              }
 538   6                          }
 539   5                      }
 540   4                  }
 541   3                  CySpcUnlock();
 542   3              }   /* if(CySpcLock() == CYRET_SUCCESS) */
 543   2              else
 544   2              {
 545   3                  status = CYRET_LOCKED;
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 10  

 546   3              }
 547   2          }
 548   1      
 549   1          return(status);
 550   1      }
 551          
 552          
 553          /*******************************************************************************
 554          * Function Name: CyFlash_SetWaitCycles
 555          ********************************************************************************
 556          *
 557          * Summary:
 558          *  Sets the number of clock cycles the cache will wait before it samples data
 559          *  coming back from the Flash. This function must be called before increasing the CPU
 560          *  clock frequency. It can optionally be called after lowering the CPU clock
 561          *  frequency in order to improve the CPU performance.
 562          *
 563          * Parameters:
 564          *  uint8 freq:
 565          *   Frequency of operation in Megahertz.
 566          *
 567          * Return:
 568          *  None
 569          *
 570          *******************************************************************************/
 571          void CyFlash_SetWaitCycles(uint8 freq) 
 572          {
 573   1          uint8 interruptState;
 574   1      
 575   1          /* Save current global interrupt enable and disable it */
 576   1          interruptState = CyEnterCriticalSection();
 577   1      
 578   1          /***************************************************************************
 579   1          * The number of clock cycles the cache will wait before it samples data
 580   1          * coming back from the Flash must be equal or greater to to the CPU frequency
 581   1          * outlined in clock cycles.
 582   1          ***************************************************************************/
 583   1      
 584   1          if (freq < CY_FLASH_CACHE_WS_1_FREQ_MAX)
 585   1          {
 586   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 587   2                                          CY_FLASH_CACHE_WS_1_VALUE_MASK;
 588   2          }
 589   1          else if (freq < CY_FLASH_CACHE_WS_2_FREQ_MAX)
 590   1          {
 591   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 592   2                                          CY_FLASH_CACHE_WS_2_VALUE_MASK;
 593   2          }
 594   1          else if (freq < CY_FLASH_CACHE_WS_3_FREQ_MAX)
 595   1          {
 596   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 597   2                                          CY_FLASH_CACHE_WS_3_VALUE_MASK;
 598   2          }
 599   1      #if (CY_PSOC5)
                  else if (freq < CY_FLASH_CACHE_WS_4_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
                                                  CY_FLASH_CACHE_WS_4_VALUE_MASK;
                  }
                  else if (freq <= CY_FLASH_CACHE_WS_5_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 11  

                                                  CY_FLASH_CACHE_WS_5_VALUE_MASK;
                  }
              #endif  /* (CY_PSOC5) */
 611   1          else
 612   1          {
 613   2              /* Halt CPU in debug mode if frequency is invalid */
 614   2              CYASSERT(0u != 0u);
 615   2          }
 616   1      
 617   1          /* Restore global interrupt enable state */
 618   1          CyExitCriticalSection(interruptState);
 619   1      }
 620          
 621          
 622          /*******************************************************************************
 623          * Function Name: CyEEPROM_Start
 624          ********************************************************************************
 625          *
 626          * Summary:
 627          *  Enable the EEPROM.
 628          *
 629          * Parameters:
 630          *  None
 631          *
 632          * Return:
 633          *  None
 634          *
 635          *******************************************************************************/
 636          void CyEEPROM_Start(void) 
 637          {
 638   1          uint8 interruptState;
 639   1      
 640   1          interruptState = CyEnterCriticalSection();
 641   1      
 642   1      
 643   1          /***************************************************************************
 644   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
 645   1          * is required for the SPC to function.
 646   1          ***************************************************************************/
 647   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
 648   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
 649   1      
 650   1      
 651   1          /***************************************************************************
 652   1          * The wake count defines the number of Bus Clock cycles it takes for the
 653   1          * flash or EEPROM to wake up from a low power mode independent of the chip
 654   1          * power mode. Wake up time for these blocks is 5 us.
 655   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
 656   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
 657   1          * This register needs to be written with a value dependent on the Bus Clock
 658   1          * frequency so that the duration of the cycles is equal to or greater than
 659   1          * the 5 us delay required.
 660   1          ***************************************************************************/
 661   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
 662   1      
 663   1      
 664   1          /***************************************************************************
 665   1          * Enable EEPROM. Re-enabling an EEPROM macro takes 5us. During this time,
 666   1          * the EE will not acknowledge a PHUB request.
 667   1          ***************************************************************************/
 668   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_EE;
 669   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_EE;
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 12  

 670   1      
 671   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
 672   1          {
 673   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
 674   2          }
 675   1      
 676   1          CyExitCriticalSection(interruptState);
 677   1      }
 678          
 679          
 680          /*******************************************************************************
 681          * Function Name: CyEEPROM_Stop
 682          ********************************************************************************
 683          *
 684          * Summary:
 685          *  Disable the EEPROM.
 686          *
 687          * Parameters:
 688          *  None
 689          *
 690          * Return:
 691          *  None
 692          *
 693          *******************************************************************************/
 694          void CyEEPROM_Stop (void) 
 695          {
 696   1          uint8 interruptState;
 697   1      
 698   1          interruptState = CyEnterCriticalSection();
 699   1      
 700   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_EE));
 701   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_EE));
 702   1      
 703   1          CyExitCriticalSection(interruptState);
 704   1      }
 705          
 706          
 707          /*******************************************************************************
 708          * Function Name: CyEEPROM_ReadReserve
 709          ********************************************************************************
 710          *
 711          * Summary:
 712          *  Request access to the EEPROM for reading and wait until access is available.
 713          *
 714          * Parameters:
 715          *  None
 716          *
 717          * Return:
 718          *  None
 719          *
 720          *******************************************************************************/
 721          void CyEEPROM_ReadReserve(void) 
 722          {
 723   1          /* Make request for PHUB to have access */
 724   1          CY_FLASH_EE_SCR_REG |= CY_FLASH_EE_SCR_AHB_EE_REQ;
 725   1      
 726   1          while (0u == (CY_FLASH_EE_SCR_REG & CY_FLASH_EE_SCR_AHB_EE_ACK))
 727   1          {
 728   2              /* Wait for acknowledgment from PHUB */
 729   2          }
 730   1      }
 731          
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 13  

 732          
 733          /*******************************************************************************
 734          * Function Name: CyEEPROM_ReadRelease
 735          ********************************************************************************
 736          *
 737          * Summary:
 738          *  Release the read reservation of the EEPROM.
 739          *
 740          * Parameters:
 741          *  None
 742          *
 743          * Return:
 744          *  None
 745          *
 746          *******************************************************************************/
 747          void CyEEPROM_ReadRelease(void) 
 748          {
 749   1          CY_FLASH_EE_SCR_REG &= (uint8)(~CY_FLASH_EE_SCR_AHB_EE_REQ);
 750   1      }
 751          
 752          
 753          /* [] END OF FILE */
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyFlash_Start (BEGIN)
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 62
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 69
0003 9043A0            MOV     DPTR,#043A0H
0006 E0                MOVX    A,@DPTR
0007 4408              ORL     A,#08H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
000A 9043B0            MOV     DPTR,#043B0H
000D E0                MOVX    A,@DPTR
000E 4408              ORL     A,#08H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0011 904701            MOV     DPTR,#04701H
0014 74C8              MOV     A,#0C8H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
0017 9043AC            MOV     DPTR,#043ACH
001A E0                MOVX    A,@DPTR
001B 4401              ORL     A,#01H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
001E 9043BC            MOV     DPTR,#043BCH
0021 E0                MOVX    A,@DPTR
0022 4401              ORL     A,#01H
0024 F0                MOVX    @DPTR,A
0025         ?C0001:
                                           ; SOURCE LINE # 96
0025 904700            MOV     DPTR,#04700H
0028 E0                MOVX    A,@DPTR
0029 5420              ANL     A,#020H
002B 60F8              JZ      ?C0001
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 99
002D         ?C0002:
                                           ; SOURCE LINE # 101
002D 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 102
0030 22                RET     
             ; FUNCTION CyFlash_Start (END)

             ; FUNCTION CyFlash_Stop (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 127
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 129
0003 9043AC            MOV     DPTR,#043ACH
0006 E0                MOVX    A,@DPTR
0007 54FE              ANL     A,#0FEH
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
000A 9043BC            MOV     DPTR,#043BCH
000D E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 15  

000E 54FE              ANL     A,#0FEH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0011 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 133
0014 22                RET     
             ; FUNCTION CyFlash_Stop (END)

             ; FUNCTION CySetTempInt (BEGIN)
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 160
0000 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 163
0003 900000      R     MOV     DPTR,#status
0006 74FF              MOV     A,#0FFH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0009 120000      E     LCALL   CySpcLock
000C EF                MOV     A,R7
000D 703B              JNZ     ?C0005
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 168
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _CySpcGetTemp
0014 EF                MOV     A,R7
0015 6407              XRL     A,#07H
0017 702C              JNZ     ?C0006
                                           ; SOURCE LINE # 169
0019         ?C0009:
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
0019 7B01              MOV     R3,#01H
001B 7A00        R     MOV     R2,#HIGH dieTemperature
001D 7900        R     MOV     R1,#LOW dieTemperature
001F 7D02              MOV     R5,#02H
0021 120000      E     LCALL   _CySpcReadData
0024 EF                MOV     A,R7
0025 B40215            CJNE    A,#02H,?C0007
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
0028 E4                CLR     A
0029 900000      R     MOV     DPTR,#status
002C F0                MOVX    @DPTR,A
002D         ?C0011:
                                           ; SOURCE LINE # 176
002D 904722            MOV     DPTR,#04722H
0030 E0                MOVX    A,@DPTR
0031 5402              ANL     A,#02H
0033 7010              JNZ     ?C0006
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 179
0035 7F01              MOV     R7,#01H
0037 FE                MOV     R6,A
0038 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 180
003B 80F0              SJMP    ?C0011
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 184
003D         ?C0007:
003D 904722            MOV     DPTR,#04722H
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 16  

0040 E0                MOVX    A,@DPTR
0041 5402              ANL     A,#02H
0043 60D4              JZ      ?C0009
                                           ; SOURCE LINE # 185
0045         ?C0006:
                                           ; SOURCE LINE # 187
0045 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 188
0048 8006              SJMP    ?C0013
004A         ?C0005:
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
004A 900000      R     MOV     DPTR,#status
004D 7404              MOV     A,#04H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
0050         ?C0013:
                                           ; SOURCE LINE # 194
0050 900000      R     MOV     DPTR,#status
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
                                           ; SOURCE LINE # 195
0055         ?C0014:
0055 22                RET     
             ; FUNCTION CySetTempInt (END)

             ; FUNCTION CyFlashGetSpcAlgorithm (BEGIN)
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 220
0000 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 222
0003 120000      E     LCALL   CySpcLock
0006 EF                MOV     A,R7
0007 703B              JNZ     ?C0015
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0009 120000      E     LCALL   CySpcGetAlgorithm
000C 900000      R     MOV     DPTR,#status
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0011 6407              XRL     A,#07H
0013 702A              JNZ     ?C0016
                                           ; SOURCE LINE # 227
0015         ?C0017:
                                           ; SOURCE LINE # 228
0015 904722            MOV     DPTR,#04722H
0018 E0                MOVX    A,@DPTR
0019 5402              ANL     A,#02H
001B 7008              JNZ     ?C0018
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 231
001D 7F01              MOV     R7,#01H
001F FE                MOV     R6,A
0020 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 232
0023 80F0              SJMP    ?C0017
0025         ?C0018:
                                           ; SOURCE LINE # 234
0025 904722            MOV     DPTR,#04722H
0028 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 17  

0029 5402              ANL     A,#02H
002B 6009              JZ      ?C0020
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 13                RRC     A
0030 13                RRC     A
0031 543F              ANL     A,#03FH
0033 FF                MOV     R7,A
0034 8002              SJMP    ?C0021
0036         ?C0020:
0036 7FFF              MOV     R7,#0FFH
0038         ?C0021:
0038 EF                MOV     A,R7
0039 7004              JNZ     ?C0016
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
003B 900000      R     MOV     DPTR,#status
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
003F         ?C0016:
                                           ; SOURCE LINE # 239
003F 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 240
0042 8006              SJMP    ?C0022
0044         ?C0015:
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
0044 900000      R     MOV     DPTR,#status
0047 7404              MOV     A,#04H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
004A         ?C0022:
                                           ; SOURCE LINE # 246
004A 900000      R     MOV     DPTR,#status
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
                                           ; SOURCE LINE # 247
004F         ?C0023:
004F 22                RET     
             ; FUNCTION CyFlashGetSpcAlgorithm (END)

             ; FUNCTION CySetTemp (BEGIN)
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
0000 120000      R     LCALL   CyFlashGetSpcAlgorithm
0003 900000      R     MOV     DPTR,#status
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
0008 7008              JNZ     ?C0024
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
000A 120000      R     LCALL   CySetTempInt
000D 900000      R     MOV     DPTR,#status
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
0012         ?C0024:
                                           ; SOURCE LINE # 282
0012 900000      R     MOV     DPTR,#status
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 18  

0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
                                           ; SOURCE LINE # 283
0017         ?C0025:
0017 22                RET     
             ; FUNCTION CySetTemp (END)

             ; FUNCTION _CySetFlashEEBuffer (BEGIN)
                                           ; SOURCE LINE # 306
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#status
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
000B 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 314
000E 900000      R     MOV     DPTR,#buffer
0011 120000      E     LCALL   ?C?PLDXDATA
0014 E9                MOV     A,R1
0015 4A                ORL     A,R2
0016 4B                ORL     A,R3
0017 7014              JNZ     ?C0026
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0019 900000      R     MOV     DPTR,#rowBuffer
001C 120000      E     LCALL   ?C?PLDXDATA
001F 900000      R     MOV     DPTR,#rowBuffer
0022 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 317
0025 900000      R     MOV     DPTR,#status
0028 7401              MOV     A,#01H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
002B 8029              SJMP    ?C0027
002D         ?C0026:
                                           ; SOURCE LINE # 319
002D 120000      E     LCALL   CySpcLock
0030 EF                MOV     A,R7
0031 6014              JZ      ?C0028
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0033 900000      R     MOV     DPTR,#rowBuffer
0036 120000      E     LCALL   ?C?PLDXDATA
0039 900000      R     MOV     DPTR,#rowBuffer
003C 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 322
003F 900000      R     MOV     DPTR,#status
0042 7404              MOV     A,#04H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
0045 800F              SJMP    ?C0027
0047         ?C0028:
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
0047 900000      R     MOV     DPTR,#buffer
004A 120000      E     LCALL   ?C?PLDXDATA
004D 900000      R     MOV     DPTR,#rowBuffer
0050 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 327
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 19  

0053 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 328
0056         ?C0027:
                                           ; SOURCE LINE # 337
0056 900000      R     MOV     DPTR,#status
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
                                           ; SOURCE LINE # 338
005B         ?C0030:
005B 22                RET     
             ; FUNCTION _CySetFlashEEBuffer (END)

             ; FUNCTION _CyWriteRowData (BEGIN)
                                           ; SOURCE LINE # 366
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
;---- Variable 'rowData' assigned to Register 'R1/R2/R3' ----
;---- Variable 'rowAddress' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 371
0005 D3                SETB    C
0006 943F              SUBB    A,#03FH
0008 4006              JC      ?C0031
000A 7E00              MOV     R6,#00H
000C 7F10              MOV     R7,#010H
000E 8004              SJMP    ?C0032
0010         ?C0031:
0010 7E01              MOV     R6,#01H
0012 7F00              MOV     R7,#00H
0014         ?C0032:
0014 900000      R     MOV     DPTR,#rowSize
0017 EE                MOV     A,R6
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
001C 900000      R     MOV     DPTR,#rowSize
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 900000      R     MOV     DPTR,#?_CyWriteRowFull?BYTE+06H
0026 CF                XCH     A,R7
0027 F0                MOVX    @DPTR,A
0028 A3                INC     DPTR
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
002B 900000      R     MOV     DPTR,#arrayId
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 120000      R     LCALL   _CyWriteRowFull
;---- Variable 'status' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
0033         ?C0033:
0033 22                RET     
             ; FUNCTION _CyWriteRowData (END)

             ; FUNCTION _CyWriteRowFull (BEGIN)
                                           ; SOURCE LINE # 443
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 20  

0000 900000      R     MOV     DPTR,#rowNumber
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 120000      E     LCALL   ?C?PSTXDATA
000C 900000      R     MOV     DPTR,#arrayId
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
0011 E4                CLR     A
0012 900000      R     MOV     DPTR,#status
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
0016 EF                MOV     A,R7
0017 D3                SETB    C
0018 943F              SUBB    A,#03FH
001A 500E              JNC     ?C0034
001C 900000      R     MOV     DPTR,#arrayId
001F E0                MOVX    A,@DPTR
0020 9401              SUBB    A,#01H
0022 4006              JC      ?C0034
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 450
0024 900000      R     MOV     DPTR,#status
0027 7401              MOV     A,#01H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
002A         ?C0034:
                                           ; SOURCE LINE # 453
002A 900000      R     MOV     DPTR,#arrayId
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F D3                SETB    C
0030 947F              SUBB    A,#07FH
0032 4006              JC      ?C0035
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
0034 900000      R     MOV     DPTR,#status
0037 7401              MOV     A,#01H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
003A         ?C0035:
                                           ; SOURCE LINE # 458
003A EF                MOV     A,R7
003B C3                CLR     C
003C 9440              SUBB    A,#040H
003E 400C              JC      ?C0036
0040 EF                MOV     A,R7
0041 D3                SETB    C
0042 9441              SUBB    A,#041H
0044 4006              JC      ?C0036
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
0046 900000      R     MOV     DPTR,#status
0049 7401              MOV     A,#01H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
004C         ?C0036:
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 21  

                                           ; SOURCE LINE # 463
004C EF                MOV     A,R7
004D D3                SETB    C
004E 943F              SUBB    A,#03FH
0050 501E              JNC     ?C0037
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 466
0052 900000      R     MOV     DPTR,#rowNumber
0055 E0                MOVX    A,@DPTR
0056 FE                MOV     R6,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A E4                CLR     A
005B FC                MOV     R4,A
005C FD                MOV     R5,A
005D FB                MOV     R3,A
005E 7A01              MOV     R2,#01H
0060 F9                MOV     R1,A
0061 F8                MOV     R0,A
0062 C3                CLR     C
0063 120000      E     LCALL   ?C?ULCMP
0066 502F              JNC     ?C0039
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
0068 900000      R     MOV     DPTR,#status
006B 7401              MOV     A,#01H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
006E 8027              SJMP    ?C0039
0070         ?C0037:
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 474
0070 D3                SETB    C
0071 900000      R     MOV     DPTR,#rowNumber+01H
0074 E0                MOVX    A,@DPTR
0075 9480              SUBB    A,#080H
0077 900000      R     MOV     DPTR,#rowNumber
007A E0                MOVX    A,@DPTR
007B 9400              SUBB    A,#00H
007D 4006              JC      ?C0040
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
007F 900000      R     MOV     DPTR,#status
0082 7401              MOV     A,#01H
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0085         ?C0040:
                                           ; SOURCE LINE # 479
0085 900000      R     MOV     DPTR,#rowSize
0088 E0                MOVX    A,@DPTR
0089 7004              JNZ     ?C0079
008B A3                INC     DPTR
008C E0                MOVX    A,@DPTR
008D 6410              XRL     A,#010H
008F         ?C0079:
008F 6006              JZ      ?C0039
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
0091 900000      R     MOV     DPTR,#status
0094 7401              MOV     A,#01H
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 22  

0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
0097         ?C0039:
                                           ; SOURCE LINE # 485
0097 900000      R     MOV     DPTR,#rowData
009A 120000      E     LCALL   ?C?PLDXDATA
009D E9                MOV     A,R1
009E 4A                ORL     A,R2
009F 4B                ORL     A,R3
00A0 7005              JNZ     ?C0042
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
00A2 900000      R     MOV     DPTR,#status
00A5 04                INC     A
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
00A7         ?C0042:
                                           ; SOURCE LINE # 491
00A7 900000      R     MOV     DPTR,#status
00AA E0                MOVX    A,@DPTR
00AB 6003              JZ      $ + 5H
00AD 020000      R     LJMP    ?C0043
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
00B0 120000      E     LCALL   CySpcLock
00B3 EF                MOV     A,R7
00B4 6003              JZ      $ + 5H
00B6 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 496
00B9 900000      R     MOV     DPTR,#rowNumber
00BC E0                MOVX    A,@DPTR
00BD FC                MOV     R4,A
00BE A3                INC     DPTR
00BF E0                MOVX    A,@DPTR
00C0 FD                MOV     R5,A
00C1 A3                INC     DPTR
00C2 120000      E     LCALL   ?C?PLDXDATA
00C5 900000      R     MOV     DPTR,#rowSize
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA A3                INC     DPTR
00CB E0                MOVX    A,@DPTR
00CC 900000      E     MOV     DPTR,#?_CySpcLoadRowFull?BYTE+06H
00CF CF                XCH     A,R7
00D0 F0                MOVX    @DPTR,A
00D1 A3                INC     DPTR
00D2 EF                MOV     A,R7
00D3 F0                MOVX    @DPTR,A
00D4 900000      R     MOV     DPTR,#arrayId
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 120000      E     LCALL   _CySpcLoadRowFull
00DC 900000      R     MOV     DPTR,#status
00DF EF                MOV     A,R7
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
00E1 6407              XRL     A,#07H
00E3 6003              JZ      $ + 5H
00E5 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 499
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 23  

00E8         ?C0046:
                                           ; SOURCE LINE # 500
00E8 904722            MOV     DPTR,#04722H
00EB E0                MOVX    A,@DPTR
00EC 5402              ANL     A,#02H
00EE 7008              JNZ     ?C0047
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 503
00F0 7F01              MOV     R7,#01H
00F2 FE                MOV     R6,A
00F3 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 504
00F6 80F0              SJMP    ?C0046
00F8         ?C0047:
                                           ; SOURCE LINE # 507
00F8 904722            MOV     DPTR,#04722H
00FB E0                MOVX    A,@DPTR
00FC 5402              ANL     A,#02H
00FE 6009              JZ      ?C0049
0100 E0                MOVX    A,@DPTR
0101 FF                MOV     R7,A
0102 13                RRC     A
0103 13                RRC     A
0104 543F              ANL     A,#03FH
0106 FF                MOV     R7,A
0107 8002              SJMP    ?C0050
0109         ?C0049:
0109 7FFF              MOV     R7,#0FFH
010B         ?C0050:
010B EF                MOV     A,R7
010C 7006              JNZ     ?C0048
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
010E 900000      R     MOV     DPTR,#status
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
0112 8006              SJMP    ?C0051
0114         ?C0048:
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
0114 900000      R     MOV     DPTR,#status
0117 74FF              MOV     A,#0FFH
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
011A         ?C0051:
                                           ; SOURCE LINE # 516
011A 900000      R     MOV     DPTR,#status
011D E0                MOVX    A,@DPTR
011E 7054              JNZ     ?C0045
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 519
0120 900000      R     MOV     DPTR,#arrayId
0123 E0                MOVX    A,@DPTR
0124 FF                MOV     R7,A
0125 A3                INC     DPTR
0126 E0                MOVX    A,@DPTR
0127 FC                MOV     R4,A
0128 A3                INC     DPTR
0129 E0                MOVX    A,@DPTR
012A FD                MOV     R5,A
012B 900000      R     MOV     DPTR,#dieTemperature
012E E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 24  

012F FB                MOV     R3,A
0130 A3                INC     DPTR
0131 E0                MOVX    A,@DPTR
0132 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
0135 F0                MOVX    @DPTR,A
0136 120000      E     LCALL   _CySpcWriteRow
0139 900000      R     MOV     DPTR,#status
013C EF                MOV     A,R7
013D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
013E 6407              XRL     A,#07H
0140 7032              JNZ     ?C0045
                                           ; SOURCE LINE # 522
0142         ?C0054:
                                           ; SOURCE LINE # 523
0142 904722            MOV     DPTR,#04722H
0145 E0                MOVX    A,@DPTR
0146 5402              ANL     A,#02H
0148 7008              JNZ     ?C0055
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 526
014A 7F01              MOV     R7,#01H
014C FE                MOV     R6,A
014D 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 527
0150 80F0              SJMP    ?C0054
0152         ?C0055:
                                           ; SOURCE LINE # 530
0152 904722            MOV     DPTR,#04722H
0155 E0                MOVX    A,@DPTR
0156 5402              ANL     A,#02H
0158 6009              JZ      ?C0057
015A E0                MOVX    A,@DPTR
015B FF                MOV     R7,A
015C 13                RRC     A
015D 13                RRC     A
015E 543F              ANL     A,#03FH
0160 FF                MOV     R7,A
0161 8002              SJMP    ?C0058
0163         ?C0057:
0163 7FFF              MOV     R7,#0FFH
0165         ?C0058:
0165 EF                MOV     A,R7
0166 7006              JNZ     ?C0056
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
0168 900000      R     MOV     DPTR,#status
016B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
016C 8006              SJMP    ?C0045
016E         ?C0056:
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 536
016E 900000      R     MOV     DPTR,#status
0171 74FF              MOV     A,#0FFH
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
0174         ?C0045:
                                           ; SOURCE LINE # 541
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 25  

0174 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 542
0177 8006              SJMP    ?C0043
0179         ?C0044:
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
0179 900000      R     MOV     DPTR,#status
017C 7404              MOV     A,#04H
017E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
017F         ?C0043:
                                           ; SOURCE LINE # 549
017F 900000      R     MOV     DPTR,#status
0182 E0                MOVX    A,@DPTR
0183 FF                MOV     R7,A
                                           ; SOURCE LINE # 550
0184         ?C0061:
0184 22                RET     
             ; FUNCTION _CyWriteRowFull (END)

             ; FUNCTION _CyFlash_SetWaitCycles (BEGIN)
                                           ; SOURCE LINE # 571
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 576
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#interruptState
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
000D 900000      R     MOV     DPTR,#freq
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 C3                CLR     C
0013 9416              SUBB    A,#016H
0015 500B              JNC     ?C0062
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
0017 904800            MOV     DPTR,#04800H
001A E0                MOVX    A,@DPTR
001B 543F              ANL     A,#03FH
001D 4440              ORL     A,#040H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
0020 802A              SJMP    ?C0063
0022         ?C0062:
                                           ; SOURCE LINE # 589
0022 EF                MOV     A,R7
0023 C3                CLR     C
0024 942C              SUBB    A,#02CH
0026 500B              JNC     ?C0064
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 591
0028 904800            MOV     DPTR,#04800H
002B E0                MOVX    A,@DPTR
002C 543F              ANL     A,#03FH
002E 4480              ORL     A,#080H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 593
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 26  

0031 8019              SJMP    ?C0063
0033         ?C0064:
                                           ; SOURCE LINE # 594
0033 900000      R     MOV     DPTR,#freq
0036 E0                MOVX    A,@DPTR
0037 C3                CLR     C
0038 9443              SUBB    A,#043H
003A 500B              JNC     ?C0066
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
003C 904800            MOV     DPTR,#04800H
003F E0                MOVX    A,@DPTR
0040 543F              ANL     A,#03FH
0042 44C0              ORL     A,#0C0H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
0045 8005              SJMP    ?C0063
0047         ?C0066:
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 614
0047 7F00              MOV     R7,#00H
0049 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 615
004C         ?C0063:
                                           ; SOURCE LINE # 618
004C 900000      R     MOV     DPTR,#interruptState
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 619
0054 22                RET     
             ; FUNCTION _CyFlash_SetWaitCycles (END)

             ; FUNCTION CyEEPROM_Start (BEGIN)
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 637
                                           ; SOURCE LINE # 640
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 647
0003 9043A0            MOV     DPTR,#043A0H
0006 E0                MOVX    A,@DPTR
0007 4408              ORL     A,#08H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
000A 9043B0            MOV     DPTR,#043B0H
000D E0                MOVX    A,@DPTR
000E 4408              ORL     A,#08H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
0011 904701            MOV     DPTR,#04701H
0014 74C8              MOV     A,#0C8H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
0017 9043AC            MOV     DPTR,#043ACH
001A E0                MOVX    A,@DPTR
001B 4410              ORL     A,#010H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 669
001E 9043BC            MOV     DPTR,#043BCH
0021 E0                MOVX    A,@DPTR
0022 4410              ORL     A,#010H
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 27  

0024 F0                MOVX    @DPTR,A
0025         ?C0070:
                                           ; SOURCE LINE # 671
0025 904700            MOV     DPTR,#04700H
0028 E0                MOVX    A,@DPTR
0029 5420              ANL     A,#020H
002B 60F8              JZ      ?C0070
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 674
002D         ?C0071:
                                           ; SOURCE LINE # 676
002D 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 677
0030 22                RET     
             ; FUNCTION CyEEPROM_Start (END)

             ; FUNCTION CyEEPROM_Stop (BEGIN)
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 698
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 700
0003 9043AC            MOV     DPTR,#043ACH
0006 E0                MOVX    A,@DPTR
0007 54EF              ANL     A,#0EFH
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 701
000A 9043BC            MOV     DPTR,#043BCH
000D E0                MOVX    A,@DPTR
000E 54EF              ANL     A,#0EFH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 703
0011 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 704
0014 22                RET     
             ; FUNCTION CyEEPROM_Stop (END)

             ; FUNCTION CyEEPROM_ReadReserve (BEGIN)
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 724
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
0007         ?C0074:
                                           ; SOURCE LINE # 726
0007 904702            MOV     DPTR,#04702H
000A E0                MOVX    A,@DPTR
000B 5402              ANL     A,#02H
000D 60F8              JZ      ?C0074
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 729
000F         ?C0075:
                                           ; SOURCE LINE # 730
000F         ?C0076:
000F 22                RET     
             ; FUNCTION CyEEPROM_ReadReserve (END)

             ; FUNCTION CyEEPROM_ReadRelease (BEGIN)
                                           ; SOURCE LINE # 747
C51 COMPILER V9.51   CYFLASH                                                               05/02/2015 10:57:09 PAGE 28  

                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 749
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 750
0007 22                RET     
             ; FUNCTION CyEEPROM_ReadRelease (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    972    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
